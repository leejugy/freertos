
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e5c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08006f6c  08006f6c  00016f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070f8  080070f8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080070f8  080070f8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070f8  080070f8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f8  080070f8  000170f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070fc  080070fc  000170fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007100  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c38  2000006c  0800716c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ca4  0800716c  00021ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018253  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039b6  00000000  00000000  0003832b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  0003bce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fef  00000000  00000000  0003d180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2b3  00000000  00000000  0003e16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019174  00000000  00000000  00059422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096089  00000000  00000000  00072596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c60  00000000  00000000  00108620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0010e280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f54 	.word	0x08006f54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08006f54 	.word	0x08006f54

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <MX_DMA_Init+0x38>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a0b      	ldr	r2, [pc, #44]	; (8000188 <MX_DMA_Init+0x38>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b09      	ldr	r3, [pc, #36]	; (8000188 <MX_DMA_Init+0x38>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	200f      	movs	r0, #15
 8000174:	f000 fd09 	bl	8000b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000178:	200f      	movs	r0, #15
 800017a:	f000 fd22 	bl	8000bc2 <HAL_NVIC_EnableIRQ>

}
 800017e:	bf00      	nop
 8000180:	3708      	adds	r7, #8
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40021000 	.word	0x40021000

0800018c <HAL_UART_RxCpltCallback>:
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	uart_flag=true;
 8000194:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <HAL_UART_RxCpltCallback+0x18>)
 8000196:	2201      	movs	r2, #1
 8000198:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	20000089 	.word	0x20000089

080001a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (5, sizeof(uint8_t), &myQueue01_attributes);
 80001ac:	4a0c      	ldr	r2, [pc, #48]	; (80001e0 <MX_FREERTOS_Init+0x38>)
 80001ae:	2101      	movs	r1, #1
 80001b0:	2005      	movs	r0, #5
 80001b2:	f003 f93b 	bl	800342c <osMessageQueueNew>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a0a      	ldr	r2, [pc, #40]	; (80001e4 <MX_FREERTOS_Init+0x3c>)
 80001ba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of led0 */
  led0Handle = osThreadNew(StartDefaultTask, NULL, &led0_attributes);
 80001bc:	4a0a      	ldr	r2, [pc, #40]	; (80001e8 <MX_FREERTOS_Init+0x40>)
 80001be:	2100      	movs	r1, #0
 80001c0:	480a      	ldr	r0, [pc, #40]	; (80001ec <MX_FREERTOS_Init+0x44>)
 80001c2:	f003 f85b 	bl	800327c <osThreadNew>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <MX_FREERTOS_Init+0x48>)
 80001ca:	6013      	str	r3, [r2, #0]

  /* creation of led1 */
  led1Handle = osThreadNew(StartTask02, NULL, &led1_attributes);
 80001cc:	4a09      	ldr	r2, [pc, #36]	; (80001f4 <MX_FREERTOS_Init+0x4c>)
 80001ce:	2100      	movs	r1, #0
 80001d0:	4809      	ldr	r0, [pc, #36]	; (80001f8 <MX_FREERTOS_Init+0x50>)
 80001d2:	f003 f853 	bl	800327c <osThreadNew>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4a08      	ldr	r2, [pc, #32]	; (80001fc <MX_FREERTOS_Init+0x54>)
 80001da:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	08007080 	.word	0x08007080
 80001e4:	20000094 	.word	0x20000094
 80001e8:	08007038 	.word	0x08007038
 80001ec:	08000201 	.word	0x08000201
 80001f0:	2000008c 	.word	0x2000008c
 80001f4:	0800705c 	.word	0x0800705c
 80001f8:	0800029d 	.word	0x0800029d
 80001fc:	20000090 	.word	0x20000090

08000200 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint32_t pretime=HAL_GetTick();
 8000208:	f000 fc00 	bl	8000a0c <HAL_GetTick>
 800020c:	60f8      	str	r0, [r7, #12]
	uint8_t receive_val1;
	uint8_t receive_val2;
	uint8_t receive_queue_priority1=0;
 800020e:	2300      	movs	r3, #0
 8000210:	727b      	strb	r3, [r7, #9]
	uint8_t receive_queue_priority2=1;
 8000212:	2301      	movs	r3, #1
 8000214:	723b      	strb	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {

	if(HAL_GetTick()-pretime>50){
 8000216:	f000 fbf9 	bl	8000a0c <HAL_GetTick>
 800021a:	4602      	mov	r2, r0
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	1ad3      	subs	r3, r2, r3
 8000220:	2b32      	cmp	r3, #50	; 0x32
 8000222:	d906      	bls.n	8000232 <StartDefaultTask+0x32>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8000224:	2108      	movs	r1, #8
 8000226:	4818      	ldr	r0, [pc, #96]	; (8000288 <StartDefaultTask+0x88>)
 8000228:	f001 f918 	bl	800145c <HAL_GPIO_TogglePin>
		pretime=HAL_GetTick();
 800022c:	f000 fbee 	bl	8000a0c <HAL_GetTick>
 8000230:	60f8      	str	r0, [r7, #12]
	}
	if(task_send){
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <StartDefaultTask+0x8c>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d022      	beq.n	8000280 <StartDefaultTask+0x80>
		osMessageQueueGet(myQueue01Handle,&receive_val1,&receive_queue_priority1,10);
 800023a:	4b15      	ldr	r3, [pc, #84]	; (8000290 <StartDefaultTask+0x90>)
 800023c:	6818      	ldr	r0, [r3, #0]
 800023e:	f107 0209 	add.w	r2, r7, #9
 8000242:	f107 010b 	add.w	r1, r7, #11
 8000246:	230a      	movs	r3, #10
 8000248:	f003 f9ea 	bl	8003620 <osMessageQueueGet>
		printf("task1-1) current receive val:%c, 0x%X\n",receive_val1,receive_val1);
 800024c:	7afb      	ldrb	r3, [r7, #11]
 800024e:	4619      	mov	r1, r3
 8000250:	7afb      	ldrb	r3, [r7, #11]
 8000252:	461a      	mov	r2, r3
 8000254:	480f      	ldr	r0, [pc, #60]	; (8000294 <StartDefaultTask+0x94>)
 8000256:	f005 ff9b 	bl	8006190 <iprintf>
		osMessageQueueGet(myQueue01Handle,&receive_val2,&receive_queue_priority2,10);
 800025a:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <StartDefaultTask+0x90>)
 800025c:	6818      	ldr	r0, [r3, #0]
 800025e:	f107 0208 	add.w	r2, r7, #8
 8000262:	f107 010a 	add.w	r1, r7, #10
 8000266:	230a      	movs	r3, #10
 8000268:	f003 f9da 	bl	8003620 <osMessageQueueGet>
		printf("task1-2) current receive val:%c, 0x%X\n",receive_val2,receive_val2);
 800026c:	7abb      	ldrb	r3, [r7, #10]
 800026e:	4619      	mov	r1, r3
 8000270:	7abb      	ldrb	r3, [r7, #10]
 8000272:	461a      	mov	r2, r3
 8000274:	4808      	ldr	r0, [pc, #32]	; (8000298 <StartDefaultTask+0x98>)
 8000276:	f005 ff8b 	bl	8006190 <iprintf>
		task_send=false;
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <StartDefaultTask+0x8c>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
	}
    osDelay(1);
 8000280:	2001      	movs	r0, #1
 8000282:	f003 f8a5 	bl	80033d0 <osDelay>
	if(HAL_GetTick()-pretime>50){
 8000286:	e7c6      	b.n	8000216 <StartDefaultTask+0x16>
 8000288:	40010c00 	.word	0x40010c00
 800028c:	20000088 	.word	0x20000088
 8000290:	20000094 	.word	0x20000094
 8000294:	08006f88 	.word	0x08006f88
 8000298:	08006fb0 	.word	0x08006fb0

0800029c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint32_t pretime=HAL_GetTick();
 80002a4:	f000 fbb2 	bl	8000a0c <HAL_GetTick>
 80002a8:	60f8      	str	r0, [r7, #12]
	uint8_t send_val[2];
  /* Infinite loop */
  for(;;)
  {

	  HAL_UART_Receive_DMA(&huart1,&send_val[0],2);
 80002aa:	f107 0308 	add.w	r3, r7, #8
 80002ae:	2202      	movs	r2, #2
 80002b0:	4619      	mov	r1, r3
 80002b2:	4823      	ldr	r0, [pc, #140]	; (8000340 <StartTask02+0xa4>)
 80002b4:	f002 f849 	bl	800234a <HAL_UART_Receive_DMA>
	  if(uart_flag){
 80002b8:	4b22      	ldr	r3, [pc, #136]	; (8000344 <StartTask02+0xa8>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d02a      	beq.n	8000316 <StartTask02+0x7a>
		  printf("\x1B[2J");
 80002c0:	4821      	ldr	r0, [pc, #132]	; (8000348 <StartTask02+0xac>)
 80002c2:	f005 ff65 	bl	8006190 <iprintf>
		  printf("task2-1) transmit val:%c, 0x%X\n",send_val[0],send_val[0]);
 80002c6:	7a3b      	ldrb	r3, [r7, #8]
 80002c8:	4619      	mov	r1, r3
 80002ca:	7a3b      	ldrb	r3, [r7, #8]
 80002cc:	461a      	mov	r2, r3
 80002ce:	481f      	ldr	r0, [pc, #124]	; (800034c <StartTask02+0xb0>)
 80002d0:	f005 ff5e 	bl	8006190 <iprintf>
		  printf("task2-2) transmit val:%c, 0x%X\n",send_val[1],send_val[1]);
 80002d4:	7a7b      	ldrb	r3, [r7, #9]
 80002d6:	4619      	mov	r1, r3
 80002d8:	7a7b      	ldrb	r3, [r7, #9]
 80002da:	461a      	mov	r2, r3
 80002dc:	481c      	ldr	r0, [pc, #112]	; (8000350 <StartTask02+0xb4>)
 80002de:	f005 ff57 	bl	8006190 <iprintf>
		  is_uart_receive=false;
 80002e2:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <StartTask02+0xb8>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	701a      	strb	r2, [r3, #0]
		  osMessageQueuePut(myQueue01Handle,&send_val[0],0,10);
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <StartTask02+0xbc>)
 80002ea:	6818      	ldr	r0, [r3, #0]
 80002ec:	f107 0108 	add.w	r1, r7, #8
 80002f0:	230a      	movs	r3, #10
 80002f2:	2200      	movs	r2, #0
 80002f4:	f003 f920 	bl	8003538 <osMessageQueuePut>
		  osMessageQueuePut(myQueue01Handle,&send_val[1],1,10);
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <StartTask02+0xbc>)
 80002fa:	6818      	ldr	r0, [r3, #0]
 80002fc:	f107 0308 	add.w	r3, r7, #8
 8000300:	1c59      	adds	r1, r3, #1
 8000302:	230a      	movs	r3, #10
 8000304:	2201      	movs	r2, #1
 8000306:	f003 f917 	bl	8003538 <osMessageQueuePut>
		  task_send=true;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <StartTask02+0xc0>)
 800030c:	2201      	movs	r2, #1
 800030e:	701a      	strb	r2, [r3, #0]
		  uart_flag=false;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <StartTask02+0xa8>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
	  }
	  if(HAL_GetTick()-pretime>300){
 8000316:	f000 fb79 	bl	8000a0c <HAL_GetTick>
 800031a:	4602      	mov	r2, r0
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	1ad3      	subs	r3, r2, r3
 8000320:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000324:	d907      	bls.n	8000336 <StartTask02+0x9a>
	  	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 8000326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <StartTask02+0xc4>)
 800032c:	f001 f896 	bl	800145c <HAL_GPIO_TogglePin>
	  	pretime=HAL_GetTick();
 8000330:	f000 fb6c 	bl	8000a0c <HAL_GetTick>
 8000334:	60f8      	str	r0, [r7, #12]
	}

    osDelay(1);
 8000336:	2001      	movs	r0, #1
 8000338:	f003 f84a 	bl	80033d0 <osDelay>
	  HAL_UART_Receive_DMA(&huart1,&send_val[0],2);
 800033c:	e7b5      	b.n	80002aa <StartTask02+0xe>
 800033e:	bf00      	nop
 8000340:	200000e8 	.word	0x200000e8
 8000344:	20000089 	.word	0x20000089
 8000348:	08006fd8 	.word	0x08006fd8
 800034c:	08006fe0 	.word	0x08006fe0
 8000350:	08007000 	.word	0x08007000
 8000354:	20000098 	.word	0x20000098
 8000358:	20000094 	.word	0x20000094
 800035c:	20000088 	.word	0x20000088
 8000360:	40010c00 	.word	0x40010c00

08000364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <MX_GPIO_Init+0x90>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a1d      	ldr	r2, [pc, #116]	; (80003f4 <MX_GPIO_Init+0x90>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_GPIO_Init+0x90>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0320 	and.w	r3, r3, #32
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_GPIO_Init+0x90>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a17      	ldr	r2, [pc, #92]	; (80003f4 <MX_GPIO_Init+0x90>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_GPIO_Init+0x90>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0308 	and.w	r3, r3, #8
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_GPIO_Init+0x90>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a11      	ldr	r2, [pc, #68]	; (80003f4 <MX_GPIO_Init+0x90>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_GPIO_Init+0x90>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f241 0108 	movw	r1, #4104	; 0x1008
 80003c6:	480c      	ldr	r0, [pc, #48]	; (80003f8 <MX_GPIO_Init+0x94>)
 80003c8:	f001 f830 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 80003cc:	f241 0308 	movw	r3, #4104	; 0x1008
 80003d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2302      	movs	r3, #2
 80003dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	4619      	mov	r1, r3
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <MX_GPIO_Init+0x94>)
 80003e6:	f000 fe9d 	bl	8001124 <HAL_GPIO_Init>

}
 80003ea:	bf00      	nop
 80003ec:	3720      	adds	r7, #32
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40010c00 	.word	0x40010c00

080003fc <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch,1,100);
 8000404:	1d39      	adds	r1, r7, #4
 8000406:	2364      	movs	r3, #100	; 0x64
 8000408:	2201      	movs	r2, #1
 800040a:	4804      	ldr	r0, [pc, #16]	; (800041c <__io_putchar+0x20>)
 800040c:	f001 ff1a 	bl	8002244 <HAL_UART_Transmit>
	return 0;
 8000410:	2300      	movs	r3, #0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000e8 	.word	0x200000e8

08000420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000424:	f000 faca 	bl	80009bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000428:	f000 f80d 	bl	8000446 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042c:	f7ff ff9a 	bl	8000364 <MX_GPIO_Init>
  MX_DMA_Init();
 8000430:	f7ff fe8e 	bl	8000150 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000434:	f000 f9f4 	bl	8000820 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000438:	f002 feba 	bl	80031b0 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800043c:	f7ff feb4 	bl	80001a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000440:	f002 fee8 	bl	8003214 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000444:	e7fe      	b.n	8000444 <main+0x24>

08000446 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b090      	sub	sp, #64	; 0x40
 800044a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044c:	f107 0318 	add.w	r3, r7, #24
 8000450:	2228      	movs	r2, #40	; 0x28
 8000452:	2100      	movs	r1, #0
 8000454:	4618      	mov	r0, r3
 8000456:	f005 fef0 	bl	800623a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000468:	2301      	movs	r3, #1
 800046a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000470:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2301      	movs	r3, #1
 8000478:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	2302      	movs	r3, #2
 800047c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000482:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000484:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000488:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	f107 0318 	add.w	r3, r7, #24
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fffe 	bl	8001490 <HAL_RCC_OscConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800049a:	f000 f82b 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049e:	230f      	movs	r3, #15
 80004a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a2:	2302      	movs	r3, #2
 80004a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2102      	movs	r1, #2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 fa6b 	bl	8001994 <HAL_RCC_ClockConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004c4:	f000 f816 	bl	80004f4 <Error_Handler>
  }
}
 80004c8:	bf00      	nop
 80004ca:	3740      	adds	r7, #64	; 0x40
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a04      	ldr	r2, [pc, #16]	; (80004f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d101      	bne.n	80004e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004e2:	f000 fa81 	bl	80009e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40000800 	.word	0x40000800

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	e7fe      	b.n	80004fc <Error_Handler+0x8>
	...

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <HAL_MspInit+0x68>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a17      	ldr	r2, [pc, #92]	; (8000568 <HAL_MspInit+0x68>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_MspInit+0x68>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_MspInit+0x68>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a11      	ldr	r2, [pc, #68]	; (8000568 <HAL_MspInit+0x68>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_MspInit+0x68>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	210f      	movs	r1, #15
 800053a:	f06f 0001 	mvn.w	r0, #1
 800053e:	f000 fb24 	bl	8000b8a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <HAL_MspInit+0x6c>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <HAL_MspInit+0x6c>)
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	40010000 	.word	0x40010000

08000570 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08e      	sub	sp, #56	; 0x38
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000578:	2300      	movs	r3, #0
 800057a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800057c:	2300      	movs	r3, #0
 800057e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000580:	2300      	movs	r3, #0
 8000582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000586:	4b34      	ldr	r3, [pc, #208]	; (8000658 <HAL_InitTick+0xe8>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a33      	ldr	r2, [pc, #204]	; (8000658 <HAL_InitTick+0xe8>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b31      	ldr	r3, [pc, #196]	; (8000658 <HAL_InitTick+0xe8>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800059e:	f107 0210 	add.w	r2, r7, #16
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4611      	mov	r1, r2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fb63 	bl	8001c74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005ae:	6a3b      	ldr	r3, [r7, #32]
 80005b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d103      	bne.n	80005c0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005b8:	f001 fb34 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 80005bc:	6378      	str	r0, [r7, #52]	; 0x34
 80005be:	e004      	b.n	80005ca <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005c0:	f001 fb30 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 80005c4:	4603      	mov	r3, r0
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005cc:	4a23      	ldr	r2, [pc, #140]	; (800065c <HAL_InitTick+0xec>)
 80005ce:	fba2 2303 	umull	r2, r3, r2, r3
 80005d2:	0c9b      	lsrs	r3, r3, #18
 80005d4:	3b01      	subs	r3, #1
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80005d8:	4b21      	ldr	r3, [pc, #132]	; (8000660 <HAL_InitTick+0xf0>)
 80005da:	4a22      	ldr	r2, [pc, #136]	; (8000664 <HAL_InitTick+0xf4>)
 80005dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <HAL_InitTick+0xf0>)
 80005e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005e4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005e6:	4a1e      	ldr	r2, [pc, #120]	; (8000660 <HAL_InitTick+0xf0>)
 80005e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <HAL_InitTick+0xf0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <HAL_InitTick+0xf0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <HAL_InitTick+0xf0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80005fe:	4818      	ldr	r0, [pc, #96]	; (8000660 <HAL_InitTick+0xf0>)
 8000600:	f001 fb86 	bl	8001d10 <HAL_TIM_Base_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800060a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800060e:	2b00      	cmp	r3, #0
 8000610:	d11b      	bne.n	800064a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000612:	4813      	ldr	r0, [pc, #76]	; (8000660 <HAL_InitTick+0xf0>)
 8000614:	f001 fbd4 	bl	8001dc0 <HAL_TIM_Base_Start_IT>
 8000618:	4603      	mov	r3, r0
 800061a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800061e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000622:	2b00      	cmp	r3, #0
 8000624:	d111      	bne.n	800064a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000626:	201e      	movs	r0, #30
 8000628:	f000 facb 	bl	8000bc2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b0f      	cmp	r3, #15
 8000630:	d808      	bhi.n	8000644 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000632:	2200      	movs	r2, #0
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	201e      	movs	r0, #30
 8000638:	f000 faa7 	bl	8000b8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800063c:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <HAL_InitTick+0xf8>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	e002      	b.n	800064a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000644:	2301      	movs	r3, #1
 8000646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800064a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800064e:	4618      	mov	r0, r3
 8000650:	3738      	adds	r7, #56	; 0x38
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	431bde83 	.word	0x431bde83
 8000660:	2000009c 	.word	0x2000009c
 8000664:	40000800 	.word	0x40000800
 8000668:	20000004 	.word	0x20000004

0800066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000670:	e7fe      	b.n	8000670 <NMI_Handler+0x4>

08000672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <HardFault_Handler+0x4>

08000678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <MemManage_Handler+0x4>

0800067e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <BusFault_Handler+0x4>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <UsageFault_Handler+0x4>

0800068a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
	...

08000698 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800069c:	4802      	ldr	r0, [pc, #8]	; (80006a8 <DMA1_Channel5_IRQHandler+0x10>)
 800069e:	f000 fc0d 	bl	8000ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000130 	.word	0x20000130

080006ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006b0:	4802      	ldr	r0, [pc, #8]	; (80006bc <TIM4_IRQHandler+0x10>)
 80006b2:	f001 fbd7 	bl	8001e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000009c 	.word	0x2000009c

080006c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <USART1_IRQHandler+0x10>)
 80006c6:	f001 fe65 	bl	8002394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200000e8 	.word	0x200000e8

080006d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e00a      	b.n	80006fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006e6:	f3af 8000 	nop.w
 80006ea:	4601      	mov	r1, r0
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	60ba      	str	r2, [r7, #8]
 80006f2:	b2ca      	uxtb	r2, r1
 80006f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3301      	adds	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	dbf0      	blt.n	80006e6 <_read+0x12>
  }

  return len;
 8000704:	687b      	ldr	r3, [r7, #4]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b086      	sub	sp, #24
 8000712:	af00      	add	r7, sp, #0
 8000714:	60f8      	str	r0, [r7, #12]
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	e009      	b.n	8000734 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	60ba      	str	r2, [r7, #8]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fe67 	bl	80003fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	3301      	adds	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	dbf1      	blt.n	8000720 <_write+0x12>
  }
  return len;
 800073c:	687b      	ldr	r3, [r7, #4]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <_close>:

int _close(int file)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800076c:	605a      	str	r2, [r3, #4]
  return 0;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <_isatty>:

int _isatty(int file)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800078e:	b480      	push	{r7}
 8000790:	b085      	sub	sp, #20
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
	...

080007a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <_sbrk+0x5c>)
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <_sbrk+0x60>)
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <_sbrk+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d102      	bne.n	80007ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <_sbrk+0x64>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <_sbrk+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d207      	bcs.n	80007e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d8:	f005 fdd4 	bl	8006384 <__errno>
 80007dc:	4603      	mov	r3, r0
 80007de:	220c      	movs	r2, #12
 80007e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e009      	b.n	80007fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <_sbrk+0x64>)
 80007f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20005000 	.word	0x20005000
 8000808:	00000400 	.word	0x00000400
 800080c:	200000e4 	.word	0x200000e4
 8000810:	20001ca8 	.word	0x20001ca8

08000814 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART1_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_USART1_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_USART1_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART1_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART1_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART1_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART1_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART1_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART1_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USART1_UART_Init+0x4c>)
 8000858:	f001 fca4 	bl	80021a4 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f7ff fe47 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000e8 	.word	0x200000e8
 8000870:	40013800 	.word	0x40013800

08000874 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a33      	ldr	r2, [pc, #204]	; (800095c <HAL_UART_MspInit+0xe8>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d15f      	bne.n	8000954 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000894:	4b32      	ldr	r3, [pc, #200]	; (8000960 <HAL_UART_MspInit+0xec>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a31      	ldr	r2, [pc, #196]	; (8000960 <HAL_UART_MspInit+0xec>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <HAL_UART_MspInit+0xec>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <HAL_UART_MspInit+0xec>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a2b      	ldr	r2, [pc, #172]	; (8000960 <HAL_UART_MspInit+0xec>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <HAL_UART_MspInit+0xec>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	4822      	ldr	r0, [pc, #136]	; (8000964 <HAL_UART_MspInit+0xf0>)
 80008da:	f000 fc23 	bl	8001124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	481c      	ldr	r0, [pc, #112]	; (8000964 <HAL_UART_MspInit+0xf0>)
 80008f4:	f000 fc16 	bl	8001124 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <HAL_UART_MspInit+0xf4>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <HAL_UART_MspInit+0xf8>)
 80008fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <HAL_UART_MspInit+0xf4>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_UART_MspInit+0xf4>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_UART_MspInit+0xf4>)
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_UART_MspInit+0xf4>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_UART_MspInit+0xf4>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_UART_MspInit+0xf4>)
 800091e:	2220      	movs	r2, #32
 8000920:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_UART_MspInit+0xf4>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000928:	480f      	ldr	r0, [pc, #60]	; (8000968 <HAL_UART_MspInit+0xf4>)
 800092a:	f000 f959 	bl	8000be0 <HAL_DMA_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000934:	f7ff fdde 	bl	80004f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <HAL_UART_MspInit+0xf4>)
 800093c:	63da      	str	r2, [r3, #60]	; 0x3c
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_UART_MspInit+0xf4>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2105      	movs	r1, #5
 8000948:	2025      	movs	r0, #37	; 0x25
 800094a:	f000 f91e 	bl	8000b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800094e:	2025      	movs	r0, #37	; 0x25
 8000950:	f000 f937 	bl	8000bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000954:	bf00      	nop
 8000956:	3720      	adds	r7, #32
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40013800 	.word	0x40013800
 8000960:	40021000 	.word	0x40021000
 8000964:	40010800 	.word	0x40010800
 8000968:	20000130 	.word	0x20000130
 800096c:	40020058 	.word	0x40020058

08000970 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000970:	f7ff ff50 	bl	8000814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000976:	490c      	ldr	r1, [pc, #48]	; (80009a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000978:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a09      	ldr	r2, [pc, #36]	; (80009b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800098c:	4c09      	ldr	r4, [pc, #36]	; (80009b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099a:	f005 fcf9 	bl	8006390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800099e:	f7ff fd3f 	bl	8000420 <main>
  bx lr
 80009a2:	4770      	bx	lr
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80009ac:	08007100 	.word	0x08007100
  ldr r2, =_sbss
 80009b0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80009b4:	20001ca4 	.word	0x20001ca4

080009b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC1_2_IRQHandler>
	...

080009bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_Init+0x28>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <HAL_Init+0x28>)
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f8d1 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d2:	200f      	movs	r0, #15
 80009d4:	f7ff fdcc 	bl	8000570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d8:	f7ff fd92 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_IncTick+0x1c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_IncTick+0x20>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a03      	ldr	r2, [pc, #12]	; (8000a08 <HAL_IncTick+0x20>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000174 	.word	0x20000174

08000a0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a10:	4b02      	ldr	r3, [pc, #8]	; (8000a1c <HAL_GetTick+0x10>)
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	20000174 	.word	0x20000174

08000a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a52:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	60d3      	str	r3, [r2, #12]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <__NVIC_GetPriorityGrouping+0x18>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	f003 0307 	and.w	r3, r3, #7
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db0b      	blt.n	8000aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	f003 021f 	and.w	r2, r3, #31
 8000a9c:	4906      	ldr	r1, [pc, #24]	; (8000ab8 <__NVIC_EnableIRQ+0x34>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	e000e100 	.word	0xe000e100

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	; (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	; (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	; 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff4f 	bl	8000a20 <__NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9c:	f7ff ff64 	bl	8000a68 <__NVIC_GetPriorityGrouping>
 8000ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	6978      	ldr	r0, [r7, #20]
 8000ba8:	f7ff ffb2 	bl	8000b10 <NVIC_EncodePriority>
 8000bac:	4602      	mov	r2, r0
 8000bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff81 	bl	8000abc <__NVIC_SetPriority>
}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff57 	bl	8000a84 <__NVIC_EnableIRQ>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e043      	b.n	8000c7e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <HAL_DMA_Init+0xa8>)
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a22      	ldr	r2, [pc, #136]	; (8000c8c <HAL_DMA_Init+0xac>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	009a      	lsls	r2, r3, #2
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <HAL_DMA_Init+0xb0>)
 8000c12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2202      	movs	r2, #2
 8000c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	bffdfff8 	.word	0xbffdfff8
 8000c8c:	cccccccd 	.word	0xcccccccd
 8000c90:	40020000 	.word	0x40020000

08000c94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d101      	bne.n	8000cb4 <HAL_DMA_Start_IT+0x20>
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	e04b      	b.n	8000d4c <HAL_DMA_Start_IT+0xb8>
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d13a      	bne.n	8000d3e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2202      	movs	r2, #2
 8000ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f022 0201 	bic.w	r2, r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	68b9      	ldr	r1, [r7, #8]
 8000cec:	68f8      	ldr	r0, [r7, #12]
 8000cee:	f000 f9eb 	bl	80010c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d008      	beq.n	8000d0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f042 020e 	orr.w	r2, r2, #14
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e00f      	b.n	8000d2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0204 	bic.w	r2, r2, #4
 8000d1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f042 020a 	orr.w	r2, r2, #10
 8000d2a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f042 0201 	orr.w	r2, r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	e005      	b.n	8000d4a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d46:	2302      	movs	r3, #2
 8000d48:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d008      	beq.n	8000d7e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2204      	movs	r2, #4
 8000d70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e020      	b.n	8000dc0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 020e 	bic.w	r2, r2, #14
 8000d8c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0201 	bic.w	r2, r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000da6:	2101      	movs	r1, #1
 8000da8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
	...

08000dcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d005      	beq.n	8000df0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2204      	movs	r2, #4
 8000de8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e051      	b.n	8000e94 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 020e 	bic.w	r2, r2, #14
 8000dfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0201 	bic.w	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a22      	ldr	r2, [pc, #136]	; (8000ea0 <HAL_DMA_Abort_IT+0xd4>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d029      	beq.n	8000e6e <HAL_DMA_Abort_IT+0xa2>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <HAL_DMA_Abort_IT+0xd8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d022      	beq.n	8000e6a <HAL_DMA_Abort_IT+0x9e>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a1f      	ldr	r2, [pc, #124]	; (8000ea8 <HAL_DMA_Abort_IT+0xdc>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d01a      	beq.n	8000e64 <HAL_DMA_Abort_IT+0x98>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <HAL_DMA_Abort_IT+0xe0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d012      	beq.n	8000e5e <HAL_DMA_Abort_IT+0x92>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <HAL_DMA_Abort_IT+0xe4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00a      	beq.n	8000e58 <HAL_DMA_Abort_IT+0x8c>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <HAL_DMA_Abort_IT+0xe8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d102      	bne.n	8000e52 <HAL_DMA_Abort_IT+0x86>
 8000e4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e50:	e00e      	b.n	8000e70 <HAL_DMA_Abort_IT+0xa4>
 8000e52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e56:	e00b      	b.n	8000e70 <HAL_DMA_Abort_IT+0xa4>
 8000e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e5c:	e008      	b.n	8000e70 <HAL_DMA_Abort_IT+0xa4>
 8000e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e62:	e005      	b.n	8000e70 <HAL_DMA_Abort_IT+0xa4>
 8000e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e68:	e002      	b.n	8000e70 <HAL_DMA_Abort_IT+0xa4>
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	e000      	b.n	8000e70 <HAL_DMA_Abort_IT+0xa4>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <HAL_DMA_Abort_IT+0xec>)
 8000e72:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	4798      	blx	r3
    } 
  }
  return status;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40020008 	.word	0x40020008
 8000ea4:	4002001c 	.word	0x4002001c
 8000ea8:	40020030 	.word	0x40020030
 8000eac:	40020044 	.word	0x40020044
 8000eb0:	40020058 	.word	0x40020058
 8000eb4:	4002006c 	.word	0x4002006c
 8000eb8:	40020000 	.word	0x40020000

08000ebc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	2204      	movs	r2, #4
 8000eda:	409a      	lsls	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d04f      	beq.n	8000f84 <HAL_DMA_IRQHandler+0xc8>
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d04a      	beq.n	8000f84 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0320 	and.w	r3, r3, #32
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d107      	bne.n	8000f0c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0204 	bic.w	r2, r2, #4
 8000f0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a66      	ldr	r2, [pc, #408]	; (80010ac <HAL_DMA_IRQHandler+0x1f0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d029      	beq.n	8000f6a <HAL_DMA_IRQHandler+0xae>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a65      	ldr	r2, [pc, #404]	; (80010b0 <HAL_DMA_IRQHandler+0x1f4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d022      	beq.n	8000f66 <HAL_DMA_IRQHandler+0xaa>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a63      	ldr	r2, [pc, #396]	; (80010b4 <HAL_DMA_IRQHandler+0x1f8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d01a      	beq.n	8000f60 <HAL_DMA_IRQHandler+0xa4>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a62      	ldr	r2, [pc, #392]	; (80010b8 <HAL_DMA_IRQHandler+0x1fc>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d012      	beq.n	8000f5a <HAL_DMA_IRQHandler+0x9e>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a60      	ldr	r2, [pc, #384]	; (80010bc <HAL_DMA_IRQHandler+0x200>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00a      	beq.n	8000f54 <HAL_DMA_IRQHandler+0x98>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a5f      	ldr	r2, [pc, #380]	; (80010c0 <HAL_DMA_IRQHandler+0x204>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d102      	bne.n	8000f4e <HAL_DMA_IRQHandler+0x92>
 8000f48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f4c:	e00e      	b.n	8000f6c <HAL_DMA_IRQHandler+0xb0>
 8000f4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f52:	e00b      	b.n	8000f6c <HAL_DMA_IRQHandler+0xb0>
 8000f54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f58:	e008      	b.n	8000f6c <HAL_DMA_IRQHandler+0xb0>
 8000f5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f5e:	e005      	b.n	8000f6c <HAL_DMA_IRQHandler+0xb0>
 8000f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f64:	e002      	b.n	8000f6c <HAL_DMA_IRQHandler+0xb0>
 8000f66:	2340      	movs	r3, #64	; 0x40
 8000f68:	e000      	b.n	8000f6c <HAL_DMA_IRQHandler+0xb0>
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	4a55      	ldr	r2, [pc, #340]	; (80010c4 <HAL_DMA_IRQHandler+0x208>)
 8000f6e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 8094 	beq.w	80010a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f82:	e08e      	b.n	80010a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	2202      	movs	r2, #2
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d056      	beq.n	8001042 <HAL_DMA_IRQHandler+0x186>
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d051      	beq.n	8001042 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0320 	and.w	r3, r3, #32
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10b      	bne.n	8000fc4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 020a 	bic.w	r2, r2, #10
 8000fba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a38      	ldr	r2, [pc, #224]	; (80010ac <HAL_DMA_IRQHandler+0x1f0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d029      	beq.n	8001022 <HAL_DMA_IRQHandler+0x166>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a37      	ldr	r2, [pc, #220]	; (80010b0 <HAL_DMA_IRQHandler+0x1f4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d022      	beq.n	800101e <HAL_DMA_IRQHandler+0x162>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a35      	ldr	r2, [pc, #212]	; (80010b4 <HAL_DMA_IRQHandler+0x1f8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01a      	beq.n	8001018 <HAL_DMA_IRQHandler+0x15c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a34      	ldr	r2, [pc, #208]	; (80010b8 <HAL_DMA_IRQHandler+0x1fc>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d012      	beq.n	8001012 <HAL_DMA_IRQHandler+0x156>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a32      	ldr	r2, [pc, #200]	; (80010bc <HAL_DMA_IRQHandler+0x200>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d00a      	beq.n	800100c <HAL_DMA_IRQHandler+0x150>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <HAL_DMA_IRQHandler+0x204>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d102      	bne.n	8001006 <HAL_DMA_IRQHandler+0x14a>
 8001000:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001004:	e00e      	b.n	8001024 <HAL_DMA_IRQHandler+0x168>
 8001006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800100a:	e00b      	b.n	8001024 <HAL_DMA_IRQHandler+0x168>
 800100c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001010:	e008      	b.n	8001024 <HAL_DMA_IRQHandler+0x168>
 8001012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001016:	e005      	b.n	8001024 <HAL_DMA_IRQHandler+0x168>
 8001018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101c:	e002      	b.n	8001024 <HAL_DMA_IRQHandler+0x168>
 800101e:	2320      	movs	r3, #32
 8001020:	e000      	b.n	8001024 <HAL_DMA_IRQHandler+0x168>
 8001022:	2302      	movs	r3, #2
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <HAL_DMA_IRQHandler+0x208>)
 8001026:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001034:	2b00      	cmp	r3, #0
 8001036:	d034      	beq.n	80010a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001040:	e02f      	b.n	80010a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	2208      	movs	r2, #8
 8001048:	409a      	lsls	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4013      	ands	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d028      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x1e8>
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	2b00      	cmp	r3, #0
 800105a:	d023      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 020e 	bic.w	r2, r2, #14
 800106a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001074:	2101      	movs	r1, #1
 8001076:	fa01 f202 	lsl.w	r2, r1, r2
 800107a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	2b00      	cmp	r3, #0
 8001098:	d004      	beq.n	80010a4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	4798      	blx	r3
    }
  }
  return;
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
}
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40020008 	.word	0x40020008
 80010b0:	4002001c 	.word	0x4002001c
 80010b4:	40020030 	.word	0x40020030
 80010b8:	40020044 	.word	0x40020044
 80010bc:	40020058 	.word	0x40020058
 80010c0:	4002006c 	.word	0x4002006c
 80010c4:	40020000 	.word	0x40020000

080010c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d108      	bne.n	8001108 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001106:	e007      	b.n	8001118 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	60da      	str	r2, [r3, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b08b      	sub	sp, #44	; 0x2c
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	e169      	b.n	800140c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001138:	2201      	movs	r2, #1
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 8158 	bne.w	8001406 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4a9a      	ldr	r2, [pc, #616]	; (80013c4 <HAL_GPIO_Init+0x2a0>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d05e      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001160:	4a98      	ldr	r2, [pc, #608]	; (80013c4 <HAL_GPIO_Init+0x2a0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d875      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 8001166:	4a98      	ldr	r2, [pc, #608]	; (80013c8 <HAL_GPIO_Init+0x2a4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d058      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 800116c:	4a96      	ldr	r2, [pc, #600]	; (80013c8 <HAL_GPIO_Init+0x2a4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d86f      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 8001172:	4a96      	ldr	r2, [pc, #600]	; (80013cc <HAL_GPIO_Init+0x2a8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d052      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001178:	4a94      	ldr	r2, [pc, #592]	; (80013cc <HAL_GPIO_Init+0x2a8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d869      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 800117e:	4a94      	ldr	r2, [pc, #592]	; (80013d0 <HAL_GPIO_Init+0x2ac>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d04c      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001184:	4a92      	ldr	r2, [pc, #584]	; (80013d0 <HAL_GPIO_Init+0x2ac>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d863      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 800118a:	4a92      	ldr	r2, [pc, #584]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d046      	beq.n	800121e <HAL_GPIO_Init+0xfa>
 8001190:	4a90      	ldr	r2, [pc, #576]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d85d      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 8001196:	2b12      	cmp	r3, #18
 8001198:	d82a      	bhi.n	80011f0 <HAL_GPIO_Init+0xcc>
 800119a:	2b12      	cmp	r3, #18
 800119c:	d859      	bhi.n	8001252 <HAL_GPIO_Init+0x12e>
 800119e:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <HAL_GPIO_Init+0x80>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	0800121f 	.word	0x0800121f
 80011a8:	080011f9 	.word	0x080011f9
 80011ac:	0800120b 	.word	0x0800120b
 80011b0:	0800124d 	.word	0x0800124d
 80011b4:	08001253 	.word	0x08001253
 80011b8:	08001253 	.word	0x08001253
 80011bc:	08001253 	.word	0x08001253
 80011c0:	08001253 	.word	0x08001253
 80011c4:	08001253 	.word	0x08001253
 80011c8:	08001253 	.word	0x08001253
 80011cc:	08001253 	.word	0x08001253
 80011d0:	08001253 	.word	0x08001253
 80011d4:	08001253 	.word	0x08001253
 80011d8:	08001253 	.word	0x08001253
 80011dc:	08001253 	.word	0x08001253
 80011e0:	08001253 	.word	0x08001253
 80011e4:	08001253 	.word	0x08001253
 80011e8:	08001201 	.word	0x08001201
 80011ec:	08001215 	.word	0x08001215
 80011f0:	4a79      	ldr	r2, [pc, #484]	; (80013d8 <HAL_GPIO_Init+0x2b4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d013      	beq.n	800121e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011f6:	e02c      	b.n	8001252 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e029      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	3304      	adds	r3, #4
 8001206:	623b      	str	r3, [r7, #32]
          break;
 8001208:	e024      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	3308      	adds	r3, #8
 8001210:	623b      	str	r3, [r7, #32]
          break;
 8001212:	e01f      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	330c      	adds	r3, #12
 800121a:	623b      	str	r3, [r7, #32]
          break;
 800121c:	e01a      	b.n	8001254 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001226:	2304      	movs	r3, #4
 8001228:	623b      	str	r3, [r7, #32]
          break;
 800122a:	e013      	b.n	8001254 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d105      	bne.n	8001240 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001234:	2308      	movs	r3, #8
 8001236:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	611a      	str	r2, [r3, #16]
          break;
 800123e:	e009      	b.n	8001254 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001240:	2308      	movs	r3, #8
 8001242:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	615a      	str	r2, [r3, #20]
          break;
 800124a:	e003      	b.n	8001254 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
          break;
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x130>
          break;
 8001252:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2bff      	cmp	r3, #255	; 0xff
 8001258:	d801      	bhi.n	800125e <HAL_GPIO_Init+0x13a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	e001      	b.n	8001262 <HAL_GPIO_Init+0x13e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3304      	adds	r3, #4
 8001262:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2bff      	cmp	r3, #255	; 0xff
 8001268:	d802      	bhi.n	8001270 <HAL_GPIO_Init+0x14c>
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	e002      	b.n	8001276 <HAL_GPIO_Init+0x152>
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	3b08      	subs	r3, #8
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	210f      	movs	r1, #15
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	401a      	ands	r2, r3
 8001288:	6a39      	ldr	r1, [r7, #32]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	431a      	orrs	r2, r3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80b1 	beq.w	8001406 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012a4:	4b4d      	ldr	r3, [pc, #308]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a4c      	ldr	r2, [pc, #304]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b4a      	ldr	r3, [pc, #296]	; (80013dc <HAL_GPIO_Init+0x2b8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012bc:	4a48      	ldr	r2, [pc, #288]	; (80013e0 <HAL_GPIO_Init+0x2bc>)
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a40      	ldr	r2, [pc, #256]	; (80013e4 <HAL_GPIO_Init+0x2c0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d013      	beq.n	8001310 <HAL_GPIO_Init+0x1ec>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a3f      	ldr	r2, [pc, #252]	; (80013e8 <HAL_GPIO_Init+0x2c4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00d      	beq.n	800130c <HAL_GPIO_Init+0x1e8>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a3e      	ldr	r2, [pc, #248]	; (80013ec <HAL_GPIO_Init+0x2c8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d007      	beq.n	8001308 <HAL_GPIO_Init+0x1e4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3d      	ldr	r2, [pc, #244]	; (80013f0 <HAL_GPIO_Init+0x2cc>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <HAL_GPIO_Init+0x1e0>
 8001300:	2303      	movs	r3, #3
 8001302:	e006      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001304:	2304      	movs	r3, #4
 8001306:	e004      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001308:	2302      	movs	r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_GPIO_Init+0x1ee>
 8001310:	2300      	movs	r3, #0
 8001312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001314:	f002 0203 	and.w	r2, r2, #3
 8001318:	0092      	lsls	r2, r2, #2
 800131a:	4093      	lsls	r3, r2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001322:	492f      	ldr	r1, [pc, #188]	; (80013e0 <HAL_GPIO_Init+0x2bc>)
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	492c      	ldr	r1, [pc, #176]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	608b      	str	r3, [r1, #8]
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	43db      	mvns	r3, r3
 8001352:	4928      	ldr	r1, [pc, #160]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001354:	4013      	ands	r3, r2
 8001356:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	4922      	ldr	r1, [pc, #136]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	60cb      	str	r3, [r1, #12]
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	43db      	mvns	r3, r3
 800137a:	491e      	ldr	r1, [pc, #120]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800137c:	4013      	ands	r3, r2
 800137e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4918      	ldr	r1, [pc, #96]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4914      	ldr	r1, [pc, #80]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d021      	beq.n	80013f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	490e      	ldr	r1, [pc, #56]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
 80013c0:	e021      	b.n	8001406 <HAL_GPIO_Init+0x2e2>
 80013c2:	bf00      	nop
 80013c4:	10320000 	.word	0x10320000
 80013c8:	10310000 	.word	0x10310000
 80013cc:	10220000 	.word	0x10220000
 80013d0:	10210000 	.word	0x10210000
 80013d4:	10120000 	.word	0x10120000
 80013d8:	10110000 	.word	0x10110000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000
 80013e4:	40010800 	.word	0x40010800
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	40011000 	.word	0x40011000
 80013f0:	40011400 	.word	0x40011400
 80013f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_GPIO_Init+0x304>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	43db      	mvns	r3, r3
 8001400:	4909      	ldr	r1, [pc, #36]	; (8001428 <HAL_GPIO_Init+0x304>)
 8001402:	4013      	ands	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	3301      	adds	r3, #1
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	fa22 f303 	lsr.w	r3, r2, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	f47f ae8e 	bne.w	8001138 <HAL_GPIO_Init+0x14>
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	372c      	adds	r7, #44	; 0x2c
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	611a      	str	r2, [r3, #16]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43d9      	mvns	r1, r3
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	400b      	ands	r3, r1
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	611a      	str	r2, [r3, #16]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
	...

08001490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e272      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8087 	beq.w	80015be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b0:	4b92      	ldr	r3, [pc, #584]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d00c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014bc:	4b8f      	ldr	r3, [pc, #572]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d112      	bne.n	80014ee <HAL_RCC_OscConfig+0x5e>
 80014c8:	4b8c      	ldr	r3, [pc, #560]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d4:	d10b      	bne.n	80014ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d6:	4b89      	ldr	r3, [pc, #548]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d06c      	beq.n	80015bc <HAL_RCC_OscConfig+0x12c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d168      	bne.n	80015bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e24c      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x76>
 80014f8:	4b80      	ldr	r3, [pc, #512]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a7f      	ldr	r2, [pc, #508]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e02e      	b.n	8001564 <HAL_RCC_OscConfig+0xd4>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x98>
 800150e:	4b7b      	ldr	r3, [pc, #492]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a7a      	ldr	r2, [pc, #488]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b78      	ldr	r3, [pc, #480]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a77      	ldr	r2, [pc, #476]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xd4>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0xbc>
 8001532:	4b72      	ldr	r3, [pc, #456]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a71      	ldr	r2, [pc, #452]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b6f      	ldr	r3, [pc, #444]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6e      	ldr	r2, [pc, #440]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xd4>
 800154c:	4b6b      	ldr	r3, [pc, #428]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a6a      	ldr	r2, [pc, #424]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a67      	ldr	r2, [pc, #412]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fa4e 	bl	8000a0c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fa4a 	bl	8000a0c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e200      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xe4>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fa3a 	bl	8000a0c <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fa36 	bl	8000a0c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1ec      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b53      	ldr	r3, [pc, #332]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x10c>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d063      	beq.n	8001692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ca:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d11c      	bne.n	800161c <HAL_RCC_OscConfig+0x18c>
 80015e2:	4b46      	ldr	r3, [pc, #280]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	4b43      	ldr	r3, [pc, #268]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x176>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e1c0      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4939      	ldr	r1, [pc, #228]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e03a      	b.n	8001692 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_RCC_OscConfig+0x270>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff f9ef 	bl	8000a0c <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff f9eb 	bl	8000a0c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1a1      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b2a      	ldr	r3, [pc, #168]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4927      	ldr	r1, [pc, #156]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_RCC_OscConfig+0x270>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff f9ce 	bl	8000a0c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff f9ca 	bl	8000a0c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e180      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d03a      	beq.n	8001714 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d019      	beq.n	80016da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_RCC_OscConfig+0x274>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff f9ae 	bl	8000a0c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff f9aa 	bl	8000a0c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e160      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <HAL_RCC_OscConfig+0x26c>)
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f000 fafe 	bl	8001cd4 <RCC_Delay>
 80016d8:	e01c      	b.n	8001714 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_RCC_OscConfig+0x274>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7ff f994 	bl	8000a0c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e6:	e00f      	b.n	8001708 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e8:	f7ff f990 	bl	8000a0c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d908      	bls.n	8001708 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e146      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	42420000 	.word	0x42420000
 8001704:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	4b92      	ldr	r3, [pc, #584]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e9      	bne.n	80016e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80a6 	beq.w	800186e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001726:	4b8b      	ldr	r3, [pc, #556]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10d      	bne.n	800174e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b88      	ldr	r3, [pc, #544]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a87      	ldr	r2, [pc, #540]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	61d3      	str	r3, [r2, #28]
 800173e:	4b85      	ldr	r3, [pc, #532]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174e:	4b82      	ldr	r3, [pc, #520]	; (8001958 <HAL_RCC_OscConfig+0x4c8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d118      	bne.n	800178c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175a:	4b7f      	ldr	r3, [pc, #508]	; (8001958 <HAL_RCC_OscConfig+0x4c8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7e      	ldr	r2, [pc, #504]	; (8001958 <HAL_RCC_OscConfig+0x4c8>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff f951 	bl	8000a0c <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176e:	f7ff f94d 	bl	8000a0c <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b64      	cmp	r3, #100	; 0x64
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e103      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	4b75      	ldr	r3, [pc, #468]	; (8001958 <HAL_RCC_OscConfig+0x4c8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x312>
 8001794:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a6e      	ldr	r2, [pc, #440]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6213      	str	r3, [r2, #32]
 80017a0:	e02d      	b.n	80017fe <HAL_RCC_OscConfig+0x36e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x334>
 80017aa:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4a69      	ldr	r2, [pc, #420]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6213      	str	r3, [r2, #32]
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a66      	ldr	r2, [pc, #408]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	e01c      	b.n	80017fe <HAL_RCC_OscConfig+0x36e>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d10c      	bne.n	80017e6 <HAL_RCC_OscConfig+0x356>
 80017cc:	4b61      	ldr	r3, [pc, #388]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a60      	ldr	r2, [pc, #384]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6213      	str	r3, [r2, #32]
 80017d8:	4b5e      	ldr	r3, [pc, #376]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a5d      	ldr	r2, [pc, #372]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	e00b      	b.n	80017fe <HAL_RCC_OscConfig+0x36e>
 80017e6:	4b5b      	ldr	r3, [pc, #364]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4a5a      	ldr	r2, [pc, #360]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6213      	str	r3, [r2, #32]
 80017f2:	4b58      	ldr	r3, [pc, #352]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a57      	ldr	r2, [pc, #348]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	f023 0304 	bic.w	r3, r3, #4
 80017fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d015      	beq.n	8001832 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff f901 	bl	8000a0c <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff f8fd 	bl	8000a0c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0b1      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ee      	beq.n	800180e <HAL_RCC_OscConfig+0x37e>
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff f8eb 	bl	8000a0c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff f8e7 	bl	8000a0c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e09b      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	4b40      	ldr	r3, [pc, #256]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1ee      	bne.n	800183a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d105      	bne.n	800186e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001862:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a3b      	ldr	r2, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8087 	beq.w	8001986 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b08      	cmp	r3, #8
 8001882:	d061      	beq.n	8001948 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d146      	bne.n	800191a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b33      	ldr	r3, [pc, #204]	; (800195c <HAL_RCC_OscConfig+0x4cc>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff f8bb 	bl	8000a0c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff f8b7 	bl	8000a0c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e06d      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c0:	d108      	bne.n	80018d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4921      	ldr	r1, [pc, #132]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a19      	ldr	r1, [r3, #32]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	430b      	orrs	r3, r1
 80018e6:	491b      	ldr	r1, [pc, #108]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_RCC_OscConfig+0x4cc>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff f88b 	bl	8000a0c <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff f887 	bl	8000a0c <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e03d      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x46a>
 8001918:	e035      	b.n	8001986 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_RCC_OscConfig+0x4cc>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff f874 	bl	8000a0c <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f870 	bl	8000a0c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e026      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x498>
 8001946:	e01e      	b.n	8001986 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e019      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
 8001954:	40021000 	.word	0x40021000
 8001958:	40007000 	.word	0x40007000
 800195c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_OscConfig+0x500>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	429a      	cmp	r2, r3
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0d0      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d910      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 0207 	bic.w	r2, r3, #7
 80019be:	4965      	ldr	r1, [pc, #404]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b63      	ldr	r3, [pc, #396]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0b8      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f0:	4b59      	ldr	r3, [pc, #356]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4a58      	ldr	r2, [pc, #352]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a08:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a52      	ldr	r2, [pc, #328]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	494d      	ldr	r1, [pc, #308]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d040      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d115      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e07f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b41      	ldr	r3, [pc, #260]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e073      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06b      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a72:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f023 0203 	bic.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4936      	ldr	r1, [pc, #216]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7fe ffc2 	bl	8000a0c <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7fe ffbe 	bl	8000a0c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e053      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 020c 	and.w	r2, r3, #12
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1eb      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d210      	bcs.n	8001ae4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 0207 	bic.w	r2, r3, #7
 8001aca:	4922      	ldr	r1, [pc, #136]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e032      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4916      	ldr	r1, [pc, #88]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	490e      	ldr	r1, [pc, #56]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b22:	f000 f821 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	490a      	ldr	r1, [pc, #40]	; (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	5ccb      	ldrb	r3, [r1, r3]
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_RCC_ClockConfig+0x1cc>)
 8001b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x1d0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd14 	bl	8000570 <HAL_InitTick>

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	08007098 	.word	0x08007098
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d002      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x30>
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x36>
 8001b96:	e027      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b9a:	613b      	str	r3, [r7, #16]
      break;
 8001b9c:	e027      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	0c9b      	lsrs	r3, r3, #18
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d010      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	0c5b      	lsrs	r3, r3, #17
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bca:	fb03 f202 	mul.w	r2, r3, r2
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e004      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	613b      	str	r3, [r7, #16]
      break;
 8001be6:	e002      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bea:	613b      	str	r3, [r7, #16]
      break;
 8001bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bee:	693b      	ldr	r3, [r7, #16]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	007a1200 	.word	0x007a1200
 8001c04:	080070b0 	.word	0x080070b0
 8001c08:	080070c0 	.word	0x080070c0
 8001c0c:	003d0900 	.word	0x003d0900

08001c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000000 	.word	0x20000000

08001c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c28:	f7ff fff2 	bl	8001c10 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	080070a8 	.word	0x080070a8

08001c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	0adb      	lsrs	r3, r3, #11
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	; (8001c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	080070a8 	.word	0x080070a8

08001c74 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	220f      	movs	r2, #15
 8001c82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_RCC_GetClockConfig+0x58>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_RCC_GetClockConfig+0x58>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_GetClockConfig+0x58>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_RCC_GetClockConfig+0x58>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	08db      	lsrs	r3, r3, #3
 8001cae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0207 	and.w	r2, r3, #7
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40022000 	.word	0x40022000

08001cd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <RCC_Delay+0x34>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <RCC_Delay+0x38>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	0a5b      	lsrs	r3, r3, #9
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cf0:	bf00      	nop
  }
  while (Delay --);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	60fa      	str	r2, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f9      	bne.n	8001cf0 <RCC_Delay+0x1c>
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	10624dd3 	.word	0x10624dd3

08001d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e041      	b.n	8001da6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f839 	bl	8001dae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f000 f9b4 	bl	80020bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d001      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e03a      	b.n	8001e4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a18      	ldr	r2, [pc, #96]	; (8001e58 <HAL_TIM_Base_Start_IT+0x98>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00e      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x58>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e02:	d009      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x58>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <HAL_TIM_Base_Start_IT+0x9c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d004      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x58>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a13      	ldr	r2, [pc, #76]	; (8001e60 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d111      	bne.n	8001e3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d010      	beq.n	8001e4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0201 	orr.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3a:	e007      	b.n	8001e4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	40012c00 	.word	0x40012c00
 8001e5c:	40000400 	.word	0x40000400
 8001e60:	40000800 	.word	0x40000800

08001e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d122      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d11b      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0202 	mvn.w	r2, #2
 8001e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8ed 	bl	8002086 <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8e0 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f8ef 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d122      	bne.n	8001f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d11b      	bne.n	8001f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0204 	mvn.w	r2, #4
 8001ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8c3 	bl	8002086 <HAL_TIM_IC_CaptureCallback>
 8001f00:	e005      	b.n	8001f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8b6 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f8c5 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d122      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d11b      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0208 	mvn.w	r2, #8
 8001f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f899 	bl	8002086 <HAL_TIM_IC_CaptureCallback>
 8001f54:	e005      	b.n	8001f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f88c 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f89b 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d122      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d11b      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0210 	mvn.w	r2, #16
 8001f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2208      	movs	r2, #8
 8001f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f86f 	bl	8002086 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f862 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f871 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d107      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0201 	mvn.w	r2, #1
 8001fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fa74 	bl	80004d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff2:	2b80      	cmp	r3, #128	; 0x80
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002000:	2b80      	cmp	r3, #128	; 0x80
 8002002:	d107      	bne.n	8002014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800200c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f8bf 	bl	8002192 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201e:	2b40      	cmp	r3, #64	; 0x40
 8002020:	d10e      	bne.n	8002040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202c:	2b40      	cmp	r3, #64	; 0x40
 800202e:	d107      	bne.n	8002040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f835 	bl	80020aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b20      	cmp	r3, #32
 800204c:	d10e      	bne.n	800206c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b20      	cmp	r3, #32
 800205a:	d107      	bne.n	800206c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0220 	mvn.w	r2, #32
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f88a 	bl	8002180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a29      	ldr	r2, [pc, #164]	; (8002174 <TIM_Base_SetConfig+0xb8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00b      	beq.n	80020ec <TIM_Base_SetConfig+0x30>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020da:	d007      	beq.n	80020ec <TIM_Base_SetConfig+0x30>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a26      	ldr	r2, [pc, #152]	; (8002178 <TIM_Base_SetConfig+0xbc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d003      	beq.n	80020ec <TIM_Base_SetConfig+0x30>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a25      	ldr	r2, [pc, #148]	; (800217c <TIM_Base_SetConfig+0xc0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d108      	bne.n	80020fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <TIM_Base_SetConfig+0xb8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00b      	beq.n	800211e <TIM_Base_SetConfig+0x62>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210c:	d007      	beq.n	800211e <TIM_Base_SetConfig+0x62>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a19      	ldr	r2, [pc, #100]	; (8002178 <TIM_Base_SetConfig+0xbc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d003      	beq.n	800211e <TIM_Base_SetConfig+0x62>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a18      	ldr	r2, [pc, #96]	; (800217c <TIM_Base_SetConfig+0xc0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d108      	bne.n	8002130 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a07      	ldr	r2, [pc, #28]	; (8002174 <TIM_Base_SetConfig+0xb8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d103      	bne.n	8002164 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	615a      	str	r2, [r3, #20]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800

08002180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e042      	b.n	800223c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fb52 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2224      	movs	r2, #36	; 0x24
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 ff53 	bl	8003094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800220c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800221c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b20      	cmp	r3, #32
 8002262:	d16d      	bne.n	8002340 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_UART_Transmit+0x2c>
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e066      	b.n	8002342 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2221      	movs	r2, #33	; 0x21
 800227e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002282:	f7fe fbc3 	bl	8000a0c <HAL_GetTick>
 8002286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	88fa      	ldrh	r2, [r7, #6]
 800228c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	88fa      	ldrh	r2, [r7, #6]
 8002292:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800229c:	d108      	bne.n	80022b0 <HAL_UART_Transmit+0x6c>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d104      	bne.n	80022b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	e003      	b.n	80022b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022b8:	e02a      	b.n	8002310 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2200      	movs	r2, #0
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fc1b 	bl	8002b00 <UART_WaitOnFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e036      	b.n	8002342 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10b      	bne.n	80022f2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	3302      	adds	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	e007      	b.n	8002302 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	3301      	adds	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1cf      	bne.n	80022ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2200      	movs	r2, #0
 8002322:	2140      	movs	r1, #64	; 0x40
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fbeb 	bl	8002b00 <UART_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e006      	b.n	8002342 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	e000      	b.n	8002342 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002340:	2302      	movs	r3, #2
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	4613      	mov	r3, r2
 8002356:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b20      	cmp	r3, #32
 8002362:	d112      	bne.n	800238a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_UART_Receive_DMA+0x26>
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e00b      	b.n	800238c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	461a      	mov	r2, r3
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 fc2b 	bl	8002bdc <UART_Start_Receive_DMA>
 8002386:	4603      	mov	r3, r0
 8002388:	e000      	b.n	800238c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800238a:	2302      	movs	r3, #2
  }
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0ba      	sub	sp, #232	; 0xe8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80023c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80023d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_UART_IRQHandler+0x66>
 80023e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fd90 	bl	8002f18 <UART_Receive_IT>
      return;
 80023f8:	e25b      	b.n	80028b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80de 	beq.w	80025c0 <HAL_UART_IRQHandler+0x22c>
 8002404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d106      	bne.n	800241e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002414:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80d1 	beq.w	80025c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800241e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_UART_IRQHandler+0xae>
 800242a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800242e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_UART_IRQHandler+0xd2>
 800244e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f043 0202 	orr.w	r2, r3, #2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <HAL_UART_IRQHandler+0xf6>
 8002472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f043 0204 	orr.w	r2, r3, #4
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800248a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d011      	beq.n	80024ba <HAL_UART_IRQHandler+0x126>
 8002496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f043 0208 	orr.w	r2, r3, #8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 81f2 	beq.w	80028a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_UART_IRQHandler+0x14e>
 80024d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fd1b 	bl	8002f18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf14      	ite	ne
 80024f0:	2301      	movne	r3, #1
 80024f2:	2300      	moveq	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <HAL_UART_IRQHandler+0x17a>
 8002506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d04f      	beq.n	80025ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fc25 	bl	8002d5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251e:	2b00      	cmp	r3, #0
 8002520:	d041      	beq.n	80025a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3314      	adds	r3, #20
 8002528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002530:	e853 3f00 	ldrex	r3, [r3]
 8002534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800253c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002540:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3314      	adds	r3, #20
 800254a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800254e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800255a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800255e:	e841 2300 	strex	r3, r2, [r1]
 8002562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1d9      	bne.n	8002522 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d013      	beq.n	800259e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	4a7e      	ldr	r2, [pc, #504]	; (8002774 <HAL_UART_IRQHandler+0x3e0>)
 800257c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fc22 	bl	8000dcc <HAL_DMA_Abort_IT>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002598:	4610      	mov	r0, r2
 800259a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259c:	e00e      	b.n	80025bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f99c 	bl	80028dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a4:	e00a      	b.n	80025bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f998 	bl	80028dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ac:	e006      	b.n	80025bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f994 	bl	80028dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80025ba:	e175      	b.n	80028a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025bc:	bf00      	nop
    return;
 80025be:	e173      	b.n	80028a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f040 814f 	bne.w	8002868 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80025ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8148 	beq.w	8002868 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8141 	beq.w	8002868 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80b6 	beq.w	8002778 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002618:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8145 	beq.w	80028ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800262a:	429a      	cmp	r2, r3
 800262c:	f080 813e 	bcs.w	80028ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002636:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b20      	cmp	r3, #32
 8002640:	f000 8088 	beq.w	8002754 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	330c      	adds	r3, #12
 800264a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002652:	e853 3f00 	ldrex	r3, [r3]
 8002656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800265a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800265e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002662:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	330c      	adds	r3, #12
 800266c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002670:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002678:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800267c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002680:	e841 2300 	strex	r3, r2, [r1]
 8002684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002688:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1d9      	bne.n	8002644 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3314      	adds	r3, #20
 8002696:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800269a:	e853 3f00 	ldrex	r3, [r3]
 800269e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80026a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3314      	adds	r3, #20
 80026b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80026b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026c0:	e841 2300 	strex	r3, r2, [r1]
 80026c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80026c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1e1      	bne.n	8002690 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3314      	adds	r3, #20
 80026d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d6:	e853 3f00 	ldrex	r3, [r3]
 80026da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80026dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	3314      	adds	r3, #20
 80026ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80026f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026f8:	e841 2300 	strex	r3, r2, [r1]
 80026fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80026fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e3      	bne.n	80026cc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800271c:	e853 3f00 	ldrex	r3, [r3]
 8002720:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002724:	f023 0310 	bic.w	r3, r3, #16
 8002728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	330c      	adds	r3, #12
 8002732:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002736:	65ba      	str	r2, [r7, #88]	; 0x58
 8002738:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800273c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800273e:	e841 2300 	strex	r3, r2, [r1]
 8002742:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1e3      	bne.n	8002712 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe fb00 	bl	8000d54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002762:	b29b      	uxth	r3, r3
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	b29b      	uxth	r3, r3
 8002768:	4619      	mov	r1, r3
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f8bf 	bl	80028ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002770:	e09c      	b.n	80028ac <HAL_UART_IRQHandler+0x518>
 8002772:	bf00      	nop
 8002774:	08002e23 	.word	0x08002e23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002780:	b29b      	uxth	r3, r3
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 808e 	beq.w	80028b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8089 	beq.w	80028b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	330c      	adds	r3, #12
 80027a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027c2:	647a      	str	r2, [r7, #68]	; 0x44
 80027c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027ca:	e841 2300 	strex	r3, r2, [r1]
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80027d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e3      	bne.n	800279e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3314      	adds	r3, #20
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	e853 3f00 	ldrex	r3, [r3]
 80027e4:	623b      	str	r3, [r7, #32]
   return(result);
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3314      	adds	r3, #20
 80027f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027fa:	633a      	str	r2, [r7, #48]	; 0x30
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002802:	e841 2300 	strex	r3, r2, [r1]
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1e3      	bne.n	80027d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	e853 3f00 	ldrex	r3, [r3]
 800282a:	60fb      	str	r3, [r7, #12]
   return(result);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0310 	bic.w	r3, r3, #16
 8002832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	330c      	adds	r3, #12
 800283c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002840:	61fa      	str	r2, [r7, #28]
 8002842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002844:	69b9      	ldr	r1, [r7, #24]
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	e841 2300 	strex	r3, r2, [r1]
 800284c:	617b      	str	r3, [r7, #20]
   return(result);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e3      	bne.n	800281c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800285a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800285e:	4619      	mov	r1, r3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f844 	bl	80028ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002866:	e023      	b.n	80028b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800286c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002870:	2b00      	cmp	r3, #0
 8002872:	d009      	beq.n	8002888 <HAL_UART_IRQHandler+0x4f4>
 8002874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fae2 	bl	8002e4a <UART_Transmit_IT>
    return;
 8002886:	e014      	b.n	80028b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00e      	beq.n	80028b2 <HAL_UART_IRQHandler+0x51e>
 8002894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fb21 	bl	8002ee8 <UART_EndTransmit_IT>
    return;
 80028a6:	e004      	b.n	80028b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80028a8:	bf00      	nop
 80028aa:	e002      	b.n	80028b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80028ac:	bf00      	nop
 80028ae:	e000      	b.n	80028b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80028b0:	bf00      	nop
  }
}
 80028b2:	37e8      	adds	r7, #232	; 0xe8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b09c      	sub	sp, #112	; 0x70
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d172      	bne.n	8002a06 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002922:	2200      	movs	r2, #0
 8002924:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	330c      	adds	r3, #12
 800292c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800293c:	66bb      	str	r3, [r7, #104]	; 0x68
 800293e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	330c      	adds	r3, #12
 8002944:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002946:	65ba      	str	r2, [r7, #88]	; 0x58
 8002948:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800294c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e5      	bne.n	8002926 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800295a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3314      	adds	r3, #20
 8002960:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800296a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	667b      	str	r3, [r7, #100]	; 0x64
 8002972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3314      	adds	r3, #20
 8002978:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800297a:	647a      	str	r2, [r7, #68]	; 0x44
 800297c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e5      	bne.n	800295a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800298e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3314      	adds	r3, #20
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	e853 3f00 	ldrex	r3, [r3]
 800299c:	623b      	str	r3, [r7, #32]
   return(result);
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a4:	663b      	str	r3, [r7, #96]	; 0x60
 80029a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3314      	adds	r3, #20
 80029ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029ae:	633a      	str	r2, [r7, #48]	; 0x30
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b6:	e841 2300 	strex	r3, r2, [r1]
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e5      	bne.n	800298e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d119      	bne.n	8002a06 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	e853 3f00 	ldrex	r3, [r3]
 80029e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f023 0310 	bic.w	r3, r3, #16
 80029e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029f2:	61fa      	str	r2, [r7, #28]
 80029f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f6:	69b9      	ldr	r1, [r7, #24]
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	e841 2300 	strex	r3, r2, [r1]
 80029fe:	617b      	str	r3, [r7, #20]
   return(result);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1e5      	bne.n	80029d2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d106      	bne.n	8002a22 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002a1c:	f7ff ff67 	bl	80028ee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a20:	e002      	b.n	8002a28 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002a22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002a24:	f7fd fbb2 	bl	800018c <HAL_UART_RxCpltCallback>
}
 8002a28:	bf00      	nop
 8002a2a:	3770      	adds	r7, #112	; 0x70
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d108      	bne.n	8002a5e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4619      	mov	r1, r3
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7ff ff49 	bl	80028ee <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a5c:	e002      	b.n	8002a64 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f7ff ff33 	bl	80028ca <HAL_UART_RxHalfCpltCallback>
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b21      	cmp	r3, #33	; 0x21
 8002a9e:	d108      	bne.n	8002ab2 <UART_DMAError+0x46>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002aac:	68b8      	ldr	r0, [r7, #8]
 8002aae:	f000 f92f 	bl	8002d10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bf14      	ite	ne
 8002ac0:	2301      	movne	r3, #1
 8002ac2:	2300      	moveq	r3, #0
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b22      	cmp	r3, #34	; 0x22
 8002ad2:	d108      	bne.n	8002ae6 <UART_DMAError+0x7a>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2200      	movs	r2, #0
 8002ade:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ae0:	68b8      	ldr	r0, [r7, #8]
 8002ae2:	f000 f93c 	bl	8002d5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	f043 0210 	orr.w	r2, r3, #16
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002af2:	68b8      	ldr	r0, [r7, #8]
 8002af4:	f7ff fef2 	bl	80028dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b090      	sub	sp, #64	; 0x40
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b10:	e050      	b.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d04c      	beq.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d007      	beq.n	8002b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b20:	f7fd ff74 	bl	8000a0c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d241      	bcs.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	330c      	adds	r3, #12
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	e853 3f00 	ldrex	r3, [r3]
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b50:	637a      	str	r2, [r7, #52]	; 0x34
 8002b52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b58:	e841 2300 	strex	r3, r2, [r1]
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e5      	bne.n	8002b30 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3314      	adds	r3, #20
 8002b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	613b      	str	r3, [r7, #16]
   return(result);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3314      	adds	r3, #20
 8002b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b84:	623a      	str	r2, [r7, #32]
 8002b86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b88:	69f9      	ldr	r1, [r7, #28]
 8002b8a:	6a3a      	ldr	r2, [r7, #32]
 8002b8c:	e841 2300 	strex	r3, r2, [r1]
 8002b90:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e5      	bne.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e00f      	b.n	8002bd4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d09f      	beq.n	8002b12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3740      	adds	r7, #64	; 0x40
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b098      	sub	sp, #96	; 0x60
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	4613      	mov	r3, r2
 8002be8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	88fa      	ldrh	r2, [r7, #6]
 8002bf4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2222      	movs	r2, #34	; 0x22
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	4a3e      	ldr	r2, [pc, #248]	; (8002d04 <UART_Start_Receive_DMA+0x128>)
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c10:	4a3d      	ldr	r2, [pc, #244]	; (8002d08 <UART_Start_Receive_DMA+0x12c>)
 8002c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	4a3c      	ldr	r2, [pc, #240]	; (8002d0c <UART_Start_Receive_DMA+0x130>)
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	2200      	movs	r2, #0
 8002c22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002c24:	f107 0308 	add.w	r3, r7, #8
 8002c28:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4619      	mov	r1, r3
 8002c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	f7fe f82a 	bl	8000c94 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d019      	beq.n	8002c92 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c68:	e853 3f00 	ldrex	r3, [r3]
 8002c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c82:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c86:	e841 2300 	strex	r3, r2, [r1]
 8002c8a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e5      	bne.n	8002c5e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3314      	adds	r3, #20
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	657b      	str	r3, [r7, #84]	; 0x54
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3314      	adds	r3, #20
 8002cb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cb2:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e5      	bne.n	8002c92 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3314      	adds	r3, #20
 8002ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	e853 3f00 	ldrex	r3, [r3]
 8002cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3314      	adds	r3, #20
 8002ce4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ce6:	627a      	str	r2, [r7, #36]	; 0x24
 8002ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	6a39      	ldr	r1, [r7, #32]
 8002cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cee:	e841 2300 	strex	r3, r2, [r1]
 8002cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1e5      	bne.n	8002cc6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3760      	adds	r7, #96	; 0x60
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	08002905 	.word	0x08002905
 8002d08:	08002a31 	.word	0x08002a31
 8002d0c:	08002a6d 	.word	0x08002a6d

08002d10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	61ba      	str	r2, [r7, #24]
 8002d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3c:	6979      	ldr	r1, [r7, #20]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	613b      	str	r3, [r7, #16]
   return(result);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e5      	bne.n	8002d18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002d54:	bf00      	nop
 8002d56:	3724      	adds	r7, #36	; 0x24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b095      	sub	sp, #84	; 0x54
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	330c      	adds	r3, #12
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	e853 3f00 	ldrex	r3, [r3]
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	330c      	adds	r3, #12
 8002d84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d86:	643a      	str	r2, [r7, #64]	; 0x40
 8002d88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d8e:	e841 2300 	strex	r3, r2, [r1]
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1e5      	bne.n	8002d66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3314      	adds	r3, #20
 8002da0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	e853 3f00 	ldrex	r3, [r3]
 8002da8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3314      	adds	r3, #20
 8002db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e5      	bne.n	8002d9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d119      	bne.n	8002e0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	330c      	adds	r3, #12
 8002ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f023 0310 	bic.w	r3, r3, #16
 8002dec:	647b      	str	r3, [r7, #68]	; 0x44
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002df6:	61ba      	str	r2, [r7, #24]
 8002df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	6979      	ldr	r1, [r7, #20]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	613b      	str	r3, [r7, #16]
   return(result);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e5      	bne.n	8002dd6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e18:	bf00      	nop
 8002e1a:	3754      	adds	r7, #84	; 0x54
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7ff fd4d 	bl	80028dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b21      	cmp	r3, #33	; 0x21
 8002e5c:	d13e      	bne.n	8002edc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e66:	d114      	bne.n	8002e92 <UART_Transmit_IT+0x48>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d110      	bne.n	8002e92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	1c9a      	adds	r2, r3, #2
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	621a      	str	r2, [r3, #32]
 8002e90:	e008      	b.n	8002ea4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	1c59      	adds	r1, r3, #1
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6211      	str	r1, [r2, #32]
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10f      	bne.n	8002ed8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e000      	b.n	8002ede <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
  }
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff fcd5 	bl	80028b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08c      	sub	sp, #48	; 0x30
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b22      	cmp	r3, #34	; 0x22
 8002f2a:	f040 80ae 	bne.w	800308a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	d117      	bne.n	8002f68 <UART_Receive_IT+0x50>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d113      	bne.n	8002f68 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	1c9a      	adds	r2, r3, #2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	629a      	str	r2, [r3, #40]	; 0x28
 8002f66:	e026      	b.n	8002fb6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7a:	d007      	beq.n	8002f8c <UART_Receive_IT+0x74>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <UART_Receive_IT+0x82>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d106      	bne.n	8002f9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e008      	b.n	8002fac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d15d      	bne.n	8003086 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0220 	bic.w	r2, r2, #32
 8002fd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	2b01      	cmp	r3, #1
 800300e:	d135      	bne.n	800307c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	330c      	adds	r3, #12
 800301c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	e853 3f00 	ldrex	r3, [r3]
 8003024:	613b      	str	r3, [r7, #16]
   return(result);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f023 0310 	bic.w	r3, r3, #16
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	330c      	adds	r3, #12
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	623a      	str	r2, [r7, #32]
 8003038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303a:	69f9      	ldr	r1, [r7, #28]
 800303c:	6a3a      	ldr	r2, [r7, #32]
 800303e:	e841 2300 	strex	r3, r2, [r1]
 8003042:	61bb      	str	r3, [r7, #24]
   return(result);
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1e5      	bne.n	8003016 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b10      	cmp	r3, #16
 8003056:	d10a      	bne.n	800306e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff fc3a 	bl	80028ee <HAL_UARTEx_RxEventCallback>
 800307a:	e002      	b.n	8003082 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7fd f885 	bl	800018c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	e002      	b.n	800308c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e000      	b.n	800308c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800308a:	2302      	movs	r3, #2
  }
}
 800308c:	4618      	mov	r0, r3
 800308e:	3730      	adds	r7, #48	; 0x30
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030ce:	f023 030c 	bic.w	r3, r3, #12
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	430b      	orrs	r3, r1
 80030da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2c      	ldr	r2, [pc, #176]	; (80031a8 <UART_SetConfig+0x114>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d103      	bne.n	8003104 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030fc:	f7fe fda6 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	e002      	b.n	800310a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003104:	f7fe fd8e 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8003108:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	009a      	lsls	r2, r3, #2
 8003114:	441a      	add	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	4a22      	ldr	r2, [pc, #136]	; (80031ac <UART_SetConfig+0x118>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	0119      	lsls	r1, r3, #4
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009a      	lsls	r2, r3, #2
 8003134:	441a      	add	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <UART_SetConfig+0x118>)
 8003142:	fba3 0302 	umull	r0, r3, r3, r2
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2064      	movs	r0, #100	; 0x64
 800314a:	fb00 f303 	mul.w	r3, r0, r3
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	3332      	adds	r3, #50	; 0x32
 8003154:	4a15      	ldr	r2, [pc, #84]	; (80031ac <UART_SetConfig+0x118>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003160:	4419      	add	r1, r3
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	009a      	lsls	r2, r3, #2
 800316c:	441a      	add	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	fbb2 f2f3 	udiv	r2, r2, r3
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <UART_SetConfig+0x118>)
 800317a:	fba3 0302 	umull	r0, r3, r3, r2
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2064      	movs	r0, #100	; 0x64
 8003182:	fb00 f303 	mul.w	r3, r0, r3
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	3332      	adds	r3, #50	; 0x32
 800318c:	4a07      	ldr	r2, [pc, #28]	; (80031ac <UART_SetConfig+0x118>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	f003 020f 	and.w	r2, r3, #15
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	440a      	add	r2, r1
 800319e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40013800 	.word	0x40013800
 80031ac:	51eb851f 	.word	0x51eb851f

080031b0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031b6:	f3ef 8305 	mrs	r3, IPSR
 80031ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80031bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10f      	bne.n	80031e2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c2:	f3ef 8310 	mrs	r3, PRIMASK
 80031c6:	607b      	str	r3, [r7, #4]
  return(result);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <osKernelInitialize+0x32>
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <osKernelInitialize+0x60>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d109      	bne.n	80031ea <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031d6:	f3ef 8311 	mrs	r3, BASEPRI
 80031da:	603b      	str	r3, [r7, #0]
  return(result);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80031e2:	f06f 0305 	mvn.w	r3, #5
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e00c      	b.n	8003204 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <osKernelInitialize+0x60>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d105      	bne.n	80031fe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <osKernelInitialize+0x60>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e002      	b.n	8003204 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003204:	68fb      	ldr	r3, [r7, #12]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	20000178 	.word	0x20000178

08003214 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800321a:	f3ef 8305 	mrs	r3, IPSR
 800321e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003220:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10f      	bne.n	8003246 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003226:	f3ef 8310 	mrs	r3, PRIMASK
 800322a:	607b      	str	r3, [r7, #4]
  return(result);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <osKernelStart+0x32>
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <osKernelStart+0x64>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d109      	bne.n	800324e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800323a:	f3ef 8311 	mrs	r3, BASEPRI
 800323e:	603b      	str	r3, [r7, #0]
  return(result);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003246:	f06f 0305 	mvn.w	r3, #5
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	e00e      	b.n	800326c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <osKernelStart+0x64>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d107      	bne.n	8003266 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003256:	4b08      	ldr	r3, [pc, #32]	; (8003278 <osKernelStart+0x64>)
 8003258:	2202      	movs	r2, #2
 800325a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800325c:	f001 faba 	bl	80047d4 <vTaskStartScheduler>
      stat = osOK;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e002      	b.n	800326c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003266:	f04f 33ff 	mov.w	r3, #4294967295
 800326a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800326c:	68fb      	ldr	r3, [r7, #12]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000178 	.word	0x20000178

0800327c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b092      	sub	sp, #72	; 0x48
 8003280:	af04      	add	r7, sp, #16
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800328c:	f3ef 8305 	mrs	r3, IPSR
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003294:	2b00      	cmp	r3, #0
 8003296:	f040 8094 	bne.w	80033c2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800329a:	f3ef 8310 	mrs	r3, PRIMASK
 800329e:	623b      	str	r3, [r7, #32]
  return(result);
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 808d 	bne.w	80033c2 <osThreadNew+0x146>
 80032a8:	4b48      	ldr	r3, [pc, #288]	; (80033cc <osThreadNew+0x150>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d106      	bne.n	80032be <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032b0:	f3ef 8311 	mrs	r3, BASEPRI
 80032b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f040 8082 	bne.w	80033c2 <osThreadNew+0x146>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d07e      	beq.n	80033c2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80032c8:	2318      	movs	r3, #24
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80032cc:	2300      	movs	r3, #0
 80032ce:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80032d0:	f107 031b 	add.w	r3, r7, #27
 80032d4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d045      	beq.n	800336e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <osThreadNew+0x74>
        name = attr->name;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <osThreadNew+0x9a>
 8003304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003306:	2b38      	cmp	r3, #56	; 0x38
 8003308:	d805      	bhi.n	8003316 <osThreadNew+0x9a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <osThreadNew+0x9e>
        return (NULL);
 8003316:	2300      	movs	r3, #0
 8003318:	e054      	b.n	80033c4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00e      	beq.n	8003350 <osThreadNew+0xd4>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2ba7      	cmp	r3, #167	; 0xa7
 8003338:	d90a      	bls.n	8003350 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <osThreadNew+0xd4>
        mem = 1;
 800334a:	2301      	movs	r3, #1
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
 800334e:	e010      	b.n	8003372 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10c      	bne.n	8003372 <osThreadNew+0xf6>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d108      	bne.n	8003372 <osThreadNew+0xf6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d104      	bne.n	8003372 <osThreadNew+0xf6>
          mem = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
 800336c:	e001      	b.n	8003372 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	2b01      	cmp	r3, #1
 8003376:	d110      	bne.n	800339a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800338c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f001 f83c 	bl	800440c <xTaskCreateStatic>
 8003394:	4603      	mov	r3, r0
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	e013      	b.n	80033c2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d110      	bne.n	80033c2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f001 f886 	bl	80044c4 <xTaskCreate>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d001      	beq.n	80033c2 <osThreadNew+0x146>
          hTask = NULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033c2:	697b      	ldr	r3, [r7, #20]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3738      	adds	r7, #56	; 0x38
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20000178 	.word	0x20000178

080033d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033d8:	f3ef 8305 	mrs	r3, IPSR
 80033dc:	613b      	str	r3, [r7, #16]
  return(result);
 80033de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10f      	bne.n	8003404 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e4:	f3ef 8310 	mrs	r3, PRIMASK
 80033e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <osDelay+0x34>
 80033f0:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <osDelay+0x58>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d109      	bne.n	800340c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033f8:	f3ef 8311 	mrs	r3, BASEPRI
 80033fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <osDelay+0x3c>
    stat = osErrorISR;
 8003404:	f06f 0305 	mvn.w	r3, #5
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	e007      	b.n	800341c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f001 f9a8 	bl	800476c <vTaskDelay>
    }
  }

  return (stat);
 800341c:	697b      	ldr	r3, [r7, #20]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000178 	.word	0x20000178

0800342c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b08c      	sub	sp, #48	; 0x30
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003438:	2300      	movs	r3, #0
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800343c:	f3ef 8305 	mrs	r3, IPSR
 8003440:	61bb      	str	r3, [r7, #24]
  return(result);
 8003442:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003444:	2b00      	cmp	r3, #0
 8003446:	d16f      	bne.n	8003528 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003448:	f3ef 8310 	mrs	r3, PRIMASK
 800344c:	617b      	str	r3, [r7, #20]
  return(result);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d169      	bne.n	8003528 <osMessageQueueNew+0xfc>
 8003454:	4b37      	ldr	r3, [pc, #220]	; (8003534 <osMessageQueueNew+0x108>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d105      	bne.n	8003468 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800345c:	f3ef 8311 	mrs	r3, BASEPRI
 8003460:	613b      	str	r3, [r7, #16]
  return(result);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d15f      	bne.n	8003528 <osMessageQueueNew+0xfc>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d05c      	beq.n	8003528 <osMessageQueueNew+0xfc>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d059      	beq.n	8003528 <osMessageQueueNew+0xfc>
    mem = -1;
 8003474:	f04f 33ff 	mov.w	r3, #4294967295
 8003478:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d029      	beq.n	80034d4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d012      	beq.n	80034ae <osMessageQueueNew+0x82>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b4f      	cmp	r3, #79	; 0x4f
 800348e:	d90e      	bls.n	80034ae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d302      	bcc.n	80034ae <osMessageQueueNew+0x82>
        mem = 1;
 80034a8:	2301      	movs	r3, #1
 80034aa:	623b      	str	r3, [r7, #32]
 80034ac:	e014      	b.n	80034d8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d110      	bne.n	80034d8 <osMessageQueueNew+0xac>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10c      	bne.n	80034d8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d108      	bne.n	80034d8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d104      	bne.n	80034d8 <osMessageQueueNew+0xac>
          mem = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	623b      	str	r3, [r7, #32]
 80034d2:	e001      	b.n	80034d8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d10b      	bne.n	80034f6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2100      	movs	r1, #0
 80034e8:	9100      	str	r1, [sp, #0]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fa53 	bl	8003998 <xQueueGenericCreateStatic>
 80034f2:	6278      	str	r0, [r7, #36]	; 0x24
 80034f4:	e008      	b.n	8003508 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80034fc:	2200      	movs	r2, #0
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fac0 	bl	8003a86 <xQueueGenericCreate>
 8003506:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00c      	beq.n	8003528 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <osMessageQueueNew+0xf0>
        name = attr->name;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	e001      	b.n	8003520 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003520:	69f9      	ldr	r1, [r7, #28]
 8003522:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003524:	f000 ff16 	bl	8004354 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800352a:	4618      	mov	r0, r3
 800352c:	3728      	adds	r7, #40	; 0x28
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000178 	.word	0x20000178

08003538 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800354c:	2300      	movs	r3, #0
 800354e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003550:	f3ef 8305 	mrs	r3, IPSR
 8003554:	61fb      	str	r3, [r7, #28]
  return(result);
 8003556:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10f      	bne.n	800357c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355c:	f3ef 8310 	mrs	r3, PRIMASK
 8003560:	61bb      	str	r3, [r7, #24]
  return(result);
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <osMessageQueuePut+0x44>
 8003568:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <osMessageQueuePut+0xe0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d12e      	bne.n	80035ce <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003570:	f3ef 8311 	mrs	r3, BASEPRI
 8003574:	617b      	str	r3, [r7, #20]
  return(result);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d028      	beq.n	80035ce <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <osMessageQueuePut+0x56>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <osMessageQueuePut+0x56>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800358e:	f06f 0303 	mvn.w	r3, #3
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003594:	e039      	b.n	800360a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800359a:	f107 0210 	add.w	r2, r7, #16
 800359e:	2300      	movs	r3, #0
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	6a38      	ldr	r0, [r7, #32]
 80035a4:	f000 fbce 	bl	8003d44 <xQueueGenericSendFromISR>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d003      	beq.n	80035b6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80035ae:	f06f 0302 	mvn.w	r3, #2
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035b4:	e029      	b.n	800360a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d026      	beq.n	800360a <osMessageQueuePut+0xd2>
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <osMessageQueuePut+0xe4>)
 80035be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80035cc:	e01d      	b.n	800360a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <osMessageQueuePut+0xa2>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80035da:	f06f 0303 	mvn.w	r3, #3
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
 80035e0:	e014      	b.n	800360c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80035e2:	2300      	movs	r3, #0
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	6a38      	ldr	r0, [r7, #32]
 80035ea:	f000 faad 	bl	8003b48 <xQueueGenericSend>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d00b      	beq.n	800360c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80035fa:	f06f 0301 	mvn.w	r3, #1
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003600:	e004      	b.n	800360c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003602:	f06f 0302 	mvn.w	r3, #2
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	e000      	b.n	800360c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800360a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800360e:	4618      	mov	r0, r3
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000178 	.word	0x20000178
 800361c:	e000ed04 	.word	0xe000ed04

08003620 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	; 0x28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003636:	f3ef 8305 	mrs	r3, IPSR
 800363a:	61fb      	str	r3, [r7, #28]
  return(result);
 800363c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003642:	f3ef 8310 	mrs	r3, PRIMASK
 8003646:	61bb      	str	r3, [r7, #24]
  return(result);
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <osMessageQueueGet+0x42>
 800364e:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <osMessageQueueGet+0xdc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d12e      	bne.n	80036b4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003656:	f3ef 8311 	mrs	r3, BASEPRI
 800365a:	617b      	str	r3, [r7, #20]
  return(result);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d028      	beq.n	80036b4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <osMessageQueueGet+0x54>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <osMessageQueueGet+0x54>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003674:	f06f 0303 	mvn.w	r3, #3
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800367a:	e038      	b.n	80036ee <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003680:	f107 0310 	add.w	r3, r7, #16
 8003684:	461a      	mov	r2, r3
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	6a38      	ldr	r0, [r7, #32]
 800368a:	f000 fcd3 	bl	8004034 <xQueueReceiveFromISR>
 800368e:	4603      	mov	r3, r0
 8003690:	2b01      	cmp	r3, #1
 8003692:	d003      	beq.n	800369c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003694:	f06f 0302 	mvn.w	r3, #2
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800369a:	e028      	b.n	80036ee <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d025      	beq.n	80036ee <osMessageQueueGet+0xce>
 80036a2:	4b17      	ldr	r3, [pc, #92]	; (8003700 <osMessageQueueGet+0xe0>)
 80036a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80036b2:	e01c      	b.n	80036ee <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <osMessageQueueGet+0xa0>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d103      	bne.n	80036c8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80036c0:	f06f 0303 	mvn.w	r3, #3
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
 80036c6:	e013      	b.n	80036f0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	6a38      	ldr	r0, [r7, #32]
 80036ce:	f000 fbd1 	bl	8003e74 <xQueueReceive>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d00b      	beq.n	80036f0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80036de:	f06f 0301 	mvn.w	r3, #1
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
 80036e4:	e004      	b.n	80036f0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80036e6:	f06f 0302 	mvn.w	r3, #2
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
 80036ec:	e000      	b.n	80036f0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80036ee:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3728      	adds	r7, #40	; 0x28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000178 	.word	0x20000178
 8003700:	e000ed04 	.word	0xe000ed04

08003704 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4a06      	ldr	r2, [pc, #24]	; (800372c <vApplicationGetIdleTaskMemory+0x28>)
 8003714:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4a05      	ldr	r2, [pc, #20]	; (8003730 <vApplicationGetIdleTaskMemory+0x2c>)
 800371a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2280      	movs	r2, #128	; 0x80
 8003720:	601a      	str	r2, [r3, #0]
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	2000017c 	.word	0x2000017c
 8003730:	20000224 	.word	0x20000224

08003734 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a07      	ldr	r2, [pc, #28]	; (8003760 <vApplicationGetTimerTaskMemory+0x2c>)
 8003744:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4a06      	ldr	r2, [pc, #24]	; (8003764 <vApplicationGetTimerTaskMemory+0x30>)
 800374a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003752:	601a      	str	r2, [r3, #0]
}
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000424 	.word	0x20000424
 8003764:	200004cc 	.word	0x200004cc

08003768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f103 0208 	add.w	r2, r3, #8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f04f 32ff 	mov.w	r2, #4294967295
 8003780:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f103 0208 	add.w	r2, r3, #8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f103 0208 	add.w	r2, r3, #8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr

080037a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	601a      	str	r2, [r3, #0]
}
 80037fa:	bf00      	nop
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr

08003804 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d103      	bne.n	8003824 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	e00c      	b.n	800383e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3308      	adds	r3, #8
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e002      	b.n	8003832 <vListInsert+0x2e>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	d2f6      	bcs.n	800382c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	601a      	str	r2, [r3, #0]
}
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6892      	ldr	r2, [r2, #8]
 800388a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6852      	ldr	r2, [r2, #4]
 8003894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	429a      	cmp	r2, r3
 800389e:	d103      	bne.n	80038a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	1e5a      	subs	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
	...

080038c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038f2:	f002 f8b3 	bl	8005a5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	441a      	add	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	3b01      	subs	r3, #1
 8003924:	68f9      	ldr	r1, [r7, #12]
 8003926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003928:	fb01 f303 	mul.w	r3, r1, r3
 800392c:	441a      	add	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	22ff      	movs	r2, #255	; 0xff
 800393e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d114      	bne.n	8003972 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01a      	beq.n	8003986 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3310      	adds	r3, #16
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f9d9 	bl	8004d0c <xTaskRemoveFromEventList>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d012      	beq.n	8003986 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <xQueueGenericReset+0xcc>)
 8003962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	e009      	b.n	8003986 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3310      	adds	r3, #16
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fef6 	bl	8003768 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3324      	adds	r3, #36	; 0x24
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fef1 	bl	8003768 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003986:	f002 f899 	bl	8005abc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800398a:	2301      	movs	r3, #1
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	e000ed04 	.word	0xe000ed04

08003998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08e      	sub	sp, #56	; 0x38
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <xQueueGenericCreateStatic+0x52>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <xQueueGenericCreateStatic+0x56>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xQueueGenericCreateStatic+0x58>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	623b      	str	r3, [r7, #32]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <xQueueGenericCreateStatic+0x7e>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <xQueueGenericCreateStatic+0x82>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <xQueueGenericCreateStatic+0x84>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	61fb      	str	r3, [r7, #28]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a36:	2350      	movs	r3, #80	; 0x50
 8003a38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b50      	cmp	r3, #80	; 0x50
 8003a3e:	d00a      	beq.n	8003a56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	61bb      	str	r3, [r7, #24]
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00d      	beq.n	8003a7c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a68:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f843 	bl	8003b02 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3730      	adds	r7, #48	; 0x30
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b08a      	sub	sp, #40	; 0x28
 8003a8a:	af02      	add	r7, sp, #8
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	4613      	mov	r3, r2
 8003a92:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	613b      	str	r3, [r7, #16]
}
 8003aac:	bf00      	nop
 8003aae:	e7fe      	b.n	8003aae <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	e004      	b.n	8003ac6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	fb02 f303 	mul.w	r3, r2, r3
 8003ac4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3350      	adds	r3, #80	; 0x50
 8003aca:	4618      	mov	r0, r3
 8003acc:	f002 f8c6 	bl	8005c5c <pvPortMalloc>
 8003ad0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00f      	beq.n	8003af8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	3350      	adds	r3, #80	; 0x50
 8003adc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ae6:	79fa      	ldrb	r2, [r7, #7]
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	4613      	mov	r3, r2
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f805 	bl	8003b02 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003af8:	69bb      	ldr	r3, [r7, #24]
	}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e002      	b.n	8003b24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b30:	2101      	movs	r1, #1
 8003b32:	69b8      	ldr	r0, [r7, #24]
 8003b34:	f7ff fec8 	bl	80038c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08e      	sub	sp, #56	; 0x38
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b56:	2300      	movs	r3, #0
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10a      	bne.n	8003b7a <xQueueGenericSend+0x32>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b76:	bf00      	nop
 8003b78:	e7fe      	b.n	8003b78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d103      	bne.n	8003b88 <xQueueGenericSend+0x40>
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <xQueueGenericSend+0x44>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <xQueueGenericSend+0x46>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <xQueueGenericSend+0x60>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d103      	bne.n	8003bb6 <xQueueGenericSend+0x6e>
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <xQueueGenericSend+0x72>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <xQueueGenericSend+0x74>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	623b      	str	r3, [r7, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bd6:	f001 fa5f 	bl	8005098 <xTaskGetSchedulerState>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <xQueueGenericSend+0x9e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <xQueueGenericSend+0xa2>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <xQueueGenericSend+0xa4>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <xQueueGenericSend+0xbe>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	61fb      	str	r3, [r7, #28]
}
 8003c02:	bf00      	nop
 8003c04:	e7fe      	b.n	8003c04 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c06:	f001 ff29 	bl	8005a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <xQueueGenericSend+0xd4>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d129      	bne.n	8003c70 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c22:	f000 fa87 	bl	8004134 <prvCopyDataToQueue>
 8003c26:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d010      	beq.n	8003c52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	3324      	adds	r3, #36	; 0x24
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 f869 	bl	8004d0c <xTaskRemoveFromEventList>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c40:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <xQueueGenericSend+0x1f8>)
 8003c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	e00a      	b.n	8003c68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c58:	4b39      	ldr	r3, [pc, #228]	; (8003d40 <xQueueGenericSend+0x1f8>)
 8003c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c68:	f001 ff28 	bl	8005abc <vPortExitCritical>
				return pdPASS;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e063      	b.n	8003d38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c76:	f001 ff21 	bl	8005abc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e05c      	b.n	8003d38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d106      	bne.n	8003c92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f001 f8a3 	bl	8004dd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c92:	f001 ff13 	bl	8005abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c96:	f000 fe0d 	bl	80048b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c9a:	f001 fedf 	bl	8005a5c <vPortEnterCritical>
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ca4:	b25b      	sxtb	r3, r3
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d103      	bne.n	8003cb4 <xQueueGenericSend+0x16c>
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cba:	b25b      	sxtb	r3, r3
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d103      	bne.n	8003cca <xQueueGenericSend+0x182>
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cca:	f001 fef7 	bl	8005abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cce:	1d3a      	adds	r2, r7, #4
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 f892 	bl	8004e00 <xTaskCheckForTimeOut>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d124      	bne.n	8003d2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce4:	f000 fb1e 	bl	8004324 <prvIsQueueFull>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d018      	beq.n	8003d20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	3310      	adds	r3, #16
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 ffb8 	bl	8004c6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cfe:	f000 faa9 	bl	8004254 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d02:	f000 fde5 	bl	80048d0 <xTaskResumeAll>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f47f af7c 	bne.w	8003c06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <xQueueGenericSend+0x1f8>)
 8003d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	e772      	b.n	8003c06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d22:	f000 fa97 	bl	8004254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d26:	f000 fdd3 	bl	80048d0 <xTaskResumeAll>
 8003d2a:	e76c      	b.n	8003c06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d2e:	f000 fa91 	bl	8004254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d32:	f000 fdcd 	bl	80048d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d36:	2300      	movs	r3, #0
		}
	}
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3738      	adds	r7, #56	; 0x38
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	e000ed04 	.word	0xe000ed04

08003d44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	; 0x38
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10a      	bne.n	8003d72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d6e:	bf00      	nop
 8003d70:	e7fe      	b.n	8003d70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d103      	bne.n	8003d80 <xQueueGenericSendFromISR+0x3c>
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <xQueueGenericSendFromISR+0x40>
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <xQueueGenericSendFromISR+0x42>
 8003d84:	2300      	movs	r3, #0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	623b      	str	r3, [r7, #32]
}
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d103      	bne.n	8003dae <xQueueGenericSendFromISR+0x6a>
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <xQueueGenericSendFromISR+0x6e>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <xQueueGenericSendFromISR+0x70>
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	61fb      	str	r3, [r7, #28]
}
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dce:	f001 ff07 	bl	8005be0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003dd2:	f3ef 8211 	mrs	r2, BASEPRI
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	61ba      	str	r2, [r7, #24]
 8003de8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d302      	bcc.n	8003e00 <xQueueGenericSendFromISR+0xbc>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d12c      	bne.n	8003e5a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e10:	f000 f990 	bl	8004134 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e14:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d112      	bne.n	8003e44 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	3324      	adds	r3, #36	; 0x24
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 ff6e 	bl	8004d0c <xTaskRemoveFromEventList>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00e      	beq.n	8003e54 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00b      	beq.n	8003e54 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e007      	b.n	8003e54 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e48:	3301      	adds	r3, #1
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	b25a      	sxtb	r2, r3
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e54:	2301      	movs	r3, #1
 8003e56:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003e58:	e001      	b.n	8003e5e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3738      	adds	r7, #56	; 0x38
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08c      	sub	sp, #48	; 0x30
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e80:	2300      	movs	r3, #0
 8003e82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <xQueueReceive+0x30>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	623b      	str	r3, [r7, #32]
}
 8003ea0:	bf00      	nop
 8003ea2:	e7fe      	b.n	8003ea2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d103      	bne.n	8003eb2 <xQueueReceive+0x3e>
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <xQueueReceive+0x42>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <xQueueReceive+0x44>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <xQueueReceive+0x5e>
	__asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	61fb      	str	r3, [r7, #28]
}
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ed2:	f001 f8e1 	bl	8005098 <xTaskGetSchedulerState>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d102      	bne.n	8003ee2 <xQueueReceive+0x6e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <xQueueReceive+0x72>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <xQueueReceive+0x74>
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <xQueueReceive+0x8e>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	61bb      	str	r3, [r7, #24]
}
 8003efe:	bf00      	nop
 8003f00:	e7fe      	b.n	8003f00 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f02:	f001 fdab 	bl	8005a5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01f      	beq.n	8003f52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f16:	f000 f977 	bl	8004208 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	1e5a      	subs	r2, r3, #1
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00f      	beq.n	8003f4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	3310      	adds	r3, #16
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 feec 	bl	8004d0c <xTaskRemoveFromEventList>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f3a:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <xQueueReceive+0x1bc>)
 8003f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f4a:	f001 fdb7 	bl	8005abc <vPortExitCritical>
				return pdPASS;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e069      	b.n	8004026 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d103      	bne.n	8003f60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f58:	f001 fdb0 	bl	8005abc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e062      	b.n	8004026 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f66:	f107 0310 	add.w	r3, r7, #16
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 ff32 	bl	8004dd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f74:	f001 fda2 	bl	8005abc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f78:	f000 fc9c 	bl	80048b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f7c:	f001 fd6e 	bl	8005a5c <vPortEnterCritical>
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f86:	b25b      	sxtb	r3, r3
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d103      	bne.n	8003f96 <xQueueReceive+0x122>
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f9c:	b25b      	sxtb	r3, r3
 8003f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa2:	d103      	bne.n	8003fac <xQueueReceive+0x138>
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fac:	f001 fd86 	bl	8005abc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fb0:	1d3a      	adds	r2, r7, #4
 8003fb2:	f107 0310 	add.w	r3, r7, #16
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 ff21 	bl	8004e00 <xTaskCheckForTimeOut>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d123      	bne.n	800400c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fc6:	f000 f997 	bl	80042f8 <prvIsQueueEmpty>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d017      	beq.n	8004000 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	3324      	adds	r3, #36	; 0x24
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fe47 	bl	8004c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fe0:	f000 f938 	bl	8004254 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fe4:	f000 fc74 	bl	80048d0 <xTaskResumeAll>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d189      	bne.n	8003f02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <xQueueReceive+0x1bc>)
 8003ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	e780      	b.n	8003f02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004002:	f000 f927 	bl	8004254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004006:	f000 fc63 	bl	80048d0 <xTaskResumeAll>
 800400a:	e77a      	b.n	8003f02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800400c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800400e:	f000 f921 	bl	8004254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004012:	f000 fc5d 	bl	80048d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004018:	f000 f96e 	bl	80042f8 <prvIsQueueEmpty>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	f43f af6f 	beq.w	8003f02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004024:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004026:	4618      	mov	r0, r3
 8004028:	3730      	adds	r7, #48	; 0x30
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08e      	sub	sp, #56	; 0x38
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	623b      	str	r3, [r7, #32]
}
 800405c:	bf00      	nop
 800405e:	e7fe      	b.n	800405e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <xQueueReceiveFromISR+0x3a>
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <xQueueReceiveFromISR+0x3e>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <xQueueReceiveFromISR+0x40>
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	61fb      	str	r3, [r7, #28]
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800408e:	f001 fda7 	bl	8005be0 <vPortValidateInterruptPriority>
	__asm volatile
 8004092:	f3ef 8211 	mrs	r2, BASEPRI
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	61ba      	str	r2, [r7, #24]
 80040a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80040aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d02f      	beq.n	800411a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040c8:	f000 f89e 	bl	8004208 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	1e5a      	subs	r2, r3, #1
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80040d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d112      	bne.n	8004104 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d016      	beq.n	8004114 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	3310      	adds	r3, #16
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fe0e 	bl	8004d0c <xTaskRemoveFromEventList>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00e      	beq.n	8004114 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00b      	beq.n	8004114 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e007      	b.n	8004114 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004108:	3301      	adds	r3, #1
 800410a:	b2db      	uxtb	r3, r3
 800410c:	b25a      	sxtb	r2, r3
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004114:	2301      	movs	r3, #1
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
 8004118:	e001      	b.n	800411e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800411a:	2300      	movs	r3, #0
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f383 8811 	msr	BASEPRI, r3
}
 8004128:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800412c:	4618      	mov	r0, r3
 800412e:	3738      	adds	r7, #56	; 0x38
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10d      	bne.n	800416e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d14d      	bne.n	80041f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 ffb8 	bl	80050d4 <xTaskPriorityDisinherit>
 8004164:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	e043      	b.n	80041f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d119      	bne.n	80041a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6898      	ldr	r0, [r3, #8]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	461a      	mov	r2, r3
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	f002 f92d 	bl	80063de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	441a      	add	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	429a      	cmp	r2, r3
 800419c:	d32b      	bcc.n	80041f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	609a      	str	r2, [r3, #8]
 80041a6:	e026      	b.n	80041f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	68d8      	ldr	r0, [r3, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	461a      	mov	r2, r3
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	f002 f913 	bl	80063de <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	425b      	negs	r3, r3
 80041c2:	441a      	add	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d207      	bcs.n	80041e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	425b      	negs	r3, r3
 80041de:	441a      	add	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d105      	bne.n	80041f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80041fe:	697b      	ldr	r3, [r7, #20]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d018      	beq.n	800424c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	441a      	add	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	d303      	bcc.n	800423c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68d9      	ldr	r1, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	461a      	mov	r2, r3
 8004246:	6838      	ldr	r0, [r7, #0]
 8004248:	f002 f8c9 	bl	80063de <memcpy>
	}
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800425c:	f001 fbfe 	bl	8005a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004266:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004268:	e011      	b.n	800428e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	2b00      	cmp	r3, #0
 8004270:	d012      	beq.n	8004298 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3324      	adds	r3, #36	; 0x24
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fd48 	bl	8004d0c <xTaskRemoveFromEventList>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004282:	f000 fe1f 	bl	8004ec4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	3b01      	subs	r3, #1
 800428a:	b2db      	uxtb	r3, r3
 800428c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800428e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004292:	2b00      	cmp	r3, #0
 8004294:	dce9      	bgt.n	800426a <prvUnlockQueue+0x16>
 8004296:	e000      	b.n	800429a <prvUnlockQueue+0x46>
					break;
 8004298:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	22ff      	movs	r2, #255	; 0xff
 800429e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80042a2:	f001 fc0b 	bl	8005abc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042a6:	f001 fbd9 	bl	8005a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042b2:	e011      	b.n	80042d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d012      	beq.n	80042e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3310      	adds	r3, #16
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fd23 	bl	8004d0c <xTaskRemoveFromEventList>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042cc:	f000 fdfa 	bl	8004ec4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042d0:	7bbb      	ldrb	r3, [r7, #14]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	dce9      	bgt.n	80042b4 <prvUnlockQueue+0x60>
 80042e0:	e000      	b.n	80042e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	22ff      	movs	r2, #255	; 0xff
 80042e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042ec:	f001 fbe6 	bl	8005abc <vPortExitCritical>
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004300:	f001 fbac 	bl	8005a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	2b00      	cmp	r3, #0
 800430a:	d102      	bne.n	8004312 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800430c:	2301      	movs	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e001      	b.n	8004316 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004316:	f001 fbd1 	bl	8005abc <vPortExitCritical>

	return xReturn;
 800431a:	68fb      	ldr	r3, [r7, #12]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800432c:	f001 fb96 	bl	8005a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	429a      	cmp	r2, r3
 800433a:	d102      	bne.n	8004342 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e001      	b.n	8004346 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004346:	f001 fbb9 	bl	8005abc <vPortExitCritical>

	return xReturn;
 800434a:	68fb      	ldr	r3, [r7, #12]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	e014      	b.n	800438e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004364:	4a0e      	ldr	r2, [pc, #56]	; (80043a0 <vQueueAddToRegistry+0x4c>)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004370:	490b      	ldr	r1, [pc, #44]	; (80043a0 <vQueueAddToRegistry+0x4c>)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800437a:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <vQueueAddToRegistry+0x4c>)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004386:	e006      	b.n	8004396 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3301      	adds	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b07      	cmp	r3, #7
 8004392:	d9e7      	bls.n	8004364 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr
 80043a0:	200008cc 	.word	0x200008cc

080043a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80043b4:	f001 fb52 	bl	8005a5c <vPortEnterCritical>
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043be:	b25b      	sxtb	r3, r3
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d103      	bne.n	80043ce <vQueueWaitForMessageRestricted+0x2a>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d4:	b25b      	sxtb	r3, r3
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043da:	d103      	bne.n	80043e4 <vQueueWaitForMessageRestricted+0x40>
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043e4:	f001 fb6a 	bl	8005abc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d106      	bne.n	80043fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3324      	adds	r3, #36	; 0x24
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	68b9      	ldr	r1, [r7, #8]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fc5b 	bl	8004cb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80043fe:	6978      	ldr	r0, [r7, #20]
 8004400:	f7ff ff28 	bl	8004254 <prvUnlockQueue>
	}
 8004404:	bf00      	nop
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08e      	sub	sp, #56	; 0x38
 8004410:	af04      	add	r7, sp, #16
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	623b      	str	r3, [r7, #32]
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <xTaskCreateStatic+0x46>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	61fb      	str	r3, [r7, #28]
}
 800444e:	bf00      	nop
 8004450:	e7fe      	b.n	8004450 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004452:	23a8      	movs	r3, #168	; 0xa8
 8004454:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2ba8      	cmp	r3, #168	; 0xa8
 800445a:	d00a      	beq.n	8004472 <xTaskCreateStatic+0x66>
	__asm volatile
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	61bb      	str	r3, [r7, #24]
}
 800446e:	bf00      	nop
 8004470:	e7fe      	b.n	8004470 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01e      	beq.n	80044b6 <xTaskCreateStatic+0xaa>
 8004478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01b      	beq.n	80044b6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004486:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	2202      	movs	r2, #2
 800448c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004490:	2300      	movs	r3, #0
 8004492:	9303      	str	r3, [sp, #12]
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	9302      	str	r3, [sp, #8]
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f851 	bl	8004550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044b0:	f000 f8ec 	bl	800468c <prvAddNewTaskToReadyList>
 80044b4:	e001      	b.n	80044ba <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044ba:	697b      	ldr	r3, [r7, #20]
	}
 80044bc:	4618      	mov	r0, r3
 80044be:	3728      	adds	r7, #40	; 0x28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08c      	sub	sp, #48	; 0x30
 80044c8:	af04      	add	r7, sp, #16
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	4613      	mov	r3, r2
 80044d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 fbbf 	bl	8005c5c <pvPortMalloc>
 80044de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00e      	beq.n	8004504 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80044e6:	20a8      	movs	r0, #168	; 0xa8
 80044e8:	f001 fbb8 	bl	8005c5c <pvPortMalloc>
 80044ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
 80044fa:	e005      	b.n	8004508 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044fc:	6978      	ldr	r0, [r7, #20]
 80044fe:	f001 fc71 	bl	8005de4 <vPortFree>
 8004502:	e001      	b.n	8004508 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d017      	beq.n	800453e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004516:	88fa      	ldrh	r2, [r7, #6]
 8004518:	2300      	movs	r3, #0
 800451a:	9303      	str	r3, [sp, #12]
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	9302      	str	r3, [sp, #8]
 8004520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f80f 	bl	8004550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004532:	69f8      	ldr	r0, [r7, #28]
 8004534:	f000 f8aa 	bl	800468c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004538:	2301      	movs	r3, #1
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	e002      	b.n	8004544 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800453e:	f04f 33ff 	mov.w	r3, #4294967295
 8004542:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004544:	69bb      	ldr	r3, [r7, #24]
	}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	461a      	mov	r2, r3
 8004568:	21a5      	movs	r1, #165	; 0xa5
 800456a:	f001 fe66 	bl	800623a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004578:	3b01      	subs	r3, #1
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	f023 0307 	bic.w	r3, r3, #7
 8004586:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	617b      	str	r3, [r7, #20]
}
 80045a4:	bf00      	nop
 80045a6:	e7fe      	b.n	80045a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045a8:	2300      	movs	r3, #0
 80045aa:	61fb      	str	r3, [r7, #28]
 80045ac:	e012      	b.n	80045d4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	4413      	add	r3, r2
 80045b4:	7819      	ldrb	r1, [r3, #0]
 80045b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	3334      	adds	r3, #52	; 0x34
 80045be:	460a      	mov	r2, r1
 80045c0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4413      	add	r3, r2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d006      	beq.n	80045dc <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3301      	adds	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b0f      	cmp	r3, #15
 80045d8:	d9e9      	bls.n	80045ae <prvInitialiseNewTask+0x5e>
 80045da:	e000      	b.n	80045de <prvInitialiseNewTask+0x8e>
		{
			break;
 80045dc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	2b37      	cmp	r3, #55	; 0x37
 80045ea:	d901      	bls.n	80045f0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045ec:	2337      	movs	r3, #55	; 0x37
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	2200      	movs	r2, #0
 8004600:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	3304      	adds	r3, #4
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f8cd 	bl	80037a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	3318      	adds	r3, #24
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff f8c8 	bl	80037a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	2200      	movs	r2, #0
 8004630:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004636:	2200      	movs	r2, #0
 8004638:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	3354      	adds	r3, #84	; 0x54
 8004640:	224c      	movs	r2, #76	; 0x4c
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f001 fdf8 	bl	800623a <memset>
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <prvInitialiseNewTask+0x130>)
 800464e:	659a      	str	r2, [r3, #88]	; 0x58
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	4a0c      	ldr	r2, [pc, #48]	; (8004684 <prvInitialiseNewTask+0x134>)
 8004654:	65da      	str	r2, [r3, #92]	; 0x5c
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	4a0b      	ldr	r2, [pc, #44]	; (8004688 <prvInitialiseNewTask+0x138>)
 800465a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	69b8      	ldr	r0, [r7, #24]
 8004662:	f001 f90b 	bl	800587c <pxPortInitialiseStack>
 8004666:	4602      	mov	r2, r0
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004676:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004678:	bf00      	nop
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20001b58 	.word	0x20001b58
 8004684:	20001bc0 	.word	0x20001bc0
 8004688:	20001c28 	.word	0x20001c28

0800468c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004694:	f001 f9e2 	bl	8005a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004698:	4b2d      	ldr	r3, [pc, #180]	; (8004750 <prvAddNewTaskToReadyList+0xc4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3301      	adds	r3, #1
 800469e:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <prvAddNewTaskToReadyList+0xc4>)
 80046a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046a2:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <prvAddNewTaskToReadyList+0xc8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046aa:	4a2a      	ldr	r2, [pc, #168]	; (8004754 <prvAddNewTaskToReadyList+0xc8>)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046b0:	4b27      	ldr	r3, [pc, #156]	; (8004750 <prvAddNewTaskToReadyList+0xc4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d110      	bne.n	80046da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046b8:	f000 fc28 	bl	8004f0c <prvInitialiseTaskLists>
 80046bc:	e00d      	b.n	80046da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046be:	4b26      	ldr	r3, [pc, #152]	; (8004758 <prvAddNewTaskToReadyList+0xcc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <prvAddNewTaskToReadyList+0xc8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d802      	bhi.n	80046da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046d4:	4a1f      	ldr	r2, [pc, #124]	; (8004754 <prvAddNewTaskToReadyList+0xc8>)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046da:	4b20      	ldr	r3, [pc, #128]	; (800475c <prvAddNewTaskToReadyList+0xd0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3301      	adds	r3, #1
 80046e0:	4a1e      	ldr	r2, [pc, #120]	; (800475c <prvAddNewTaskToReadyList+0xd0>)
 80046e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046e4:	4b1d      	ldr	r3, [pc, #116]	; (800475c <prvAddNewTaskToReadyList+0xd0>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <prvAddNewTaskToReadyList+0xd4>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d903      	bls.n	8004700 <prvAddNewTaskToReadyList+0x74>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	4a18      	ldr	r2, [pc, #96]	; (8004760 <prvAddNewTaskToReadyList+0xd4>)
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4a15      	ldr	r2, [pc, #84]	; (8004764 <prvAddNewTaskToReadyList+0xd8>)
 800470e:	441a      	add	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f7ff f851 	bl	80037be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800471c:	f001 f9ce 	bl	8005abc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004720:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <prvAddNewTaskToReadyList+0xcc>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00e      	beq.n	8004746 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <prvAddNewTaskToReadyList+0xc8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	429a      	cmp	r2, r3
 8004734:	d207      	bcs.n	8004746 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004736:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <prvAddNewTaskToReadyList+0xdc>)
 8004738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000de0 	.word	0x20000de0
 8004754:	2000090c 	.word	0x2000090c
 8004758:	20000dec 	.word	0x20000dec
 800475c:	20000dfc 	.word	0x20000dfc
 8004760:	20000de8 	.word	0x20000de8
 8004764:	20000910 	.word	0x20000910
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d017      	beq.n	80047ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <vTaskDelay+0x60>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <vTaskDelay+0x30>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	60bb      	str	r3, [r7, #8]
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800479c:	f000 f88a 	bl	80048b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047a0:	2100      	movs	r1, #0
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fd04 	bl	80051b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047a8:	f000 f892 	bl	80048d0 <xTaskResumeAll>
 80047ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d107      	bne.n	80047c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <vTaskDelay+0x64>)
 80047b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20000e08 	.word	0x20000e08
 80047d0:	e000ed04 	.word	0xe000ed04

080047d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08a      	sub	sp, #40	; 0x28
 80047d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047e2:	463a      	mov	r2, r7
 80047e4:	1d39      	adds	r1, r7, #4
 80047e6:	f107 0308 	add.w	r3, r7, #8
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fe ff8a 	bl	8003704 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047f0:	6839      	ldr	r1, [r7, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	9202      	str	r2, [sp, #8]
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	2300      	movs	r3, #0
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	2300      	movs	r3, #0
 8004800:	460a      	mov	r2, r1
 8004802:	4924      	ldr	r1, [pc, #144]	; (8004894 <vTaskStartScheduler+0xc0>)
 8004804:	4824      	ldr	r0, [pc, #144]	; (8004898 <vTaskStartScheduler+0xc4>)
 8004806:	f7ff fe01 	bl	800440c <xTaskCreateStatic>
 800480a:	4603      	mov	r3, r0
 800480c:	4a23      	ldr	r2, [pc, #140]	; (800489c <vTaskStartScheduler+0xc8>)
 800480e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004810:	4b22      	ldr	r3, [pc, #136]	; (800489c <vTaskStartScheduler+0xc8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004818:	2301      	movs	r3, #1
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e001      	b.n	8004822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d102      	bne.n	800482e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004828:	f000 fd16 	bl	8005258 <xTimerCreateTimerTask>
 800482c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d11b      	bne.n	800486c <vTaskStartScheduler+0x98>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	613b      	str	r3, [r7, #16]
}
 8004846:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <vTaskStartScheduler+0xcc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3354      	adds	r3, #84	; 0x54
 800484e:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <vTaskStartScheduler+0xd0>)
 8004850:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <vTaskStartScheduler+0xd4>)
 8004854:	f04f 32ff 	mov.w	r2, #4294967295
 8004858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800485a:	4b14      	ldr	r3, [pc, #80]	; (80048ac <vTaskStartScheduler+0xd8>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004860:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <vTaskStartScheduler+0xdc>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004866:	f001 f887 	bl	8005978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800486a:	e00e      	b.n	800488a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004872:	d10a      	bne.n	800488a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	60fb      	str	r3, [r7, #12]
}
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <vTaskStartScheduler+0xb4>
}
 800488a:	bf00      	nop
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	08007020 	.word	0x08007020
 8004898:	08004edd 	.word	0x08004edd
 800489c:	20000e04 	.word	0x20000e04
 80048a0:	2000090c 	.word	0x2000090c
 80048a4:	20000068 	.word	0x20000068
 80048a8:	20000e00 	.word	0x20000e00
 80048ac:	20000dec 	.word	0x20000dec
 80048b0:	20000de4 	.word	0x20000de4

080048b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <vTaskSuspendAll+0x18>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a03      	ldr	r2, [pc, #12]	; (80048cc <vTaskSuspendAll+0x18>)
 80048c0:	6013      	str	r3, [r2, #0]
}
 80048c2:	bf00      	nop
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000e08 	.word	0x20000e08

080048d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048da:	2300      	movs	r3, #0
 80048dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048de:	4b42      	ldr	r3, [pc, #264]	; (80049e8 <xTaskResumeAll+0x118>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10a      	bne.n	80048fc <xTaskResumeAll+0x2c>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	603b      	str	r3, [r7, #0]
}
 80048f8:	bf00      	nop
 80048fa:	e7fe      	b.n	80048fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048fc:	f001 f8ae 	bl	8005a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004900:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <xTaskResumeAll+0x118>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3b01      	subs	r3, #1
 8004906:	4a38      	ldr	r2, [pc, #224]	; (80049e8 <xTaskResumeAll+0x118>)
 8004908:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800490a:	4b37      	ldr	r3, [pc, #220]	; (80049e8 <xTaskResumeAll+0x118>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d162      	bne.n	80049d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004912:	4b36      	ldr	r3, [pc, #216]	; (80049ec <xTaskResumeAll+0x11c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d05e      	beq.n	80049d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800491a:	e02f      	b.n	800497c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800491c:	4b34      	ldr	r3, [pc, #208]	; (80049f0 <xTaskResumeAll+0x120>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3318      	adds	r3, #24
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe ffa3 	bl	8003874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3304      	adds	r3, #4
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe ff9e 	bl	8003874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	4b2d      	ldr	r3, [pc, #180]	; (80049f4 <xTaskResumeAll+0x124>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d903      	bls.n	800494c <xTaskResumeAll+0x7c>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <xTaskResumeAll+0x124>)
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4a27      	ldr	r2, [pc, #156]	; (80049f8 <xTaskResumeAll+0x128>)
 800495a:	441a      	add	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3304      	adds	r3, #4
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f7fe ff2b 	bl	80037be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496c:	4b23      	ldr	r3, [pc, #140]	; (80049fc <xTaskResumeAll+0x12c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004976:	4b22      	ldr	r3, [pc, #136]	; (8004a00 <xTaskResumeAll+0x130>)
 8004978:	2201      	movs	r2, #1
 800497a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800497c:	4b1c      	ldr	r3, [pc, #112]	; (80049f0 <xTaskResumeAll+0x120>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1cb      	bne.n	800491c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800498a:	f000 fb61 	bl	8005050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800498e:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <xTaskResumeAll+0x134>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d010      	beq.n	80049bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800499a:	f000 f845 	bl	8004a28 <xTaskIncrementTick>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80049a4:	4b16      	ldr	r3, [pc, #88]	; (8004a00 <xTaskResumeAll+0x130>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f1      	bne.n	800499a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80049b6:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <xTaskResumeAll+0x134>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049bc:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <xTaskResumeAll+0x130>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049c4:	2301      	movs	r3, #1
 80049c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <xTaskResumeAll+0x138>)
 80049ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049d8:	f001 f870 	bl	8005abc <vPortExitCritical>

	return xAlreadyYielded;
 80049dc:	68bb      	ldr	r3, [r7, #8]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000e08 	.word	0x20000e08
 80049ec:	20000de0 	.word	0x20000de0
 80049f0:	20000da0 	.word	0x20000da0
 80049f4:	20000de8 	.word	0x20000de8
 80049f8:	20000910 	.word	0x20000910
 80049fc:	2000090c 	.word	0x2000090c
 8004a00:	20000df4 	.word	0x20000df4
 8004a04:	20000df0 	.word	0x20000df0
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a12:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <xTaskGetTickCount+0x18>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a18:	687b      	ldr	r3, [r7, #4]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr
 8004a24:	20000de4 	.word	0x20000de4

08004a28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a32:	4b51      	ldr	r3, [pc, #324]	; (8004b78 <xTaskIncrementTick+0x150>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f040 808e 	bne.w	8004b58 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a3c:	4b4f      	ldr	r3, [pc, #316]	; (8004b7c <xTaskIncrementTick+0x154>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a44:	4a4d      	ldr	r2, [pc, #308]	; (8004b7c <xTaskIncrementTick+0x154>)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d120      	bne.n	8004a92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a50:	4b4b      	ldr	r3, [pc, #300]	; (8004b80 <xTaskIncrementTick+0x158>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <xTaskIncrementTick+0x48>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	603b      	str	r3, [r7, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <xTaskIncrementTick+0x46>
 8004a70:	4b43      	ldr	r3, [pc, #268]	; (8004b80 <xTaskIncrementTick+0x158>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	4b43      	ldr	r3, [pc, #268]	; (8004b84 <xTaskIncrementTick+0x15c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a41      	ldr	r2, [pc, #260]	; (8004b80 <xTaskIncrementTick+0x158>)
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	4a41      	ldr	r2, [pc, #260]	; (8004b84 <xTaskIncrementTick+0x15c>)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	4b40      	ldr	r3, [pc, #256]	; (8004b88 <xTaskIncrementTick+0x160>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	4a3f      	ldr	r2, [pc, #252]	; (8004b88 <xTaskIncrementTick+0x160>)
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	f000 fadf 	bl	8005050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a92:	4b3e      	ldr	r3, [pc, #248]	; (8004b8c <xTaskIncrementTick+0x164>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d34e      	bcc.n	8004b3a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a9c:	4b38      	ldr	r3, [pc, #224]	; (8004b80 <xTaskIncrementTick+0x158>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <xTaskIncrementTick+0x82>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <xTaskIncrementTick+0x84>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d004      	beq.n	8004aba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ab0:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <xTaskIncrementTick+0x164>)
 8004ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab6:	601a      	str	r2, [r3, #0]
					break;
 8004ab8:	e03f      	b.n	8004b3a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004aba:	4b31      	ldr	r3, [pc, #196]	; (8004b80 <xTaskIncrementTick+0x158>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d203      	bcs.n	8004ada <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ad2:	4a2e      	ldr	r2, [pc, #184]	; (8004b8c <xTaskIncrementTick+0x164>)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6013      	str	r3, [r2, #0]
						break;
 8004ad8:	e02f      	b.n	8004b3a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe fec8 	bl	8003874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	3318      	adds	r3, #24
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fe febf 	bl	8003874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afa:	4b25      	ldr	r3, [pc, #148]	; (8004b90 <xTaskIncrementTick+0x168>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d903      	bls.n	8004b0a <xTaskIncrementTick+0xe2>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	4a22      	ldr	r2, [pc, #136]	; (8004b90 <xTaskIncrementTick+0x168>)
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4a1f      	ldr	r2, [pc, #124]	; (8004b94 <xTaskIncrementTick+0x16c>)
 8004b18:	441a      	add	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f7fe fe4c 	bl	80037be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2a:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <xTaskIncrementTick+0x170>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d3b3      	bcc.n	8004a9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b34:	2301      	movs	r3, #1
 8004b36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b38:	e7b0      	b.n	8004a9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b3a:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <xTaskIncrementTick+0x170>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b40:	4914      	ldr	r1, [pc, #80]	; (8004b94 <xTaskIncrementTick+0x16c>)
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d907      	bls.n	8004b62 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e004      	b.n	8004b62 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b58:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <xTaskIncrementTick+0x174>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	4a0f      	ldr	r2, [pc, #60]	; (8004b9c <xTaskIncrementTick+0x174>)
 8004b60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004b62:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <xTaskIncrementTick+0x178>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b6e:	697b      	ldr	r3, [r7, #20]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20000e08 	.word	0x20000e08
 8004b7c:	20000de4 	.word	0x20000de4
 8004b80:	20000d98 	.word	0x20000d98
 8004b84:	20000d9c 	.word	0x20000d9c
 8004b88:	20000df8 	.word	0x20000df8
 8004b8c:	20000e00 	.word	0x20000e00
 8004b90:	20000de8 	.word	0x20000de8
 8004b94:	20000910 	.word	0x20000910
 8004b98:	2000090c 	.word	0x2000090c
 8004b9c:	20000df0 	.word	0x20000df0
 8004ba0:	20000df4 	.word	0x20000df4

08004ba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004baa:	4b2a      	ldr	r3, [pc, #168]	; (8004c54 <vTaskSwitchContext+0xb0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bb2:	4b29      	ldr	r3, [pc, #164]	; (8004c58 <vTaskSwitchContext+0xb4>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004bb8:	e046      	b.n	8004c48 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004bba:	4b27      	ldr	r3, [pc, #156]	; (8004c58 <vTaskSwitchContext+0xb4>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004bc0:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <vTaskSwitchContext+0xb8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	e010      	b.n	8004bea <vTaskSwitchContext+0x46>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	607b      	str	r3, [r7, #4]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <vTaskSwitchContext+0x3e>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	491d      	ldr	r1, [pc, #116]	; (8004c60 <vTaskSwitchContext+0xbc>)
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0e4      	beq.n	8004bc8 <vTaskSwitchContext+0x24>
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <vTaskSwitchContext+0xbc>)
 8004c0a:	4413      	add	r3, r2
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	605a      	str	r2, [r3, #4]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	3308      	adds	r3, #8
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d104      	bne.n	8004c2e <vTaskSwitchContext+0x8a>
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	605a      	str	r2, [r3, #4]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4a0b      	ldr	r2, [pc, #44]	; (8004c64 <vTaskSwitchContext+0xc0>)
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <vTaskSwitchContext+0xb8>)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <vTaskSwitchContext+0xc0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3354      	adds	r3, #84	; 0x54
 8004c44:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <vTaskSwitchContext+0xc4>)
 8004c46:	6013      	str	r3, [r2, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000e08 	.word	0x20000e08
 8004c58:	20000df4 	.word	0x20000df4
 8004c5c:	20000de8 	.word	0x20000de8
 8004c60:	20000910 	.word	0x20000910
 8004c64:	2000090c 	.word	0x2000090c
 8004c68:	20000068 	.word	0x20000068

08004c6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	60fb      	str	r3, [r7, #12]
}
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c92:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <vTaskPlaceOnEventList+0x44>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3318      	adds	r3, #24
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fe fdb2 	bl	8003804 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	6838      	ldr	r0, [r7, #0]
 8004ca4:	f000 fa84 	bl	80051b0 <prvAddCurrentTaskToDelayedList>
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	2000090c 	.word	0x2000090c

08004cb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	617b      	str	r3, [r7, #20]
}
 8004cd8:	bf00      	nop
 8004cda:	e7fe      	b.n	8004cda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <vTaskPlaceOnEventListRestricted+0x54>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3318      	adds	r3, #24
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f7fe fd6a 	bl	80037be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	68b8      	ldr	r0, [r7, #8]
 8004cfa:	f000 fa59 	bl	80051b0 <prvAddCurrentTaskToDelayedList>
	}
 8004cfe:	bf00      	nop
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	2000090c 	.word	0x2000090c

08004d0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	60fb      	str	r3, [r7, #12]
}
 8004d34:	bf00      	nop
 8004d36:	e7fe      	b.n	8004d36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	3318      	adds	r3, #24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe fd99 	bl	8003874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d42:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <xTaskRemoveFromEventList+0xb0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d11d      	bne.n	8004d86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fd90 	bl	8003874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d58:	4b19      	ldr	r3, [pc, #100]	; (8004dc0 <xTaskRemoveFromEventList+0xb4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d903      	bls.n	8004d68 <xTaskRemoveFromEventList+0x5c>
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	4a16      	ldr	r2, [pc, #88]	; (8004dc0 <xTaskRemoveFromEventList+0xb4>)
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <xTaskRemoveFromEventList+0xb8>)
 8004d76:	441a      	add	r2, r3
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f7fe fd1d 	bl	80037be <vListInsertEnd>
 8004d84:	e005      	b.n	8004d92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	3318      	adds	r3, #24
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	480e      	ldr	r0, [pc, #56]	; (8004dc8 <xTaskRemoveFromEventList+0xbc>)
 8004d8e:	f7fe fd16 	bl	80037be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d96:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <xTaskRemoveFromEventList+0xc0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d905      	bls.n	8004dac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004da0:	2301      	movs	r3, #1
 8004da2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <xTaskRemoveFromEventList+0xc4>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e001      	b.n	8004db0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004db0:	697b      	ldr	r3, [r7, #20]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000e08 	.word	0x20000e08
 8004dc0:	20000de8 	.word	0x20000de8
 8004dc4:	20000910 	.word	0x20000910
 8004dc8:	20000da0 	.word	0x20000da0
 8004dcc:	2000090c 	.word	0x2000090c
 8004dd0:	20000df4 	.word	0x20000df4

08004dd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ddc:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <vTaskInternalSetTimeOutState+0x24>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004de4:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <vTaskInternalSetTimeOutState+0x28>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	605a      	str	r2, [r3, #4]
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000df8 	.word	0x20000df8
 8004dfc:	20000de4 	.word	0x20000de4

08004e00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10a      	bne.n	8004e26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10a      	bne.n	8004e42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004e42:	f000 fe0b 	bl	8005a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e46:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <xTaskCheckForTimeOut+0xbc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5e:	d102      	bne.n	8004e66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e023      	b.n	8004eae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <xTaskCheckForTimeOut+0xc0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d007      	beq.n	8004e82 <xTaskCheckForTimeOut+0x82>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d302      	bcc.n	8004e82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	e015      	b.n	8004eae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d20b      	bcs.n	8004ea4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	1ad2      	subs	r2, r2, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ff9b 	bl	8004dd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	e004      	b.n	8004eae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004eae:	f000 fe05 	bl	8005abc <vPortExitCritical>

	return xReturn;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000de4 	.word	0x20000de4
 8004ec0:	20000df8 	.word	0x20000df8

08004ec4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <vTaskMissedYield+0x14>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000df4 	.word	0x20000df4

08004edc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ee4:	f000 f852 	bl	8004f8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <prvIdleTask+0x28>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d9f9      	bls.n	8004ee4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <prvIdleTask+0x2c>)
 8004ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f00:	e7f0      	b.n	8004ee4 <prvIdleTask+0x8>
 8004f02:	bf00      	nop
 8004f04:	20000910 	.word	0x20000910
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	e00c      	b.n	8004f32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4a12      	ldr	r2, [pc, #72]	; (8004f6c <prvInitialiseTaskLists+0x60>)
 8004f24:	4413      	add	r3, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe fc1e 	bl	8003768 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	607b      	str	r3, [r7, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b37      	cmp	r3, #55	; 0x37
 8004f36:	d9ef      	bls.n	8004f18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f38:	480d      	ldr	r0, [pc, #52]	; (8004f70 <prvInitialiseTaskLists+0x64>)
 8004f3a:	f7fe fc15 	bl	8003768 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f3e:	480d      	ldr	r0, [pc, #52]	; (8004f74 <prvInitialiseTaskLists+0x68>)
 8004f40:	f7fe fc12 	bl	8003768 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f44:	480c      	ldr	r0, [pc, #48]	; (8004f78 <prvInitialiseTaskLists+0x6c>)
 8004f46:	f7fe fc0f 	bl	8003768 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f4a:	480c      	ldr	r0, [pc, #48]	; (8004f7c <prvInitialiseTaskLists+0x70>)
 8004f4c:	f7fe fc0c 	bl	8003768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f50:	480b      	ldr	r0, [pc, #44]	; (8004f80 <prvInitialiseTaskLists+0x74>)
 8004f52:	f7fe fc09 	bl	8003768 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <prvInitialiseTaskLists+0x78>)
 8004f58:	4a05      	ldr	r2, [pc, #20]	; (8004f70 <prvInitialiseTaskLists+0x64>)
 8004f5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <prvInitialiseTaskLists+0x7c>)
 8004f5e:	4a05      	ldr	r2, [pc, #20]	; (8004f74 <prvInitialiseTaskLists+0x68>)
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000910 	.word	0x20000910
 8004f70:	20000d70 	.word	0x20000d70
 8004f74:	20000d84 	.word	0x20000d84
 8004f78:	20000da0 	.word	0x20000da0
 8004f7c:	20000db4 	.word	0x20000db4
 8004f80:	20000dcc 	.word	0x20000dcc
 8004f84:	20000d98 	.word	0x20000d98
 8004f88:	20000d9c 	.word	0x20000d9c

08004f8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f92:	e019      	b.n	8004fc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f94:	f000 fd62 	bl	8005a5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004f98:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <prvCheckTasksWaitingTermination+0x50>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fe fc65 	bl	8003874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <prvCheckTasksWaitingTermination+0x54>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	4a0b      	ldr	r2, [pc, #44]	; (8004fe0 <prvCheckTasksWaitingTermination+0x54>)
 8004fb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <prvCheckTasksWaitingTermination+0x58>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	4a0a      	ldr	r2, [pc, #40]	; (8004fe4 <prvCheckTasksWaitingTermination+0x58>)
 8004fbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fbe:	f000 fd7d 	bl	8005abc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f810 	bl	8004fe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <prvCheckTasksWaitingTermination+0x58>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e1      	bne.n	8004f94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000db4 	.word	0x20000db4
 8004fe0:	20000de0 	.word	0x20000de0
 8004fe4:	20000dc8 	.word	0x20000dc8

08004fe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3354      	adds	r3, #84	; 0x54
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 f939 	bl	800626c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005000:	2b00      	cmp	r3, #0
 8005002:	d108      	bne.n	8005016 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	4618      	mov	r0, r3
 800500a:	f000 feeb 	bl	8005de4 <vPortFree>
				vPortFree( pxTCB );
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fee8 	bl	8005de4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005014:	e018      	b.n	8005048 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800501c:	2b01      	cmp	r3, #1
 800501e:	d103      	bne.n	8005028 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fedf 	bl	8005de4 <vPortFree>
	}
 8005026:	e00f      	b.n	8005048 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800502e:	2b02      	cmp	r3, #2
 8005030:	d00a      	beq.n	8005048 <prvDeleteTCB+0x60>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60fb      	str	r3, [r7, #12]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <prvDeleteTCB+0x5e>
	}
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005056:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <prvResetNextTaskUnblockTime+0x40>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <prvResetNextTaskUnblockTime+0x14>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <prvResetNextTaskUnblockTime+0x16>
 8005064:	2300      	movs	r3, #0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d004      	beq.n	8005074 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <prvResetNextTaskUnblockTime+0x44>)
 800506c:	f04f 32ff 	mov.w	r2, #4294967295
 8005070:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005072:	e008      	b.n	8005086 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005074:	4b06      	ldr	r3, [pc, #24]	; (8005090 <prvResetNextTaskUnblockTime+0x40>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4a04      	ldr	r2, [pc, #16]	; (8005094 <prvResetNextTaskUnblockTime+0x44>)
 8005084:	6013      	str	r3, [r2, #0]
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	20000d98 	.word	0x20000d98
 8005094:	20000e00 	.word	0x20000e00

08005098 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800509e:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <xTaskGetSchedulerState+0x34>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d102      	bne.n	80050ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050a6:	2301      	movs	r3, #1
 80050a8:	607b      	str	r3, [r7, #4]
 80050aa:	e008      	b.n	80050be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ac:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <xTaskGetSchedulerState+0x38>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d102      	bne.n	80050ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050b4:	2302      	movs	r3, #2
 80050b6:	607b      	str	r3, [r7, #4]
 80050b8:	e001      	b.n	80050be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050ba:	2300      	movs	r3, #0
 80050bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050be:	687b      	ldr	r3, [r7, #4]
	}
 80050c0:	4618      	mov	r0, r3
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	20000dec 	.word	0x20000dec
 80050d0:	20000e08 	.word	0x20000e08

080050d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d056      	beq.n	8005198 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050ea:	4b2e      	ldr	r3, [pc, #184]	; (80051a4 <xTaskPriorityDisinherit+0xd0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d00a      	beq.n	800510a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	60fb      	str	r3, [r7, #12]
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10a      	bne.n	8005128 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005116:	f383 8811 	msr	BASEPRI, r3
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	60bb      	str	r3, [r7, #8]
}
 8005124:	bf00      	nop
 8005126:	e7fe      	b.n	8005126 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512c:	1e5a      	subs	r2, r3, #1
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513a:	429a      	cmp	r2, r3
 800513c:	d02c      	beq.n	8005198 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005142:	2b00      	cmp	r3, #0
 8005144:	d128      	bne.n	8005198 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	3304      	adds	r3, #4
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe fb92 	bl	8003874 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <xTaskPriorityDisinherit+0xd4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d903      	bls.n	8005178 <xTaskPriorityDisinherit+0xa4>
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	4a0c      	ldr	r2, [pc, #48]	; (80051a8 <xTaskPriorityDisinherit+0xd4>)
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4a09      	ldr	r2, [pc, #36]	; (80051ac <xTaskPriorityDisinherit+0xd8>)
 8005186:	441a      	add	r2, r3
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7fe fb15 	bl	80037be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005194:	2301      	movs	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005198:	697b      	ldr	r3, [r7, #20]
	}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	2000090c 	.word	0x2000090c
 80051a8:	20000de8 	.word	0x20000de8
 80051ac:	20000910 	.word	0x20000910

080051b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051ba:	4b21      	ldr	r3, [pc, #132]	; (8005240 <prvAddCurrentTaskToDelayedList+0x90>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051c0:	4b20      	ldr	r3, [pc, #128]	; (8005244 <prvAddCurrentTaskToDelayedList+0x94>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fb54 	bl	8003874 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d2:	d10a      	bne.n	80051ea <prvAddCurrentTaskToDelayedList+0x3a>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d007      	beq.n	80051ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051da:	4b1a      	ldr	r3, [pc, #104]	; (8005244 <prvAddCurrentTaskToDelayedList+0x94>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3304      	adds	r3, #4
 80051e0:	4619      	mov	r1, r3
 80051e2:	4819      	ldr	r0, [pc, #100]	; (8005248 <prvAddCurrentTaskToDelayedList+0x98>)
 80051e4:	f7fe faeb 	bl	80037be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051e8:	e026      	b.n	8005238 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4413      	add	r3, r2
 80051f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051f2:	4b14      	ldr	r3, [pc, #80]	; (8005244 <prvAddCurrentTaskToDelayedList+0x94>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d209      	bcs.n	8005216 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <prvAddCurrentTaskToDelayedList+0x94>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3304      	adds	r3, #4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f7fe faf8 	bl	8003804 <vListInsert>
}
 8005214:	e010      	b.n	8005238 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005216:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b0a      	ldr	r3, [pc, #40]	; (8005244 <prvAddCurrentTaskToDelayedList+0x94>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3304      	adds	r3, #4
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f7fe faee 	bl	8003804 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <prvAddCurrentTaskToDelayedList+0xa4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	429a      	cmp	r2, r3
 8005230:	d202      	bcs.n	8005238 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005232:	4a08      	ldr	r2, [pc, #32]	; (8005254 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	6013      	str	r3, [r2, #0]
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000de4 	.word	0x20000de4
 8005244:	2000090c 	.word	0x2000090c
 8005248:	20000dcc 	.word	0x20000dcc
 800524c:	20000d9c 	.word	0x20000d9c
 8005250:	20000d98 	.word	0x20000d98
 8005254:	20000e00 	.word	0x20000e00

08005258 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005262:	f000 facb 	bl	80057fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005266:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <xTimerCreateTimerTask+0x80>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d021      	beq.n	80052b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005276:	1d3a      	adds	r2, r7, #4
 8005278:	f107 0108 	add.w	r1, r7, #8
 800527c:	f107 030c 	add.w	r3, r7, #12
 8005280:	4618      	mov	r0, r3
 8005282:	f7fe fa57 	bl	8003734 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	9202      	str	r2, [sp, #8]
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	2302      	movs	r3, #2
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	2300      	movs	r3, #0
 8005296:	460a      	mov	r2, r1
 8005298:	4910      	ldr	r1, [pc, #64]	; (80052dc <xTimerCreateTimerTask+0x84>)
 800529a:	4811      	ldr	r0, [pc, #68]	; (80052e0 <xTimerCreateTimerTask+0x88>)
 800529c:	f7ff f8b6 	bl	800440c <xTaskCreateStatic>
 80052a0:	4603      	mov	r3, r0
 80052a2:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <xTimerCreateTimerTask+0x8c>)
 80052a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80052a6:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <xTimerCreateTimerTask+0x8c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80052ae:	2301      	movs	r3, #1
 80052b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	613b      	str	r3, [r7, #16]
}
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80052ce:	697b      	ldr	r3, [r7, #20]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000e3c 	.word	0x20000e3c
 80052dc:	08007028 	.word	0x08007028
 80052e0:	08005405 	.word	0x08005405
 80052e4:	20000e40 	.word	0x20000e40

080052e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	; 0x28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	623b      	str	r3, [r7, #32]
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005316:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <xTimerGenericCommand+0x98>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02a      	beq.n	8005374 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b05      	cmp	r3, #5
 800532e:	dc18      	bgt.n	8005362 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005330:	f7ff feb2 	bl	8005098 <xTaskGetSchedulerState>
 8005334:	4603      	mov	r3, r0
 8005336:	2b02      	cmp	r3, #2
 8005338:	d109      	bne.n	800534e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800533a:	4b11      	ldr	r3, [pc, #68]	; (8005380 <xTimerGenericCommand+0x98>)
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	f107 0110 	add.w	r1, r7, #16
 8005342:	2300      	movs	r3, #0
 8005344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005346:	f7fe fbff 	bl	8003b48 <xQueueGenericSend>
 800534a:	6278      	str	r0, [r7, #36]	; 0x24
 800534c:	e012      	b.n	8005374 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800534e:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <xTimerGenericCommand+0x98>)
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	f107 0110 	add.w	r1, r7, #16
 8005356:	2300      	movs	r3, #0
 8005358:	2200      	movs	r2, #0
 800535a:	f7fe fbf5 	bl	8003b48 <xQueueGenericSend>
 800535e:	6278      	str	r0, [r7, #36]	; 0x24
 8005360:	e008      	b.n	8005374 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005362:	4b07      	ldr	r3, [pc, #28]	; (8005380 <xTimerGenericCommand+0x98>)
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	f107 0110 	add.w	r1, r7, #16
 800536a:	2300      	movs	r3, #0
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	f7fe fce9 	bl	8003d44 <xQueueGenericSendFromISR>
 8005372:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005376:	4618      	mov	r0, r3
 8005378:	3728      	adds	r7, #40	; 0x28
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20000e3c 	.word	0x20000e3c

08005384 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af02      	add	r7, sp, #8
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800538e:	4b1c      	ldr	r3, [pc, #112]	; (8005400 <prvProcessExpiredTimer+0x7c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	3304      	adds	r3, #4
 800539c:	4618      	mov	r0, r3
 800539e:	f7fe fa69 	bl	8003874 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d122      	bne.n	80053f0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	18d1      	adds	r1, r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	6978      	ldr	r0, [r7, #20]
 80053b8:	f000 f8c8 	bl	800554c <prvInsertTimerInActiveList>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d016      	beq.n	80053f0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053c2:	2300      	movs	r3, #0
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	2300      	movs	r3, #0
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	2100      	movs	r1, #0
 80053cc:	6978      	ldr	r0, [r7, #20]
 80053ce:	f7ff ff8b 	bl	80052e8 <xTimerGenericCommand>
 80053d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	60fb      	str	r3, [r7, #12]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	6978      	ldr	r0, [r7, #20]
 80053f6:	4798      	blx	r3
}
 80053f8:	bf00      	nop
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20000e34 	.word	0x20000e34

08005404 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800540c:	f107 0308 	add.w	r3, r7, #8
 8005410:	4618      	mov	r0, r3
 8005412:	f000 f857 	bl	80054c4 <prvGetNextExpireTime>
 8005416:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4619      	mov	r1, r3
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f803 	bl	8005428 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005422:	f000 f8d5 	bl	80055d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005426:	e7f1      	b.n	800540c <prvTimerTask+0x8>

08005428 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005432:	f7ff fa3f 	bl	80048b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005436:	f107 0308 	add.w	r3, r7, #8
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f866 	bl	800550c <prvSampleTimeNow>
 8005440:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d130      	bne.n	80054aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <prvProcessTimerOrBlockTask+0x3c>
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	429a      	cmp	r2, r3
 8005454:	d806      	bhi.n	8005464 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005456:	f7ff fa3b 	bl	80048d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800545a:	68f9      	ldr	r1, [r7, #12]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff ff91 	bl	8005384 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005462:	e024      	b.n	80054ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d008      	beq.n	800547c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800546a:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <prvProcessTimerOrBlockTask+0x90>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800547c:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <prvProcessTimerOrBlockTask+0x94>)
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	4619      	mov	r1, r3
 800548a:	f7fe ff8b 	bl	80043a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800548e:	f7ff fa1f 	bl	80048d0 <xTaskResumeAll>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10a      	bne.n	80054ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005498:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <prvProcessTimerOrBlockTask+0x98>)
 800549a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	f3bf 8f6f 	isb	sy
}
 80054a8:	e001      	b.n	80054ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80054aa:	f7ff fa11 	bl	80048d0 <xTaskResumeAll>
}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000e38 	.word	0x20000e38
 80054bc:	20000e3c 	.word	0x20000e3c
 80054c0:	e000ed04 	.word	0xe000ed04

080054c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054cc:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <prvGetNextExpireTime+0x44>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bf0c      	ite	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	2300      	movne	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d105      	bne.n	80054f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054ea:	4b07      	ldr	r3, [pc, #28]	; (8005508 <prvGetNextExpireTime+0x44>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	e001      	b.n	80054fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80054fa:	68fb      	ldr	r3, [r7, #12]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20000e34 	.word	0x20000e34

0800550c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005514:	f7ff fa7a 	bl	8004a0c <xTaskGetTickCount>
 8005518:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <prvSampleTimeNow+0x3c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	429a      	cmp	r2, r3
 8005522:	d205      	bcs.n	8005530 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005524:	f000 f908 	bl	8005738 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e002      	b.n	8005536 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005536:	4a04      	ldr	r2, [pc, #16]	; (8005548 <prvSampleTimeNow+0x3c>)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800553c:	68fb      	ldr	r3, [r7, #12]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000e44 	.word	0x20000e44

0800554c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	429a      	cmp	r2, r3
 8005570:	d812      	bhi.n	8005598 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	1ad2      	subs	r2, r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	429a      	cmp	r2, r3
 800557e:	d302      	bcc.n	8005586 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005580:	2301      	movs	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e01b      	b.n	80055be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <prvInsertTimerInActiveList+0x7c>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3304      	adds	r3, #4
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f7fe f937 	bl	8003804 <vListInsert>
 8005596:	e012      	b.n	80055be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d206      	bcs.n	80055ae <prvInsertTimerInActiveList+0x62>
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d302      	bcc.n	80055ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e007      	b.n	80055be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <prvInsertTimerInActiveList+0x80>)
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f7fe f923 	bl	8003804 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80055be:	697b      	ldr	r3, [r7, #20]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	20000e38 	.word	0x20000e38
 80055cc:	20000e34 	.word	0x20000e34

080055d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08e      	sub	sp, #56	; 0x38
 80055d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055d6:	e09d      	b.n	8005714 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	da18      	bge.n	8005610 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80055de:	1d3b      	adds	r3, r7, #4
 80055e0:	3304      	adds	r3, #4
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	61fb      	str	r3, [r7, #28]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005606:	6850      	ldr	r0, [r2, #4]
 8005608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560a:	6892      	ldr	r2, [r2, #8]
 800560c:	4611      	mov	r1, r2
 800560e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	db7e      	blt.n	8005714 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	3304      	adds	r3, #4
 8005626:	4618      	mov	r0, r3
 8005628:	f7fe f924 	bl	8003874 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800562c:	463b      	mov	r3, r7
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff ff6c 	bl	800550c <prvSampleTimeNow>
 8005634:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b09      	cmp	r3, #9
 800563a:	d86a      	bhi.n	8005712 <prvProcessReceivedCommands+0x142>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <prvProcessReceivedCommands+0x74>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	0800566d 	.word	0x0800566d
 8005648:	0800566d 	.word	0x0800566d
 800564c:	0800566d 	.word	0x0800566d
 8005650:	08005715 	.word	0x08005715
 8005654:	080056c9 	.word	0x080056c9
 8005658:	08005701 	.word	0x08005701
 800565c:	0800566d 	.word	0x0800566d
 8005660:	0800566d 	.word	0x0800566d
 8005664:	08005715 	.word	0x08005715
 8005668:	080056c9 	.word	0x080056c9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	18d1      	adds	r1, r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800567a:	f7ff ff67 	bl	800554c <prvInsertTimerInActiveList>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d047      	beq.n	8005714 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800568a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d13f      	bne.n	8005714 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	441a      	add	r2, r3
 800569c:	2300      	movs	r3, #0
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	2300      	movs	r3, #0
 80056a2:	2100      	movs	r1, #0
 80056a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a6:	f7ff fe1f 	bl	80052e8 <xTimerGenericCommand>
 80056aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d130      	bne.n	8005714 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	61bb      	str	r3, [r7, #24]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	617b      	str	r3, [r7, #20]
}
 80056e8:	bf00      	nop
 80056ea:	e7fe      	b.n	80056ea <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	699a      	ldr	r2, [r3, #24]
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	18d1      	adds	r1, r2, r3
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056fa:	f7ff ff27 	bl	800554c <prvInsertTimerInActiveList>
					break;
 80056fe:	e009      	b.n	8005714 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005706:	2b00      	cmp	r3, #0
 8005708:	d104      	bne.n	8005714 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800570a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800570c:	f000 fb6a 	bl	8005de4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005710:	e000      	b.n	8005714 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8005712:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005714:	4b07      	ldr	r3, [pc, #28]	; (8005734 <prvProcessReceivedCommands+0x164>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	1d39      	adds	r1, r7, #4
 800571a:	2200      	movs	r2, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f7fe fba9 	bl	8003e74 <xQueueReceive>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	f47f af57 	bne.w	80055d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	3730      	adds	r7, #48	; 0x30
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000e3c 	.word	0x20000e3c

08005738 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800573e:	e045      	b.n	80057cc <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005740:	4b2c      	ldr	r3, [pc, #176]	; (80057f4 <prvSwitchTimerLists+0xbc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800574a:	4b2a      	ldr	r3, [pc, #168]	; (80057f4 <prvSwitchTimerLists+0xbc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3304      	adds	r3, #4
 8005758:	4618      	mov	r0, r3
 800575a:	f7fe f88b 	bl	8003874 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d12e      	bne.n	80057cc <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4413      	add	r3, r2
 8005776:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	429a      	cmp	r2, r3
 800577e:	d90e      	bls.n	800579e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800578c:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <prvSwitchTimerLists+0xbc>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3304      	adds	r3, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f7fe f834 	bl	8003804 <vListInsert>
 800579c:	e016      	b.n	80057cc <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800579e:	2300      	movs	r3, #0
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	2300      	movs	r3, #0
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	2100      	movs	r1, #0
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff fd9d 	bl	80052e8 <xTimerGenericCommand>
 80057ae:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <prvSwitchTimerLists+0x94>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	603b      	str	r3, [r7, #0]
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057cc:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <prvSwitchTimerLists+0xbc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1b4      	bne.n	8005740 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80057d6:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <prvSwitchTimerLists+0xbc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80057dc:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <prvSwitchTimerLists+0xc0>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a04      	ldr	r2, [pc, #16]	; (80057f4 <prvSwitchTimerLists+0xbc>)
 80057e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057e4:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <prvSwitchTimerLists+0xc0>)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	6013      	str	r3, [r2, #0]
}
 80057ea:	bf00      	nop
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000e34 	.word	0x20000e34
 80057f8:	20000e38 	.word	0x20000e38

080057fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005802:	f000 f92b 	bl	8005a5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005806:	4b15      	ldr	r3, [pc, #84]	; (800585c <prvCheckForValidListAndQueue+0x60>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d120      	bne.n	8005850 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800580e:	4814      	ldr	r0, [pc, #80]	; (8005860 <prvCheckForValidListAndQueue+0x64>)
 8005810:	f7fd ffaa 	bl	8003768 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005814:	4813      	ldr	r0, [pc, #76]	; (8005864 <prvCheckForValidListAndQueue+0x68>)
 8005816:	f7fd ffa7 	bl	8003768 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800581a:	4b13      	ldr	r3, [pc, #76]	; (8005868 <prvCheckForValidListAndQueue+0x6c>)
 800581c:	4a10      	ldr	r2, [pc, #64]	; (8005860 <prvCheckForValidListAndQueue+0x64>)
 800581e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005820:	4b12      	ldr	r3, [pc, #72]	; (800586c <prvCheckForValidListAndQueue+0x70>)
 8005822:	4a10      	ldr	r2, [pc, #64]	; (8005864 <prvCheckForValidListAndQueue+0x68>)
 8005824:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005826:	2300      	movs	r3, #0
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	4b11      	ldr	r3, [pc, #68]	; (8005870 <prvCheckForValidListAndQueue+0x74>)
 800582c:	4a11      	ldr	r2, [pc, #68]	; (8005874 <prvCheckForValidListAndQueue+0x78>)
 800582e:	2110      	movs	r1, #16
 8005830:	200a      	movs	r0, #10
 8005832:	f7fe f8b1 	bl	8003998 <xQueueGenericCreateStatic>
 8005836:	4603      	mov	r3, r0
 8005838:	4a08      	ldr	r2, [pc, #32]	; (800585c <prvCheckForValidListAndQueue+0x60>)
 800583a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <prvCheckForValidListAndQueue+0x60>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <prvCheckForValidListAndQueue+0x60>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	490b      	ldr	r1, [pc, #44]	; (8005878 <prvCheckForValidListAndQueue+0x7c>)
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe fd82 	bl	8004354 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005850:	f000 f934 	bl	8005abc <vPortExitCritical>
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000e3c 	.word	0x20000e3c
 8005860:	20000e0c 	.word	0x20000e0c
 8005864:	20000e20 	.word	0x20000e20
 8005868:	20000e34 	.word	0x20000e34
 800586c:	20000e38 	.word	0x20000e38
 8005870:	20000ee8 	.word	0x20000ee8
 8005874:	20000e48 	.word	0x20000e48
 8005878:	08007030 	.word	0x08007030

0800587c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	3b04      	subs	r3, #4
 800588c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3b04      	subs	r3, #4
 800589a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f023 0201 	bic.w	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3b04      	subs	r3, #4
 80058aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058ac:	4a08      	ldr	r2, [pc, #32]	; (80058d0 <pxPortInitialiseStack+0x54>)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3b14      	subs	r3, #20
 80058b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3b20      	subs	r3, #32
 80058c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058c4:	68fb      	ldr	r3, [r7, #12]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr
 80058d0:	080058d5 	.word	0x080058d5

080058d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80058da:	2300      	movs	r3, #0
 80058dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058de:	4b12      	ldr	r3, [pc, #72]	; (8005928 <prvTaskExitError+0x54>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e6:	d00a      	beq.n	80058fe <prvTaskExitError+0x2a>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	60fb      	str	r3, [r7, #12]
}
 80058fa:	bf00      	nop
 80058fc:	e7fe      	b.n	80058fc <prvTaskExitError+0x28>
	__asm volatile
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	f383 8811 	msr	BASEPRI, r3
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	f3bf 8f4f 	dsb	sy
 800590e:	60bb      	str	r3, [r7, #8]
}
 8005910:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005912:	bf00      	nop
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0fc      	beq.n	8005914 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	2000000c 	.word	0x2000000c
 800592c:	00000000 	.word	0x00000000

08005930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <pxCurrentTCBConst2>)
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	6808      	ldr	r0, [r1, #0]
 8005936:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800593a:	f380 8809 	msr	PSP, r0
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8811 	msr	BASEPRI, r0
 800594a:	f04e 0e0d 	orr.w	lr, lr, #13
 800594e:	4770      	bx	lr

08005950 <pxCurrentTCBConst2>:
 8005950:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005954:	bf00      	nop
 8005956:	bf00      	nop

08005958 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005958:	4806      	ldr	r0, [pc, #24]	; (8005974 <prvPortStartFirstTask+0x1c>)
 800595a:	6800      	ldr	r0, [r0, #0]
 800595c:	6800      	ldr	r0, [r0, #0]
 800595e:	f380 8808 	msr	MSP, r0
 8005962:	b662      	cpsie	i
 8005964:	b661      	cpsie	f
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	df00      	svc	0
 8005970:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005972:	bf00      	nop
 8005974:	e000ed08 	.word	0xe000ed08

08005978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800597e:	4b32      	ldr	r3, [pc, #200]	; (8005a48 <xPortStartScheduler+0xd0>)
 8005980:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	22ff      	movs	r2, #255	; 0xff
 800598e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	4b2a      	ldr	r3, [pc, #168]	; (8005a4c <xPortStartScheduler+0xd4>)
 80059a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059a6:	4b2a      	ldr	r3, [pc, #168]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059a8:	2207      	movs	r2, #7
 80059aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ac:	e009      	b.n	80059c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80059ae:	4b28      	ldr	r3, [pc, #160]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	4a26      	ldr	r2, [pc, #152]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ca:	2b80      	cmp	r3, #128	; 0x80
 80059cc:	d0ef      	beq.n	80059ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059ce:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1c3 0307 	rsb	r3, r3, #7
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d00a      	beq.n	80059f0 <xPortStartScheduler+0x78>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	60bb      	str	r3, [r7, #8]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059f0:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059fa:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <xPortStartScheduler+0xd8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a02:	4a13      	ldr	r2, [pc, #76]	; (8005a50 <xPortStartScheduler+0xd8>)
 8005a04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <xPortStartScheduler+0xdc>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a10      	ldr	r2, [pc, #64]	; (8005a54 <xPortStartScheduler+0xdc>)
 8005a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a1a:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <xPortStartScheduler+0xdc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a0d      	ldr	r2, [pc, #52]	; (8005a54 <xPortStartScheduler+0xdc>)
 8005a20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a26:	f000 f8b9 	bl	8005b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a2a:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <xPortStartScheduler+0xe0>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a30:	f7ff ff92 	bl	8005958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a34:	f7ff f8b6 	bl	8004ba4 <vTaskSwitchContext>
	prvTaskExitError();
 8005a38:	f7ff ff4c 	bl	80058d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	e000e400 	.word	0xe000e400
 8005a4c:	20000f38 	.word	0x20000f38
 8005a50:	20000f3c 	.word	0x20000f3c
 8005a54:	e000ed20 	.word	0xe000ed20
 8005a58:	2000000c 	.word	0x2000000c

08005a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	607b      	str	r3, [r7, #4]
}
 8005a74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a76:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <vPortEnterCritical+0x58>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	4a0d      	ldr	r2, [pc, #52]	; (8005ab4 <vPortEnterCritical+0x58>)
 8005a7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a80:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <vPortEnterCritical+0x58>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d10f      	bne.n	8005aa8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a88:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <vPortEnterCritical+0x5c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	603b      	str	r3, [r7, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	e7fe      	b.n	8005aa6 <vPortEnterCritical+0x4a>
	}
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bc80      	pop	{r7}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	2000000c 	.word	0x2000000c
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ac2:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <vPortExitCritical+0x4c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10a      	bne.n	8005ae0 <vPortExitCritical+0x24>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	607b      	str	r3, [r7, #4]
}
 8005adc:	bf00      	nop
 8005ade:	e7fe      	b.n	8005ade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ae0:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <vPortExitCritical+0x4c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	4a08      	ldr	r2, [pc, #32]	; (8005b08 <vPortExitCritical+0x4c>)
 8005ae8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005aea:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <vPortExitCritical+0x4c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d105      	bne.n	8005afe <vPortExitCritical+0x42>
 8005af2:	2300      	movs	r3, #0
 8005af4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	f383 8811 	msr	BASEPRI, r3
}
 8005afc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr
 8005b08:	2000000c 	.word	0x2000000c
 8005b0c:	00000000 	.word	0x00000000

08005b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b10:	f3ef 8009 	mrs	r0, PSP
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <pxCurrentTCBConst>)
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b20:	6010      	str	r0, [r2, #0]
 8005b22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005b26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b2a:	f380 8811 	msr	BASEPRI, r0
 8005b2e:	f7ff f839 	bl	8004ba4 <vTaskSwitchContext>
 8005b32:	f04f 0000 	mov.w	r0, #0
 8005b36:	f380 8811 	msr	BASEPRI, r0
 8005b3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	6808      	ldr	r0, [r1, #0]
 8005b42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b46:	f380 8809 	msr	PSP, r0
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	4770      	bx	lr

08005b50 <pxCurrentTCBConst>:
 8005b50:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop

08005b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	607b      	str	r3, [r7, #4]
}
 8005b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b72:	f7fe ff59 	bl	8004a28 <xTaskIncrementTick>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <SysTick_Handler+0x40>)
 8005b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	2300      	movs	r3, #0
 8005b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f383 8811 	msr	BASEPRI, r3
}
 8005b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <vPortSetupTimerInterrupt+0x30>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ba6:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <vPortSetupTimerInterrupt+0x34>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bac:	4b09      	ldr	r3, [pc, #36]	; (8005bd4 <vPortSetupTimerInterrupt+0x38>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <vPortSetupTimerInterrupt+0x3c>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	4a08      	ldr	r2, [pc, #32]	; (8005bdc <vPortSetupTimerInterrupt+0x40>)
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bbe:	4b03      	ldr	r3, [pc, #12]	; (8005bcc <vPortSetupTimerInterrupt+0x30>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr
 8005bcc:	e000e010 	.word	0xe000e010
 8005bd0:	e000e018 	.word	0xe000e018
 8005bd4:	20000000 	.word	0x20000000
 8005bd8:	10624dd3 	.word	0x10624dd3
 8005bdc:	e000e014 	.word	0xe000e014

08005be0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005be6:	f3ef 8305 	mrs	r3, IPSR
 8005bea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b0f      	cmp	r3, #15
 8005bf0:	d914      	bls.n	8005c1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bf2:	4a16      	ldr	r2, [pc, #88]	; (8005c4c <vPortValidateInterruptPriority+0x6c>)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bfc:	4b14      	ldr	r3, [pc, #80]	; (8005c50 <vPortValidateInterruptPriority+0x70>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	7afa      	ldrb	r2, [r7, #11]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d20a      	bcs.n	8005c1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	607b      	str	r3, [r7, #4]
}
 8005c18:	bf00      	nop
 8005c1a:	e7fe      	b.n	8005c1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c1c:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <vPortValidateInterruptPriority+0x74>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c24:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <vPortValidateInterruptPriority+0x78>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d90a      	bls.n	8005c42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	603b      	str	r3, [r7, #0]
}
 8005c3e:	bf00      	nop
 8005c40:	e7fe      	b.n	8005c40 <vPortValidateInterruptPriority+0x60>
	}
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bc80      	pop	{r7}
 8005c4a:	4770      	bx	lr
 8005c4c:	e000e3f0 	.word	0xe000e3f0
 8005c50:	20000f38 	.word	0x20000f38
 8005c54:	e000ed0c 	.word	0xe000ed0c
 8005c58:	20000f3c 	.word	0x20000f3c

08005c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08a      	sub	sp, #40	; 0x28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c68:	f7fe fe24 	bl	80048b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c6c:	4b58      	ldr	r3, [pc, #352]	; (8005dd0 <pvPortMalloc+0x174>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c74:	f000 f910 	bl	8005e98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c78:	4b56      	ldr	r3, [pc, #344]	; (8005dd4 <pvPortMalloc+0x178>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f040 808e 	bne.w	8005da2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01d      	beq.n	8005cc8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d014      	beq.n	8005cc8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f023 0307 	bic.w	r3, r3, #7
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <pvPortMalloc+0x6c>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	617b      	str	r3, [r7, #20]
}
 8005cc4:	bf00      	nop
 8005cc6:	e7fe      	b.n	8005cc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d069      	beq.n	8005da2 <pvPortMalloc+0x146>
 8005cce:	4b42      	ldr	r3, [pc, #264]	; (8005dd8 <pvPortMalloc+0x17c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d864      	bhi.n	8005da2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cd8:	4b40      	ldr	r3, [pc, #256]	; (8005ddc <pvPortMalloc+0x180>)
 8005cda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cdc:	4b3f      	ldr	r3, [pc, #252]	; (8005ddc <pvPortMalloc+0x180>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ce2:	e004      	b.n	8005cee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d903      	bls.n	8005d00 <pvPortMalloc+0xa4>
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1f1      	bne.n	8005ce4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d00:	4b33      	ldr	r3, [pc, #204]	; (8005dd0 <pvPortMalloc+0x174>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d04b      	beq.n	8005da2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2208      	movs	r2, #8
 8005d10:	4413      	add	r3, r2
 8005d12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	1ad2      	subs	r2, r2, r3
 8005d24:	2308      	movs	r3, #8
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d91f      	bls.n	8005d6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4413      	add	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <pvPortMalloc+0xf8>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	613b      	str	r3, [r7, #16]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	1ad2      	subs	r2, r2, r3
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d66:	69b8      	ldr	r0, [r7, #24]
 8005d68:	f000 f8f8 	bl	8005f5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <pvPortMalloc+0x17c>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <pvPortMalloc+0x17c>)
 8005d78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d7a:	4b17      	ldr	r3, [pc, #92]	; (8005dd8 <pvPortMalloc+0x17c>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <pvPortMalloc+0x184>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d203      	bcs.n	8005d8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <pvPortMalloc+0x17c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <pvPortMalloc+0x184>)
 8005d8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	4b10      	ldr	r3, [pc, #64]	; (8005dd4 <pvPortMalloc+0x178>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005da2:	f7fe fd95 	bl	80048d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <pvPortMalloc+0x16a>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	60fb      	str	r3, [r7, #12]
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <pvPortMalloc+0x168>
	return pvReturn;
 8005dc6:	69fb      	ldr	r3, [r7, #28]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3728      	adds	r7, #40	; 0x28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20001b48 	.word	0x20001b48
 8005dd4:	20001b54 	.word	0x20001b54
 8005dd8:	20001b4c 	.word	0x20001b4c
 8005ddc:	20001b40 	.word	0x20001b40
 8005de0:	20001b50 	.word	0x20001b50

08005de4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d048      	beq.n	8005e88 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005df6:	2308      	movs	r3, #8
 8005df8:	425b      	negs	r3, r3
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	4b21      	ldr	r3, [pc, #132]	; (8005e90 <vPortFree+0xac>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <vPortFree+0x44>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	60fb      	str	r3, [r7, #12]
}
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <vPortFree+0x62>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	60bb      	str	r3, [r7, #8]
}
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <vPortFree+0xac>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d019      	beq.n	8005e88 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d115      	bne.n	8005e88 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <vPortFree+0xac>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	43db      	mvns	r3, r3
 8005e66:	401a      	ands	r2, r3
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e6c:	f7fe fd22 	bl	80048b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <vPortFree+0xb0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4413      	add	r3, r2
 8005e7a:	4a06      	ldr	r2, [pc, #24]	; (8005e94 <vPortFree+0xb0>)
 8005e7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e7e:	6938      	ldr	r0, [r7, #16]
 8005e80:	f000 f86c 	bl	8005f5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e84:	f7fe fd24 	bl	80048d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e88:	bf00      	nop
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20001b54 	.word	0x20001b54
 8005e94:	20001b4c 	.word	0x20001b4c

08005e98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005ea2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ea4:	4b27      	ldr	r3, [pc, #156]	; (8005f44 <prvHeapInit+0xac>)
 8005ea6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00c      	beq.n	8005ecc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3307      	adds	r3, #7
 8005eb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0307 	bic.w	r3, r3, #7
 8005ebe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	4a1f      	ldr	r2, [pc, #124]	; (8005f44 <prvHeapInit+0xac>)
 8005ec8:	4413      	add	r3, r2
 8005eca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ed0:	4a1d      	ldr	r2, [pc, #116]	; (8005f48 <prvHeapInit+0xb0>)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ed6:	4b1c      	ldr	r3, [pc, #112]	; (8005f48 <prvHeapInit+0xb0>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1a9b      	subs	r3, r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0307 	bic.w	r3, r3, #7
 8005ef2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <prvHeapInit+0xb4>)
 8005ef8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005efa:	4b14      	ldr	r3, [pc, #80]	; (8005f4c <prvHeapInit+0xb4>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2200      	movs	r2, #0
 8005f00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <prvHeapInit+0xb4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	1ad2      	subs	r2, r2, r3
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f18:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <prvHeapInit+0xb4>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <prvHeapInit+0xb8>)
 8005f26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	4a09      	ldr	r2, [pc, #36]	; (8005f54 <prvHeapInit+0xbc>)
 8005f2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f30:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <prvHeapInit+0xc0>)
 8005f32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f36:	601a      	str	r2, [r3, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	20000f40 	.word	0x20000f40
 8005f48:	20001b40 	.word	0x20001b40
 8005f4c:	20001b48 	.word	0x20001b48
 8005f50:	20001b50 	.word	0x20001b50
 8005f54:	20001b4c 	.word	0x20001b4c
 8005f58:	20001b54 	.word	0x20001b54

08005f5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f64:	4b27      	ldr	r3, [pc, #156]	; (8006004 <prvInsertBlockIntoFreeList+0xa8>)
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e002      	b.n	8005f70 <prvInsertBlockIntoFreeList+0x14>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d8f7      	bhi.n	8005f6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	4413      	add	r3, r2
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d108      	bne.n	8005f9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	441a      	add	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	441a      	add	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d118      	bne.n	8005fe4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	4b14      	ldr	r3, [pc, #80]	; (8006008 <prvInsertBlockIntoFreeList+0xac>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d00d      	beq.n	8005fda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	441a      	add	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	e008      	b.n	8005fec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fda:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <prvInsertBlockIntoFreeList+0xac>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	e003      	b.n	8005fec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d002      	beq.n	8005ffa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ffa:	bf00      	nop
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr
 8006004:	20001b40 	.word	0x20001b40
 8006008:	20001b48 	.word	0x20001b48

0800600c <std>:
 800600c:	2300      	movs	r3, #0
 800600e:	b510      	push	{r4, lr}
 8006010:	4604      	mov	r4, r0
 8006012:	e9c0 3300 	strd	r3, r3, [r0]
 8006016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800601a:	6083      	str	r3, [r0, #8]
 800601c:	8181      	strh	r1, [r0, #12]
 800601e:	6643      	str	r3, [r0, #100]	; 0x64
 8006020:	81c2      	strh	r2, [r0, #14]
 8006022:	6183      	str	r3, [r0, #24]
 8006024:	4619      	mov	r1, r3
 8006026:	2208      	movs	r2, #8
 8006028:	305c      	adds	r0, #92	; 0x5c
 800602a:	f000 f906 	bl	800623a <memset>
 800602e:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <std+0x58>)
 8006030:	6224      	str	r4, [r4, #32]
 8006032:	6263      	str	r3, [r4, #36]	; 0x24
 8006034:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <std+0x5c>)
 8006036:	62a3      	str	r3, [r4, #40]	; 0x28
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <std+0x60>)
 800603a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800603c:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <std+0x64>)
 800603e:	6323      	str	r3, [r4, #48]	; 0x30
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <std+0x68>)
 8006042:	429c      	cmp	r4, r3
 8006044:	d006      	beq.n	8006054 <std+0x48>
 8006046:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800604a:	4294      	cmp	r4, r2
 800604c:	d002      	beq.n	8006054 <std+0x48>
 800604e:	33d0      	adds	r3, #208	; 0xd0
 8006050:	429c      	cmp	r4, r3
 8006052:	d105      	bne.n	8006060 <std+0x54>
 8006054:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800605c:	f000 b9bc 	b.w	80063d8 <__retarget_lock_init_recursive>
 8006060:	bd10      	pop	{r4, pc}
 8006062:	bf00      	nop
 8006064:	080061b5 	.word	0x080061b5
 8006068:	080061d7 	.word	0x080061d7
 800606c:	0800620f 	.word	0x0800620f
 8006070:	08006233 	.word	0x08006233
 8006074:	20001b58 	.word	0x20001b58

08006078 <stdio_exit_handler>:
 8006078:	4a02      	ldr	r2, [pc, #8]	; (8006084 <stdio_exit_handler+0xc>)
 800607a:	4903      	ldr	r1, [pc, #12]	; (8006088 <stdio_exit_handler+0x10>)
 800607c:	4803      	ldr	r0, [pc, #12]	; (800608c <stdio_exit_handler+0x14>)
 800607e:	f000 b869 	b.w	8006154 <_fwalk_sglue>
 8006082:	bf00      	nop
 8006084:	20000010 	.word	0x20000010
 8006088:	08006c95 	.word	0x08006c95
 800608c:	2000001c 	.word	0x2000001c

08006090 <cleanup_stdio>:
 8006090:	6841      	ldr	r1, [r0, #4]
 8006092:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <cleanup_stdio+0x34>)
 8006094:	b510      	push	{r4, lr}
 8006096:	4299      	cmp	r1, r3
 8006098:	4604      	mov	r4, r0
 800609a:	d001      	beq.n	80060a0 <cleanup_stdio+0x10>
 800609c:	f000 fdfa 	bl	8006c94 <_fflush_r>
 80060a0:	68a1      	ldr	r1, [r4, #8]
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <cleanup_stdio+0x38>)
 80060a4:	4299      	cmp	r1, r3
 80060a6:	d002      	beq.n	80060ae <cleanup_stdio+0x1e>
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 fdf3 	bl	8006c94 <_fflush_r>
 80060ae:	68e1      	ldr	r1, [r4, #12]
 80060b0:	4b06      	ldr	r3, [pc, #24]	; (80060cc <cleanup_stdio+0x3c>)
 80060b2:	4299      	cmp	r1, r3
 80060b4:	d004      	beq.n	80060c0 <cleanup_stdio+0x30>
 80060b6:	4620      	mov	r0, r4
 80060b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060bc:	f000 bdea 	b.w	8006c94 <_fflush_r>
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	bf00      	nop
 80060c4:	20001b58 	.word	0x20001b58
 80060c8:	20001bc0 	.word	0x20001bc0
 80060cc:	20001c28 	.word	0x20001c28

080060d0 <global_stdio_init.part.0>:
 80060d0:	b510      	push	{r4, lr}
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <global_stdio_init.part.0+0x30>)
 80060d4:	4c0b      	ldr	r4, [pc, #44]	; (8006104 <global_stdio_init.part.0+0x34>)
 80060d6:	4a0c      	ldr	r2, [pc, #48]	; (8006108 <global_stdio_init.part.0+0x38>)
 80060d8:	4620      	mov	r0, r4
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	2104      	movs	r1, #4
 80060de:	2200      	movs	r2, #0
 80060e0:	f7ff ff94 	bl	800600c <std>
 80060e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80060e8:	2201      	movs	r2, #1
 80060ea:	2109      	movs	r1, #9
 80060ec:	f7ff ff8e 	bl	800600c <std>
 80060f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80060f4:	2202      	movs	r2, #2
 80060f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060fa:	2112      	movs	r1, #18
 80060fc:	f7ff bf86 	b.w	800600c <std>
 8006100:	20001c90 	.word	0x20001c90
 8006104:	20001b58 	.word	0x20001b58
 8006108:	08006079 	.word	0x08006079

0800610c <__sfp_lock_acquire>:
 800610c:	4801      	ldr	r0, [pc, #4]	; (8006114 <__sfp_lock_acquire+0x8>)
 800610e:	f000 b964 	b.w	80063da <__retarget_lock_acquire_recursive>
 8006112:	bf00      	nop
 8006114:	20001c99 	.word	0x20001c99

08006118 <__sfp_lock_release>:
 8006118:	4801      	ldr	r0, [pc, #4]	; (8006120 <__sfp_lock_release+0x8>)
 800611a:	f000 b95f 	b.w	80063dc <__retarget_lock_release_recursive>
 800611e:	bf00      	nop
 8006120:	20001c99 	.word	0x20001c99

08006124 <__sinit>:
 8006124:	b510      	push	{r4, lr}
 8006126:	4604      	mov	r4, r0
 8006128:	f7ff fff0 	bl	800610c <__sfp_lock_acquire>
 800612c:	6a23      	ldr	r3, [r4, #32]
 800612e:	b11b      	cbz	r3, 8006138 <__sinit+0x14>
 8006130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006134:	f7ff bff0 	b.w	8006118 <__sfp_lock_release>
 8006138:	4b04      	ldr	r3, [pc, #16]	; (800614c <__sinit+0x28>)
 800613a:	6223      	str	r3, [r4, #32]
 800613c:	4b04      	ldr	r3, [pc, #16]	; (8006150 <__sinit+0x2c>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1f5      	bne.n	8006130 <__sinit+0xc>
 8006144:	f7ff ffc4 	bl	80060d0 <global_stdio_init.part.0>
 8006148:	e7f2      	b.n	8006130 <__sinit+0xc>
 800614a:	bf00      	nop
 800614c:	08006091 	.word	0x08006091
 8006150:	20001c90 	.word	0x20001c90

08006154 <_fwalk_sglue>:
 8006154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006158:	4607      	mov	r7, r0
 800615a:	4688      	mov	r8, r1
 800615c:	4614      	mov	r4, r2
 800615e:	2600      	movs	r6, #0
 8006160:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006164:	f1b9 0901 	subs.w	r9, r9, #1
 8006168:	d505      	bpl.n	8006176 <_fwalk_sglue+0x22>
 800616a:	6824      	ldr	r4, [r4, #0]
 800616c:	2c00      	cmp	r4, #0
 800616e:	d1f7      	bne.n	8006160 <_fwalk_sglue+0xc>
 8006170:	4630      	mov	r0, r6
 8006172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006176:	89ab      	ldrh	r3, [r5, #12]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d907      	bls.n	800618c <_fwalk_sglue+0x38>
 800617c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006180:	3301      	adds	r3, #1
 8006182:	d003      	beq.n	800618c <_fwalk_sglue+0x38>
 8006184:	4629      	mov	r1, r5
 8006186:	4638      	mov	r0, r7
 8006188:	47c0      	blx	r8
 800618a:	4306      	orrs	r6, r0
 800618c:	3568      	adds	r5, #104	; 0x68
 800618e:	e7e9      	b.n	8006164 <_fwalk_sglue+0x10>

08006190 <iprintf>:
 8006190:	b40f      	push	{r0, r1, r2, r3}
 8006192:	b507      	push	{r0, r1, r2, lr}
 8006194:	4906      	ldr	r1, [pc, #24]	; (80061b0 <iprintf+0x20>)
 8006196:	ab04      	add	r3, sp, #16
 8006198:	6808      	ldr	r0, [r1, #0]
 800619a:	f853 2b04 	ldr.w	r2, [r3], #4
 800619e:	6881      	ldr	r1, [r0, #8]
 80061a0:	9301      	str	r3, [sp, #4]
 80061a2:	f000 fa47 	bl	8006634 <_vfiprintf_r>
 80061a6:	b003      	add	sp, #12
 80061a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061ac:	b004      	add	sp, #16
 80061ae:	4770      	bx	lr
 80061b0:	20000068 	.word	0x20000068

080061b4 <__sread>:
 80061b4:	b510      	push	{r4, lr}
 80061b6:	460c      	mov	r4, r1
 80061b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061bc:	f000 f8be 	bl	800633c <_read_r>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	bfab      	itete	ge
 80061c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061c6:	89a3      	ldrhlt	r3, [r4, #12]
 80061c8:	181b      	addge	r3, r3, r0
 80061ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061ce:	bfac      	ite	ge
 80061d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80061d2:	81a3      	strhlt	r3, [r4, #12]
 80061d4:	bd10      	pop	{r4, pc}

080061d6 <__swrite>:
 80061d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061da:	461f      	mov	r7, r3
 80061dc:	898b      	ldrh	r3, [r1, #12]
 80061de:	4605      	mov	r5, r0
 80061e0:	05db      	lsls	r3, r3, #23
 80061e2:	460c      	mov	r4, r1
 80061e4:	4616      	mov	r6, r2
 80061e6:	d505      	bpl.n	80061f4 <__swrite+0x1e>
 80061e8:	2302      	movs	r3, #2
 80061ea:	2200      	movs	r2, #0
 80061ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f0:	f000 f892 	bl	8006318 <_lseek_r>
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	4632      	mov	r2, r6
 80061f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061fc:	81a3      	strh	r3, [r4, #12]
 80061fe:	4628      	mov	r0, r5
 8006200:	463b      	mov	r3, r7
 8006202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800620a:	f000 b8a9 	b.w	8006360 <_write_r>

0800620e <__sseek>:
 800620e:	b510      	push	{r4, lr}
 8006210:	460c      	mov	r4, r1
 8006212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006216:	f000 f87f 	bl	8006318 <_lseek_r>
 800621a:	1c43      	adds	r3, r0, #1
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	bf15      	itete	ne
 8006220:	6560      	strne	r0, [r4, #84]	; 0x54
 8006222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800622a:	81a3      	strheq	r3, [r4, #12]
 800622c:	bf18      	it	ne
 800622e:	81a3      	strhne	r3, [r4, #12]
 8006230:	bd10      	pop	{r4, pc}

08006232 <__sclose>:
 8006232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006236:	f000 b809 	b.w	800624c <_close_r>

0800623a <memset>:
 800623a:	4603      	mov	r3, r0
 800623c:	4402      	add	r2, r0
 800623e:	4293      	cmp	r3, r2
 8006240:	d100      	bne.n	8006244 <memset+0xa>
 8006242:	4770      	bx	lr
 8006244:	f803 1b01 	strb.w	r1, [r3], #1
 8006248:	e7f9      	b.n	800623e <memset+0x4>
	...

0800624c <_close_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	2300      	movs	r3, #0
 8006250:	4d05      	ldr	r5, [pc, #20]	; (8006268 <_close_r+0x1c>)
 8006252:	4604      	mov	r4, r0
 8006254:	4608      	mov	r0, r1
 8006256:	602b      	str	r3, [r5, #0]
 8006258:	f7fa fa75 	bl	8000746 <_close>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_close_r+0x1a>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_close_r+0x1a>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20001c94 	.word	0x20001c94

0800626c <_reclaim_reent>:
 800626c:	4b29      	ldr	r3, [pc, #164]	; (8006314 <_reclaim_reent+0xa8>)
 800626e:	b570      	push	{r4, r5, r6, lr}
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4604      	mov	r4, r0
 8006274:	4283      	cmp	r3, r0
 8006276:	d04b      	beq.n	8006310 <_reclaim_reent+0xa4>
 8006278:	69c3      	ldr	r3, [r0, #28]
 800627a:	b143      	cbz	r3, 800628e <_reclaim_reent+0x22>
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d144      	bne.n	800630c <_reclaim_reent+0xa0>
 8006282:	69e3      	ldr	r3, [r4, #28]
 8006284:	6819      	ldr	r1, [r3, #0]
 8006286:	b111      	cbz	r1, 800628e <_reclaim_reent+0x22>
 8006288:	4620      	mov	r0, r4
 800628a:	f000 f8b7 	bl	80063fc <_free_r>
 800628e:	6961      	ldr	r1, [r4, #20]
 8006290:	b111      	cbz	r1, 8006298 <_reclaim_reent+0x2c>
 8006292:	4620      	mov	r0, r4
 8006294:	f000 f8b2 	bl	80063fc <_free_r>
 8006298:	69e1      	ldr	r1, [r4, #28]
 800629a:	b111      	cbz	r1, 80062a2 <_reclaim_reent+0x36>
 800629c:	4620      	mov	r0, r4
 800629e:	f000 f8ad 	bl	80063fc <_free_r>
 80062a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80062a4:	b111      	cbz	r1, 80062ac <_reclaim_reent+0x40>
 80062a6:	4620      	mov	r0, r4
 80062a8:	f000 f8a8 	bl	80063fc <_free_r>
 80062ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062ae:	b111      	cbz	r1, 80062b6 <_reclaim_reent+0x4a>
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 f8a3 	bl	80063fc <_free_r>
 80062b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80062b8:	b111      	cbz	r1, 80062c0 <_reclaim_reent+0x54>
 80062ba:	4620      	mov	r0, r4
 80062bc:	f000 f89e 	bl	80063fc <_free_r>
 80062c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80062c2:	b111      	cbz	r1, 80062ca <_reclaim_reent+0x5e>
 80062c4:	4620      	mov	r0, r4
 80062c6:	f000 f899 	bl	80063fc <_free_r>
 80062ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80062cc:	b111      	cbz	r1, 80062d4 <_reclaim_reent+0x68>
 80062ce:	4620      	mov	r0, r4
 80062d0:	f000 f894 	bl	80063fc <_free_r>
 80062d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80062d6:	b111      	cbz	r1, 80062de <_reclaim_reent+0x72>
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 f88f 	bl	80063fc <_free_r>
 80062de:	6a23      	ldr	r3, [r4, #32]
 80062e0:	b1b3      	cbz	r3, 8006310 <_reclaim_reent+0xa4>
 80062e2:	4620      	mov	r0, r4
 80062e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062e8:	4718      	bx	r3
 80062ea:	5949      	ldr	r1, [r1, r5]
 80062ec:	b941      	cbnz	r1, 8006300 <_reclaim_reent+0x94>
 80062ee:	3504      	adds	r5, #4
 80062f0:	69e3      	ldr	r3, [r4, #28]
 80062f2:	2d80      	cmp	r5, #128	; 0x80
 80062f4:	68d9      	ldr	r1, [r3, #12]
 80062f6:	d1f8      	bne.n	80062ea <_reclaim_reent+0x7e>
 80062f8:	4620      	mov	r0, r4
 80062fa:	f000 f87f 	bl	80063fc <_free_r>
 80062fe:	e7c0      	b.n	8006282 <_reclaim_reent+0x16>
 8006300:	680e      	ldr	r6, [r1, #0]
 8006302:	4620      	mov	r0, r4
 8006304:	f000 f87a 	bl	80063fc <_free_r>
 8006308:	4631      	mov	r1, r6
 800630a:	e7ef      	b.n	80062ec <_reclaim_reent+0x80>
 800630c:	2500      	movs	r5, #0
 800630e:	e7ef      	b.n	80062f0 <_reclaim_reent+0x84>
 8006310:	bd70      	pop	{r4, r5, r6, pc}
 8006312:	bf00      	nop
 8006314:	20000068 	.word	0x20000068

08006318 <_lseek_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4604      	mov	r4, r0
 800631c:	4608      	mov	r0, r1
 800631e:	4611      	mov	r1, r2
 8006320:	2200      	movs	r2, #0
 8006322:	4d05      	ldr	r5, [pc, #20]	; (8006338 <_lseek_r+0x20>)
 8006324:	602a      	str	r2, [r5, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	f7fa fa31 	bl	800078e <_lseek>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d102      	bne.n	8006336 <_lseek_r+0x1e>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	b103      	cbz	r3, 8006336 <_lseek_r+0x1e>
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	20001c94 	.word	0x20001c94

0800633c <_read_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4604      	mov	r4, r0
 8006340:	4608      	mov	r0, r1
 8006342:	4611      	mov	r1, r2
 8006344:	2200      	movs	r2, #0
 8006346:	4d05      	ldr	r5, [pc, #20]	; (800635c <_read_r+0x20>)
 8006348:	602a      	str	r2, [r5, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	f7fa f9c2 	bl	80006d4 <_read>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_read_r+0x1e>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_read_r+0x1e>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	20001c94 	.word	0x20001c94

08006360 <_write_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4604      	mov	r4, r0
 8006364:	4608      	mov	r0, r1
 8006366:	4611      	mov	r1, r2
 8006368:	2200      	movs	r2, #0
 800636a:	4d05      	ldr	r5, [pc, #20]	; (8006380 <_write_r+0x20>)
 800636c:	602a      	str	r2, [r5, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	f7fa f9cd 	bl	800070e <_write>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d102      	bne.n	800637e <_write_r+0x1e>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	b103      	cbz	r3, 800637e <_write_r+0x1e>
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	20001c94 	.word	0x20001c94

08006384 <__errno>:
 8006384:	4b01      	ldr	r3, [pc, #4]	; (800638c <__errno+0x8>)
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	20000068 	.word	0x20000068

08006390 <__libc_init_array>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	2600      	movs	r6, #0
 8006394:	4d0c      	ldr	r5, [pc, #48]	; (80063c8 <__libc_init_array+0x38>)
 8006396:	4c0d      	ldr	r4, [pc, #52]	; (80063cc <__libc_init_array+0x3c>)
 8006398:	1b64      	subs	r4, r4, r5
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	42a6      	cmp	r6, r4
 800639e:	d109      	bne.n	80063b4 <__libc_init_array+0x24>
 80063a0:	f000 fdd8 	bl	8006f54 <_init>
 80063a4:	2600      	movs	r6, #0
 80063a6:	4d0a      	ldr	r5, [pc, #40]	; (80063d0 <__libc_init_array+0x40>)
 80063a8:	4c0a      	ldr	r4, [pc, #40]	; (80063d4 <__libc_init_array+0x44>)
 80063aa:	1b64      	subs	r4, r4, r5
 80063ac:	10a4      	asrs	r4, r4, #2
 80063ae:	42a6      	cmp	r6, r4
 80063b0:	d105      	bne.n	80063be <__libc_init_array+0x2e>
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b8:	4798      	blx	r3
 80063ba:	3601      	adds	r6, #1
 80063bc:	e7ee      	b.n	800639c <__libc_init_array+0xc>
 80063be:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c2:	4798      	blx	r3
 80063c4:	3601      	adds	r6, #1
 80063c6:	e7f2      	b.n	80063ae <__libc_init_array+0x1e>
 80063c8:	080070f8 	.word	0x080070f8
 80063cc:	080070f8 	.word	0x080070f8
 80063d0:	080070f8 	.word	0x080070f8
 80063d4:	080070fc 	.word	0x080070fc

080063d8 <__retarget_lock_init_recursive>:
 80063d8:	4770      	bx	lr

080063da <__retarget_lock_acquire_recursive>:
 80063da:	4770      	bx	lr

080063dc <__retarget_lock_release_recursive>:
 80063dc:	4770      	bx	lr

080063de <memcpy>:
 80063de:	440a      	add	r2, r1
 80063e0:	4291      	cmp	r1, r2
 80063e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80063e6:	d100      	bne.n	80063ea <memcpy+0xc>
 80063e8:	4770      	bx	lr
 80063ea:	b510      	push	{r4, lr}
 80063ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f0:	4291      	cmp	r1, r2
 80063f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f6:	d1f9      	bne.n	80063ec <memcpy+0xe>
 80063f8:	bd10      	pop	{r4, pc}
	...

080063fc <_free_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4605      	mov	r5, r0
 8006400:	2900      	cmp	r1, #0
 8006402:	d040      	beq.n	8006486 <_free_r+0x8a>
 8006404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006408:	1f0c      	subs	r4, r1, #4
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfb8      	it	lt
 800640e:	18e4      	addlt	r4, r4, r3
 8006410:	f000 f8dc 	bl	80065cc <__malloc_lock>
 8006414:	4a1c      	ldr	r2, [pc, #112]	; (8006488 <_free_r+0x8c>)
 8006416:	6813      	ldr	r3, [r2, #0]
 8006418:	b933      	cbnz	r3, 8006428 <_free_r+0x2c>
 800641a:	6063      	str	r3, [r4, #4]
 800641c:	6014      	str	r4, [r2, #0]
 800641e:	4628      	mov	r0, r5
 8006420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006424:	f000 b8d8 	b.w	80065d8 <__malloc_unlock>
 8006428:	42a3      	cmp	r3, r4
 800642a:	d908      	bls.n	800643e <_free_r+0x42>
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	1821      	adds	r1, r4, r0
 8006430:	428b      	cmp	r3, r1
 8006432:	bf01      	itttt	eq
 8006434:	6819      	ldreq	r1, [r3, #0]
 8006436:	685b      	ldreq	r3, [r3, #4]
 8006438:	1809      	addeq	r1, r1, r0
 800643a:	6021      	streq	r1, [r4, #0]
 800643c:	e7ed      	b.n	800641a <_free_r+0x1e>
 800643e:	461a      	mov	r2, r3
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	b10b      	cbz	r3, 8006448 <_free_r+0x4c>
 8006444:	42a3      	cmp	r3, r4
 8006446:	d9fa      	bls.n	800643e <_free_r+0x42>
 8006448:	6811      	ldr	r1, [r2, #0]
 800644a:	1850      	adds	r0, r2, r1
 800644c:	42a0      	cmp	r0, r4
 800644e:	d10b      	bne.n	8006468 <_free_r+0x6c>
 8006450:	6820      	ldr	r0, [r4, #0]
 8006452:	4401      	add	r1, r0
 8006454:	1850      	adds	r0, r2, r1
 8006456:	4283      	cmp	r3, r0
 8006458:	6011      	str	r1, [r2, #0]
 800645a:	d1e0      	bne.n	800641e <_free_r+0x22>
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	4408      	add	r0, r1
 8006462:	6010      	str	r0, [r2, #0]
 8006464:	6053      	str	r3, [r2, #4]
 8006466:	e7da      	b.n	800641e <_free_r+0x22>
 8006468:	d902      	bls.n	8006470 <_free_r+0x74>
 800646a:	230c      	movs	r3, #12
 800646c:	602b      	str	r3, [r5, #0]
 800646e:	e7d6      	b.n	800641e <_free_r+0x22>
 8006470:	6820      	ldr	r0, [r4, #0]
 8006472:	1821      	adds	r1, r4, r0
 8006474:	428b      	cmp	r3, r1
 8006476:	bf01      	itttt	eq
 8006478:	6819      	ldreq	r1, [r3, #0]
 800647a:	685b      	ldreq	r3, [r3, #4]
 800647c:	1809      	addeq	r1, r1, r0
 800647e:	6021      	streq	r1, [r4, #0]
 8006480:	6063      	str	r3, [r4, #4]
 8006482:	6054      	str	r4, [r2, #4]
 8006484:	e7cb      	b.n	800641e <_free_r+0x22>
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	20001c9c 	.word	0x20001c9c

0800648c <sbrk_aligned>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	4e0e      	ldr	r6, [pc, #56]	; (80064c8 <sbrk_aligned+0x3c>)
 8006490:	460c      	mov	r4, r1
 8006492:	6831      	ldr	r1, [r6, #0]
 8006494:	4605      	mov	r5, r0
 8006496:	b911      	cbnz	r1, 800649e <sbrk_aligned+0x12>
 8006498:	f000 fcba 	bl	8006e10 <_sbrk_r>
 800649c:	6030      	str	r0, [r6, #0]
 800649e:	4621      	mov	r1, r4
 80064a0:	4628      	mov	r0, r5
 80064a2:	f000 fcb5 	bl	8006e10 <_sbrk_r>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	d00a      	beq.n	80064c0 <sbrk_aligned+0x34>
 80064aa:	1cc4      	adds	r4, r0, #3
 80064ac:	f024 0403 	bic.w	r4, r4, #3
 80064b0:	42a0      	cmp	r0, r4
 80064b2:	d007      	beq.n	80064c4 <sbrk_aligned+0x38>
 80064b4:	1a21      	subs	r1, r4, r0
 80064b6:	4628      	mov	r0, r5
 80064b8:	f000 fcaa 	bl	8006e10 <_sbrk_r>
 80064bc:	3001      	adds	r0, #1
 80064be:	d101      	bne.n	80064c4 <sbrk_aligned+0x38>
 80064c0:	f04f 34ff 	mov.w	r4, #4294967295
 80064c4:	4620      	mov	r0, r4
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	20001ca0 	.word	0x20001ca0

080064cc <_malloc_r>:
 80064cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d0:	1ccd      	adds	r5, r1, #3
 80064d2:	f025 0503 	bic.w	r5, r5, #3
 80064d6:	3508      	adds	r5, #8
 80064d8:	2d0c      	cmp	r5, #12
 80064da:	bf38      	it	cc
 80064dc:	250c      	movcc	r5, #12
 80064de:	2d00      	cmp	r5, #0
 80064e0:	4607      	mov	r7, r0
 80064e2:	db01      	blt.n	80064e8 <_malloc_r+0x1c>
 80064e4:	42a9      	cmp	r1, r5
 80064e6:	d905      	bls.n	80064f4 <_malloc_r+0x28>
 80064e8:	230c      	movs	r3, #12
 80064ea:	2600      	movs	r6, #0
 80064ec:	603b      	str	r3, [r7, #0]
 80064ee:	4630      	mov	r0, r6
 80064f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065c8 <_malloc_r+0xfc>
 80064f8:	f000 f868 	bl	80065cc <__malloc_lock>
 80064fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006500:	461c      	mov	r4, r3
 8006502:	bb5c      	cbnz	r4, 800655c <_malloc_r+0x90>
 8006504:	4629      	mov	r1, r5
 8006506:	4638      	mov	r0, r7
 8006508:	f7ff ffc0 	bl	800648c <sbrk_aligned>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	4604      	mov	r4, r0
 8006510:	d155      	bne.n	80065be <_malloc_r+0xf2>
 8006512:	f8d8 4000 	ldr.w	r4, [r8]
 8006516:	4626      	mov	r6, r4
 8006518:	2e00      	cmp	r6, #0
 800651a:	d145      	bne.n	80065a8 <_malloc_r+0xdc>
 800651c:	2c00      	cmp	r4, #0
 800651e:	d048      	beq.n	80065b2 <_malloc_r+0xe6>
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	4631      	mov	r1, r6
 8006524:	4638      	mov	r0, r7
 8006526:	eb04 0903 	add.w	r9, r4, r3
 800652a:	f000 fc71 	bl	8006e10 <_sbrk_r>
 800652e:	4581      	cmp	r9, r0
 8006530:	d13f      	bne.n	80065b2 <_malloc_r+0xe6>
 8006532:	6821      	ldr	r1, [r4, #0]
 8006534:	4638      	mov	r0, r7
 8006536:	1a6d      	subs	r5, r5, r1
 8006538:	4629      	mov	r1, r5
 800653a:	f7ff ffa7 	bl	800648c <sbrk_aligned>
 800653e:	3001      	adds	r0, #1
 8006540:	d037      	beq.n	80065b2 <_malloc_r+0xe6>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	442b      	add	r3, r5
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	f8d8 3000 	ldr.w	r3, [r8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d038      	beq.n	80065c2 <_malloc_r+0xf6>
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	42a2      	cmp	r2, r4
 8006554:	d12b      	bne.n	80065ae <_malloc_r+0xe2>
 8006556:	2200      	movs	r2, #0
 8006558:	605a      	str	r2, [r3, #4]
 800655a:	e00f      	b.n	800657c <_malloc_r+0xb0>
 800655c:	6822      	ldr	r2, [r4, #0]
 800655e:	1b52      	subs	r2, r2, r5
 8006560:	d41f      	bmi.n	80065a2 <_malloc_r+0xd6>
 8006562:	2a0b      	cmp	r2, #11
 8006564:	d917      	bls.n	8006596 <_malloc_r+0xca>
 8006566:	1961      	adds	r1, r4, r5
 8006568:	42a3      	cmp	r3, r4
 800656a:	6025      	str	r5, [r4, #0]
 800656c:	bf18      	it	ne
 800656e:	6059      	strne	r1, [r3, #4]
 8006570:	6863      	ldr	r3, [r4, #4]
 8006572:	bf08      	it	eq
 8006574:	f8c8 1000 	streq.w	r1, [r8]
 8006578:	5162      	str	r2, [r4, r5]
 800657a:	604b      	str	r3, [r1, #4]
 800657c:	4638      	mov	r0, r7
 800657e:	f104 060b 	add.w	r6, r4, #11
 8006582:	f000 f829 	bl	80065d8 <__malloc_unlock>
 8006586:	f026 0607 	bic.w	r6, r6, #7
 800658a:	1d23      	adds	r3, r4, #4
 800658c:	1af2      	subs	r2, r6, r3
 800658e:	d0ae      	beq.n	80064ee <_malloc_r+0x22>
 8006590:	1b9b      	subs	r3, r3, r6
 8006592:	50a3      	str	r3, [r4, r2]
 8006594:	e7ab      	b.n	80064ee <_malloc_r+0x22>
 8006596:	42a3      	cmp	r3, r4
 8006598:	6862      	ldr	r2, [r4, #4]
 800659a:	d1dd      	bne.n	8006558 <_malloc_r+0x8c>
 800659c:	f8c8 2000 	str.w	r2, [r8]
 80065a0:	e7ec      	b.n	800657c <_malloc_r+0xb0>
 80065a2:	4623      	mov	r3, r4
 80065a4:	6864      	ldr	r4, [r4, #4]
 80065a6:	e7ac      	b.n	8006502 <_malloc_r+0x36>
 80065a8:	4634      	mov	r4, r6
 80065aa:	6876      	ldr	r6, [r6, #4]
 80065ac:	e7b4      	b.n	8006518 <_malloc_r+0x4c>
 80065ae:	4613      	mov	r3, r2
 80065b0:	e7cc      	b.n	800654c <_malloc_r+0x80>
 80065b2:	230c      	movs	r3, #12
 80065b4:	4638      	mov	r0, r7
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	f000 f80e 	bl	80065d8 <__malloc_unlock>
 80065bc:	e797      	b.n	80064ee <_malloc_r+0x22>
 80065be:	6025      	str	r5, [r4, #0]
 80065c0:	e7dc      	b.n	800657c <_malloc_r+0xb0>
 80065c2:	605b      	str	r3, [r3, #4]
 80065c4:	deff      	udf	#255	; 0xff
 80065c6:	bf00      	nop
 80065c8:	20001c9c 	.word	0x20001c9c

080065cc <__malloc_lock>:
 80065cc:	4801      	ldr	r0, [pc, #4]	; (80065d4 <__malloc_lock+0x8>)
 80065ce:	f7ff bf04 	b.w	80063da <__retarget_lock_acquire_recursive>
 80065d2:	bf00      	nop
 80065d4:	20001c98 	.word	0x20001c98

080065d8 <__malloc_unlock>:
 80065d8:	4801      	ldr	r0, [pc, #4]	; (80065e0 <__malloc_unlock+0x8>)
 80065da:	f7ff beff 	b.w	80063dc <__retarget_lock_release_recursive>
 80065de:	bf00      	nop
 80065e0:	20001c98 	.word	0x20001c98

080065e4 <__sfputc_r>:
 80065e4:	6893      	ldr	r3, [r2, #8]
 80065e6:	b410      	push	{r4}
 80065e8:	3b01      	subs	r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	6093      	str	r3, [r2, #8]
 80065ee:	da07      	bge.n	8006600 <__sfputc_r+0x1c>
 80065f0:	6994      	ldr	r4, [r2, #24]
 80065f2:	42a3      	cmp	r3, r4
 80065f4:	db01      	blt.n	80065fa <__sfputc_r+0x16>
 80065f6:	290a      	cmp	r1, #10
 80065f8:	d102      	bne.n	8006600 <__sfputc_r+0x1c>
 80065fa:	bc10      	pop	{r4}
 80065fc:	f000 bb72 	b.w	8006ce4 <__swbuf_r>
 8006600:	6813      	ldr	r3, [r2, #0]
 8006602:	1c58      	adds	r0, r3, #1
 8006604:	6010      	str	r0, [r2, #0]
 8006606:	7019      	strb	r1, [r3, #0]
 8006608:	4608      	mov	r0, r1
 800660a:	bc10      	pop	{r4}
 800660c:	4770      	bx	lr

0800660e <__sfputs_r>:
 800660e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006610:	4606      	mov	r6, r0
 8006612:	460f      	mov	r7, r1
 8006614:	4614      	mov	r4, r2
 8006616:	18d5      	adds	r5, r2, r3
 8006618:	42ac      	cmp	r4, r5
 800661a:	d101      	bne.n	8006620 <__sfputs_r+0x12>
 800661c:	2000      	movs	r0, #0
 800661e:	e007      	b.n	8006630 <__sfputs_r+0x22>
 8006620:	463a      	mov	r2, r7
 8006622:	4630      	mov	r0, r6
 8006624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006628:	f7ff ffdc 	bl	80065e4 <__sfputc_r>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	d1f3      	bne.n	8006618 <__sfputs_r+0xa>
 8006630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006634 <_vfiprintf_r>:
 8006634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006638:	460d      	mov	r5, r1
 800663a:	4614      	mov	r4, r2
 800663c:	4698      	mov	r8, r3
 800663e:	4606      	mov	r6, r0
 8006640:	b09d      	sub	sp, #116	; 0x74
 8006642:	b118      	cbz	r0, 800664c <_vfiprintf_r+0x18>
 8006644:	6a03      	ldr	r3, [r0, #32]
 8006646:	b90b      	cbnz	r3, 800664c <_vfiprintf_r+0x18>
 8006648:	f7ff fd6c 	bl	8006124 <__sinit>
 800664c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800664e:	07d9      	lsls	r1, r3, #31
 8006650:	d405      	bmi.n	800665e <_vfiprintf_r+0x2a>
 8006652:	89ab      	ldrh	r3, [r5, #12]
 8006654:	059a      	lsls	r2, r3, #22
 8006656:	d402      	bmi.n	800665e <_vfiprintf_r+0x2a>
 8006658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800665a:	f7ff febe 	bl	80063da <__retarget_lock_acquire_recursive>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	071b      	lsls	r3, r3, #28
 8006662:	d501      	bpl.n	8006668 <_vfiprintf_r+0x34>
 8006664:	692b      	ldr	r3, [r5, #16]
 8006666:	b99b      	cbnz	r3, 8006690 <_vfiprintf_r+0x5c>
 8006668:	4629      	mov	r1, r5
 800666a:	4630      	mov	r0, r6
 800666c:	f000 fb78 	bl	8006d60 <__swsetup_r>
 8006670:	b170      	cbz	r0, 8006690 <_vfiprintf_r+0x5c>
 8006672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006674:	07dc      	lsls	r4, r3, #31
 8006676:	d504      	bpl.n	8006682 <_vfiprintf_r+0x4e>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	b01d      	add	sp, #116	; 0x74
 800667e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006682:	89ab      	ldrh	r3, [r5, #12]
 8006684:	0598      	lsls	r0, r3, #22
 8006686:	d4f7      	bmi.n	8006678 <_vfiprintf_r+0x44>
 8006688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800668a:	f7ff fea7 	bl	80063dc <__retarget_lock_release_recursive>
 800668e:	e7f3      	b.n	8006678 <_vfiprintf_r+0x44>
 8006690:	2300      	movs	r3, #0
 8006692:	9309      	str	r3, [sp, #36]	; 0x24
 8006694:	2320      	movs	r3, #32
 8006696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800669a:	2330      	movs	r3, #48	; 0x30
 800669c:	f04f 0901 	mov.w	r9, #1
 80066a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006854 <_vfiprintf_r+0x220>
 80066a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ac:	4623      	mov	r3, r4
 80066ae:	469a      	mov	sl, r3
 80066b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066b4:	b10a      	cbz	r2, 80066ba <_vfiprintf_r+0x86>
 80066b6:	2a25      	cmp	r2, #37	; 0x25
 80066b8:	d1f9      	bne.n	80066ae <_vfiprintf_r+0x7a>
 80066ba:	ebba 0b04 	subs.w	fp, sl, r4
 80066be:	d00b      	beq.n	80066d8 <_vfiprintf_r+0xa4>
 80066c0:	465b      	mov	r3, fp
 80066c2:	4622      	mov	r2, r4
 80066c4:	4629      	mov	r1, r5
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7ff ffa1 	bl	800660e <__sfputs_r>
 80066cc:	3001      	adds	r0, #1
 80066ce:	f000 80a9 	beq.w	8006824 <_vfiprintf_r+0x1f0>
 80066d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066d4:	445a      	add	r2, fp
 80066d6:	9209      	str	r2, [sp, #36]	; 0x24
 80066d8:	f89a 3000 	ldrb.w	r3, [sl]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80a1 	beq.w	8006824 <_vfiprintf_r+0x1f0>
 80066e2:	2300      	movs	r3, #0
 80066e4:	f04f 32ff 	mov.w	r2, #4294967295
 80066e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066ec:	f10a 0a01 	add.w	sl, sl, #1
 80066f0:	9304      	str	r3, [sp, #16]
 80066f2:	9307      	str	r3, [sp, #28]
 80066f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066f8:	931a      	str	r3, [sp, #104]	; 0x68
 80066fa:	4654      	mov	r4, sl
 80066fc:	2205      	movs	r2, #5
 80066fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006702:	4854      	ldr	r0, [pc, #336]	; (8006854 <_vfiprintf_r+0x220>)
 8006704:	f000 fb94 	bl	8006e30 <memchr>
 8006708:	9a04      	ldr	r2, [sp, #16]
 800670a:	b9d8      	cbnz	r0, 8006744 <_vfiprintf_r+0x110>
 800670c:	06d1      	lsls	r1, r2, #27
 800670e:	bf44      	itt	mi
 8006710:	2320      	movmi	r3, #32
 8006712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006716:	0713      	lsls	r3, r2, #28
 8006718:	bf44      	itt	mi
 800671a:	232b      	movmi	r3, #43	; 0x2b
 800671c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006720:	f89a 3000 	ldrb.w	r3, [sl]
 8006724:	2b2a      	cmp	r3, #42	; 0x2a
 8006726:	d015      	beq.n	8006754 <_vfiprintf_r+0x120>
 8006728:	4654      	mov	r4, sl
 800672a:	2000      	movs	r0, #0
 800672c:	f04f 0c0a 	mov.w	ip, #10
 8006730:	9a07      	ldr	r2, [sp, #28]
 8006732:	4621      	mov	r1, r4
 8006734:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006738:	3b30      	subs	r3, #48	; 0x30
 800673a:	2b09      	cmp	r3, #9
 800673c:	d94d      	bls.n	80067da <_vfiprintf_r+0x1a6>
 800673e:	b1b0      	cbz	r0, 800676e <_vfiprintf_r+0x13a>
 8006740:	9207      	str	r2, [sp, #28]
 8006742:	e014      	b.n	800676e <_vfiprintf_r+0x13a>
 8006744:	eba0 0308 	sub.w	r3, r0, r8
 8006748:	fa09 f303 	lsl.w	r3, r9, r3
 800674c:	4313      	orrs	r3, r2
 800674e:	46a2      	mov	sl, r4
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	e7d2      	b.n	80066fa <_vfiprintf_r+0xc6>
 8006754:	9b03      	ldr	r3, [sp, #12]
 8006756:	1d19      	adds	r1, r3, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	9103      	str	r1, [sp, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	bfbb      	ittet	lt
 8006760:	425b      	neglt	r3, r3
 8006762:	f042 0202 	orrlt.w	r2, r2, #2
 8006766:	9307      	strge	r3, [sp, #28]
 8006768:	9307      	strlt	r3, [sp, #28]
 800676a:	bfb8      	it	lt
 800676c:	9204      	strlt	r2, [sp, #16]
 800676e:	7823      	ldrb	r3, [r4, #0]
 8006770:	2b2e      	cmp	r3, #46	; 0x2e
 8006772:	d10c      	bne.n	800678e <_vfiprintf_r+0x15a>
 8006774:	7863      	ldrb	r3, [r4, #1]
 8006776:	2b2a      	cmp	r3, #42	; 0x2a
 8006778:	d134      	bne.n	80067e4 <_vfiprintf_r+0x1b0>
 800677a:	9b03      	ldr	r3, [sp, #12]
 800677c:	3402      	adds	r4, #2
 800677e:	1d1a      	adds	r2, r3, #4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	9203      	str	r2, [sp, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	bfb8      	it	lt
 8006788:	f04f 33ff 	movlt.w	r3, #4294967295
 800678c:	9305      	str	r3, [sp, #20]
 800678e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006858 <_vfiprintf_r+0x224>
 8006792:	2203      	movs	r2, #3
 8006794:	4650      	mov	r0, sl
 8006796:	7821      	ldrb	r1, [r4, #0]
 8006798:	f000 fb4a 	bl	8006e30 <memchr>
 800679c:	b138      	cbz	r0, 80067ae <_vfiprintf_r+0x17a>
 800679e:	2240      	movs	r2, #64	; 0x40
 80067a0:	9b04      	ldr	r3, [sp, #16]
 80067a2:	eba0 000a 	sub.w	r0, r0, sl
 80067a6:	4082      	lsls	r2, r0
 80067a8:	4313      	orrs	r3, r2
 80067aa:	3401      	adds	r4, #1
 80067ac:	9304      	str	r3, [sp, #16]
 80067ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b2:	2206      	movs	r2, #6
 80067b4:	4829      	ldr	r0, [pc, #164]	; (800685c <_vfiprintf_r+0x228>)
 80067b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ba:	f000 fb39 	bl	8006e30 <memchr>
 80067be:	2800      	cmp	r0, #0
 80067c0:	d03f      	beq.n	8006842 <_vfiprintf_r+0x20e>
 80067c2:	4b27      	ldr	r3, [pc, #156]	; (8006860 <_vfiprintf_r+0x22c>)
 80067c4:	bb1b      	cbnz	r3, 800680e <_vfiprintf_r+0x1da>
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	3307      	adds	r3, #7
 80067ca:	f023 0307 	bic.w	r3, r3, #7
 80067ce:	3308      	adds	r3, #8
 80067d0:	9303      	str	r3, [sp, #12]
 80067d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d4:	443b      	add	r3, r7
 80067d6:	9309      	str	r3, [sp, #36]	; 0x24
 80067d8:	e768      	b.n	80066ac <_vfiprintf_r+0x78>
 80067da:	460c      	mov	r4, r1
 80067dc:	2001      	movs	r0, #1
 80067de:	fb0c 3202 	mla	r2, ip, r2, r3
 80067e2:	e7a6      	b.n	8006732 <_vfiprintf_r+0xfe>
 80067e4:	2300      	movs	r3, #0
 80067e6:	f04f 0c0a 	mov.w	ip, #10
 80067ea:	4619      	mov	r1, r3
 80067ec:	3401      	adds	r4, #1
 80067ee:	9305      	str	r3, [sp, #20]
 80067f0:	4620      	mov	r0, r4
 80067f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067f6:	3a30      	subs	r2, #48	; 0x30
 80067f8:	2a09      	cmp	r2, #9
 80067fa:	d903      	bls.n	8006804 <_vfiprintf_r+0x1d0>
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0c6      	beq.n	800678e <_vfiprintf_r+0x15a>
 8006800:	9105      	str	r1, [sp, #20]
 8006802:	e7c4      	b.n	800678e <_vfiprintf_r+0x15a>
 8006804:	4604      	mov	r4, r0
 8006806:	2301      	movs	r3, #1
 8006808:	fb0c 2101 	mla	r1, ip, r1, r2
 800680c:	e7f0      	b.n	80067f0 <_vfiprintf_r+0x1bc>
 800680e:	ab03      	add	r3, sp, #12
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	462a      	mov	r2, r5
 8006814:	4630      	mov	r0, r6
 8006816:	4b13      	ldr	r3, [pc, #76]	; (8006864 <_vfiprintf_r+0x230>)
 8006818:	a904      	add	r1, sp, #16
 800681a:	f3af 8000 	nop.w
 800681e:	4607      	mov	r7, r0
 8006820:	1c78      	adds	r0, r7, #1
 8006822:	d1d6      	bne.n	80067d2 <_vfiprintf_r+0x19e>
 8006824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006826:	07d9      	lsls	r1, r3, #31
 8006828:	d405      	bmi.n	8006836 <_vfiprintf_r+0x202>
 800682a:	89ab      	ldrh	r3, [r5, #12]
 800682c:	059a      	lsls	r2, r3, #22
 800682e:	d402      	bmi.n	8006836 <_vfiprintf_r+0x202>
 8006830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006832:	f7ff fdd3 	bl	80063dc <__retarget_lock_release_recursive>
 8006836:	89ab      	ldrh	r3, [r5, #12]
 8006838:	065b      	lsls	r3, r3, #25
 800683a:	f53f af1d 	bmi.w	8006678 <_vfiprintf_r+0x44>
 800683e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006840:	e71c      	b.n	800667c <_vfiprintf_r+0x48>
 8006842:	ab03      	add	r3, sp, #12
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	462a      	mov	r2, r5
 8006848:	4630      	mov	r0, r6
 800684a:	4b06      	ldr	r3, [pc, #24]	; (8006864 <_vfiprintf_r+0x230>)
 800684c:	a904      	add	r1, sp, #16
 800684e:	f000 f87d 	bl	800694c <_printf_i>
 8006852:	e7e4      	b.n	800681e <_vfiprintf_r+0x1ea>
 8006854:	080070c2 	.word	0x080070c2
 8006858:	080070c8 	.word	0x080070c8
 800685c:	080070cc 	.word	0x080070cc
 8006860:	00000000 	.word	0x00000000
 8006864:	0800660f 	.word	0x0800660f

08006868 <_printf_common>:
 8006868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800686c:	4616      	mov	r6, r2
 800686e:	4699      	mov	r9, r3
 8006870:	688a      	ldr	r2, [r1, #8]
 8006872:	690b      	ldr	r3, [r1, #16]
 8006874:	4607      	mov	r7, r0
 8006876:	4293      	cmp	r3, r2
 8006878:	bfb8      	it	lt
 800687a:	4613      	movlt	r3, r2
 800687c:	6033      	str	r3, [r6, #0]
 800687e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006882:	460c      	mov	r4, r1
 8006884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006888:	b10a      	cbz	r2, 800688e <_printf_common+0x26>
 800688a:	3301      	adds	r3, #1
 800688c:	6033      	str	r3, [r6, #0]
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	0699      	lsls	r1, r3, #26
 8006892:	bf42      	ittt	mi
 8006894:	6833      	ldrmi	r3, [r6, #0]
 8006896:	3302      	addmi	r3, #2
 8006898:	6033      	strmi	r3, [r6, #0]
 800689a:	6825      	ldr	r5, [r4, #0]
 800689c:	f015 0506 	ands.w	r5, r5, #6
 80068a0:	d106      	bne.n	80068b0 <_printf_common+0x48>
 80068a2:	f104 0a19 	add.w	sl, r4, #25
 80068a6:	68e3      	ldr	r3, [r4, #12]
 80068a8:	6832      	ldr	r2, [r6, #0]
 80068aa:	1a9b      	subs	r3, r3, r2
 80068ac:	42ab      	cmp	r3, r5
 80068ae:	dc2b      	bgt.n	8006908 <_printf_common+0xa0>
 80068b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068b4:	1e13      	subs	r3, r2, #0
 80068b6:	6822      	ldr	r2, [r4, #0]
 80068b8:	bf18      	it	ne
 80068ba:	2301      	movne	r3, #1
 80068bc:	0692      	lsls	r2, r2, #26
 80068be:	d430      	bmi.n	8006922 <_printf_common+0xba>
 80068c0:	4649      	mov	r1, r9
 80068c2:	4638      	mov	r0, r7
 80068c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068c8:	47c0      	blx	r8
 80068ca:	3001      	adds	r0, #1
 80068cc:	d023      	beq.n	8006916 <_printf_common+0xae>
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	6922      	ldr	r2, [r4, #16]
 80068d2:	f003 0306 	and.w	r3, r3, #6
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	bf14      	ite	ne
 80068da:	2500      	movne	r5, #0
 80068dc:	6833      	ldreq	r3, [r6, #0]
 80068de:	f04f 0600 	mov.w	r6, #0
 80068e2:	bf08      	it	eq
 80068e4:	68e5      	ldreq	r5, [r4, #12]
 80068e6:	f104 041a 	add.w	r4, r4, #26
 80068ea:	bf08      	it	eq
 80068ec:	1aed      	subeq	r5, r5, r3
 80068ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80068f2:	bf08      	it	eq
 80068f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f8:	4293      	cmp	r3, r2
 80068fa:	bfc4      	itt	gt
 80068fc:	1a9b      	subgt	r3, r3, r2
 80068fe:	18ed      	addgt	r5, r5, r3
 8006900:	42b5      	cmp	r5, r6
 8006902:	d11a      	bne.n	800693a <_printf_common+0xd2>
 8006904:	2000      	movs	r0, #0
 8006906:	e008      	b.n	800691a <_printf_common+0xb2>
 8006908:	2301      	movs	r3, #1
 800690a:	4652      	mov	r2, sl
 800690c:	4649      	mov	r1, r9
 800690e:	4638      	mov	r0, r7
 8006910:	47c0      	blx	r8
 8006912:	3001      	adds	r0, #1
 8006914:	d103      	bne.n	800691e <_printf_common+0xb6>
 8006916:	f04f 30ff 	mov.w	r0, #4294967295
 800691a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691e:	3501      	adds	r5, #1
 8006920:	e7c1      	b.n	80068a6 <_printf_common+0x3e>
 8006922:	2030      	movs	r0, #48	; 0x30
 8006924:	18e1      	adds	r1, r4, r3
 8006926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006930:	4422      	add	r2, r4
 8006932:	3302      	adds	r3, #2
 8006934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006938:	e7c2      	b.n	80068c0 <_printf_common+0x58>
 800693a:	2301      	movs	r3, #1
 800693c:	4622      	mov	r2, r4
 800693e:	4649      	mov	r1, r9
 8006940:	4638      	mov	r0, r7
 8006942:	47c0      	blx	r8
 8006944:	3001      	adds	r0, #1
 8006946:	d0e6      	beq.n	8006916 <_printf_common+0xae>
 8006948:	3601      	adds	r6, #1
 800694a:	e7d9      	b.n	8006900 <_printf_common+0x98>

0800694c <_printf_i>:
 800694c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	7e0f      	ldrb	r7, [r1, #24]
 8006952:	4691      	mov	r9, r2
 8006954:	2f78      	cmp	r7, #120	; 0x78
 8006956:	4680      	mov	r8, r0
 8006958:	460c      	mov	r4, r1
 800695a:	469a      	mov	sl, r3
 800695c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800695e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006962:	d807      	bhi.n	8006974 <_printf_i+0x28>
 8006964:	2f62      	cmp	r7, #98	; 0x62
 8006966:	d80a      	bhi.n	800697e <_printf_i+0x32>
 8006968:	2f00      	cmp	r7, #0
 800696a:	f000 80d5 	beq.w	8006b18 <_printf_i+0x1cc>
 800696e:	2f58      	cmp	r7, #88	; 0x58
 8006970:	f000 80c1 	beq.w	8006af6 <_printf_i+0x1aa>
 8006974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800697c:	e03a      	b.n	80069f4 <_printf_i+0xa8>
 800697e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006982:	2b15      	cmp	r3, #21
 8006984:	d8f6      	bhi.n	8006974 <_printf_i+0x28>
 8006986:	a101      	add	r1, pc, #4	; (adr r1, 800698c <_printf_i+0x40>)
 8006988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800698c:	080069e5 	.word	0x080069e5
 8006990:	080069f9 	.word	0x080069f9
 8006994:	08006975 	.word	0x08006975
 8006998:	08006975 	.word	0x08006975
 800699c:	08006975 	.word	0x08006975
 80069a0:	08006975 	.word	0x08006975
 80069a4:	080069f9 	.word	0x080069f9
 80069a8:	08006975 	.word	0x08006975
 80069ac:	08006975 	.word	0x08006975
 80069b0:	08006975 	.word	0x08006975
 80069b4:	08006975 	.word	0x08006975
 80069b8:	08006aff 	.word	0x08006aff
 80069bc:	08006a25 	.word	0x08006a25
 80069c0:	08006ab9 	.word	0x08006ab9
 80069c4:	08006975 	.word	0x08006975
 80069c8:	08006975 	.word	0x08006975
 80069cc:	08006b21 	.word	0x08006b21
 80069d0:	08006975 	.word	0x08006975
 80069d4:	08006a25 	.word	0x08006a25
 80069d8:	08006975 	.word	0x08006975
 80069dc:	08006975 	.word	0x08006975
 80069e0:	08006ac1 	.word	0x08006ac1
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	1d1a      	adds	r2, r3, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	602a      	str	r2, [r5, #0]
 80069ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0a0      	b.n	8006b3a <_printf_i+0x1ee>
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	682b      	ldr	r3, [r5, #0]
 80069fc:	0607      	lsls	r7, r0, #24
 80069fe:	f103 0104 	add.w	r1, r3, #4
 8006a02:	6029      	str	r1, [r5, #0]
 8006a04:	d501      	bpl.n	8006a0a <_printf_i+0xbe>
 8006a06:	681e      	ldr	r6, [r3, #0]
 8006a08:	e003      	b.n	8006a12 <_printf_i+0xc6>
 8006a0a:	0646      	lsls	r6, r0, #25
 8006a0c:	d5fb      	bpl.n	8006a06 <_printf_i+0xba>
 8006a0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a12:	2e00      	cmp	r6, #0
 8006a14:	da03      	bge.n	8006a1e <_printf_i+0xd2>
 8006a16:	232d      	movs	r3, #45	; 0x2d
 8006a18:	4276      	negs	r6, r6
 8006a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a1e:	230a      	movs	r3, #10
 8006a20:	4859      	ldr	r0, [pc, #356]	; (8006b88 <_printf_i+0x23c>)
 8006a22:	e012      	b.n	8006a4a <_printf_i+0xfe>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	6820      	ldr	r0, [r4, #0]
 8006a28:	1d19      	adds	r1, r3, #4
 8006a2a:	6029      	str	r1, [r5, #0]
 8006a2c:	0605      	lsls	r5, r0, #24
 8006a2e:	d501      	bpl.n	8006a34 <_printf_i+0xe8>
 8006a30:	681e      	ldr	r6, [r3, #0]
 8006a32:	e002      	b.n	8006a3a <_printf_i+0xee>
 8006a34:	0641      	lsls	r1, r0, #25
 8006a36:	d5fb      	bpl.n	8006a30 <_printf_i+0xe4>
 8006a38:	881e      	ldrh	r6, [r3, #0]
 8006a3a:	2f6f      	cmp	r7, #111	; 0x6f
 8006a3c:	bf0c      	ite	eq
 8006a3e:	2308      	moveq	r3, #8
 8006a40:	230a      	movne	r3, #10
 8006a42:	4851      	ldr	r0, [pc, #324]	; (8006b88 <_printf_i+0x23c>)
 8006a44:	2100      	movs	r1, #0
 8006a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a4a:	6865      	ldr	r5, [r4, #4]
 8006a4c:	2d00      	cmp	r5, #0
 8006a4e:	bfa8      	it	ge
 8006a50:	6821      	ldrge	r1, [r4, #0]
 8006a52:	60a5      	str	r5, [r4, #8]
 8006a54:	bfa4      	itt	ge
 8006a56:	f021 0104 	bicge.w	r1, r1, #4
 8006a5a:	6021      	strge	r1, [r4, #0]
 8006a5c:	b90e      	cbnz	r6, 8006a62 <_printf_i+0x116>
 8006a5e:	2d00      	cmp	r5, #0
 8006a60:	d04b      	beq.n	8006afa <_printf_i+0x1ae>
 8006a62:	4615      	mov	r5, r2
 8006a64:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a68:	fb03 6711 	mls	r7, r3, r1, r6
 8006a6c:	5dc7      	ldrb	r7, [r0, r7]
 8006a6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a72:	4637      	mov	r7, r6
 8006a74:	42bb      	cmp	r3, r7
 8006a76:	460e      	mov	r6, r1
 8006a78:	d9f4      	bls.n	8006a64 <_printf_i+0x118>
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d10b      	bne.n	8006a96 <_printf_i+0x14a>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	07de      	lsls	r6, r3, #31
 8006a82:	d508      	bpl.n	8006a96 <_printf_i+0x14a>
 8006a84:	6923      	ldr	r3, [r4, #16]
 8006a86:	6861      	ldr	r1, [r4, #4]
 8006a88:	4299      	cmp	r1, r3
 8006a8a:	bfde      	ittt	le
 8006a8c:	2330      	movle	r3, #48	; 0x30
 8006a8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a96:	1b52      	subs	r2, r2, r5
 8006a98:	6122      	str	r2, [r4, #16]
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	f8cd a000 	str.w	sl, [sp]
 8006aa4:	aa03      	add	r2, sp, #12
 8006aa6:	f7ff fedf 	bl	8006868 <_printf_common>
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d14a      	bne.n	8006b44 <_printf_i+0x1f8>
 8006aae:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab2:	b004      	add	sp, #16
 8006ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	f043 0320 	orr.w	r3, r3, #32
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	2778      	movs	r7, #120	; 0x78
 8006ac2:	4832      	ldr	r0, [pc, #200]	; (8006b8c <_printf_i+0x240>)
 8006ac4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	6829      	ldr	r1, [r5, #0]
 8006acc:	061f      	lsls	r7, r3, #24
 8006ace:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ad2:	d402      	bmi.n	8006ada <_printf_i+0x18e>
 8006ad4:	065f      	lsls	r7, r3, #25
 8006ad6:	bf48      	it	mi
 8006ad8:	b2b6      	uxthmi	r6, r6
 8006ada:	07df      	lsls	r7, r3, #31
 8006adc:	bf48      	it	mi
 8006ade:	f043 0320 	orrmi.w	r3, r3, #32
 8006ae2:	6029      	str	r1, [r5, #0]
 8006ae4:	bf48      	it	mi
 8006ae6:	6023      	strmi	r3, [r4, #0]
 8006ae8:	b91e      	cbnz	r6, 8006af2 <_printf_i+0x1a6>
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	f023 0320 	bic.w	r3, r3, #32
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	2310      	movs	r3, #16
 8006af4:	e7a6      	b.n	8006a44 <_printf_i+0xf8>
 8006af6:	4824      	ldr	r0, [pc, #144]	; (8006b88 <_printf_i+0x23c>)
 8006af8:	e7e4      	b.n	8006ac4 <_printf_i+0x178>
 8006afa:	4615      	mov	r5, r2
 8006afc:	e7bd      	b.n	8006a7a <_printf_i+0x12e>
 8006afe:	682b      	ldr	r3, [r5, #0]
 8006b00:	6826      	ldr	r6, [r4, #0]
 8006b02:	1d18      	adds	r0, r3, #4
 8006b04:	6961      	ldr	r1, [r4, #20]
 8006b06:	6028      	str	r0, [r5, #0]
 8006b08:	0635      	lsls	r5, r6, #24
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	d501      	bpl.n	8006b12 <_printf_i+0x1c6>
 8006b0e:	6019      	str	r1, [r3, #0]
 8006b10:	e002      	b.n	8006b18 <_printf_i+0x1cc>
 8006b12:	0670      	lsls	r0, r6, #25
 8006b14:	d5fb      	bpl.n	8006b0e <_printf_i+0x1c2>
 8006b16:	8019      	strh	r1, [r3, #0]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4615      	mov	r5, r2
 8006b1c:	6123      	str	r3, [r4, #16]
 8006b1e:	e7bc      	b.n	8006a9a <_printf_i+0x14e>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	2100      	movs	r1, #0
 8006b24:	1d1a      	adds	r2, r3, #4
 8006b26:	602a      	str	r2, [r5, #0]
 8006b28:	681d      	ldr	r5, [r3, #0]
 8006b2a:	6862      	ldr	r2, [r4, #4]
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f000 f97f 	bl	8006e30 <memchr>
 8006b32:	b108      	cbz	r0, 8006b38 <_printf_i+0x1ec>
 8006b34:	1b40      	subs	r0, r0, r5
 8006b36:	6060      	str	r0, [r4, #4]
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	6123      	str	r3, [r4, #16]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b42:	e7aa      	b.n	8006a9a <_printf_i+0x14e>
 8006b44:	462a      	mov	r2, r5
 8006b46:	4649      	mov	r1, r9
 8006b48:	4640      	mov	r0, r8
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	47d0      	blx	sl
 8006b4e:	3001      	adds	r0, #1
 8006b50:	d0ad      	beq.n	8006aae <_printf_i+0x162>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	079b      	lsls	r3, r3, #30
 8006b56:	d413      	bmi.n	8006b80 <_printf_i+0x234>
 8006b58:	68e0      	ldr	r0, [r4, #12]
 8006b5a:	9b03      	ldr	r3, [sp, #12]
 8006b5c:	4298      	cmp	r0, r3
 8006b5e:	bfb8      	it	lt
 8006b60:	4618      	movlt	r0, r3
 8006b62:	e7a6      	b.n	8006ab2 <_printf_i+0x166>
 8006b64:	2301      	movs	r3, #1
 8006b66:	4632      	mov	r2, r6
 8006b68:	4649      	mov	r1, r9
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	47d0      	blx	sl
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d09d      	beq.n	8006aae <_printf_i+0x162>
 8006b72:	3501      	adds	r5, #1
 8006b74:	68e3      	ldr	r3, [r4, #12]
 8006b76:	9903      	ldr	r1, [sp, #12]
 8006b78:	1a5b      	subs	r3, r3, r1
 8006b7a:	42ab      	cmp	r3, r5
 8006b7c:	dcf2      	bgt.n	8006b64 <_printf_i+0x218>
 8006b7e:	e7eb      	b.n	8006b58 <_printf_i+0x20c>
 8006b80:	2500      	movs	r5, #0
 8006b82:	f104 0619 	add.w	r6, r4, #25
 8006b86:	e7f5      	b.n	8006b74 <_printf_i+0x228>
 8006b88:	080070d3 	.word	0x080070d3
 8006b8c:	080070e4 	.word	0x080070e4

08006b90 <__sflush_r>:
 8006b90:	898a      	ldrh	r2, [r1, #12]
 8006b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b94:	4605      	mov	r5, r0
 8006b96:	0710      	lsls	r0, r2, #28
 8006b98:	460c      	mov	r4, r1
 8006b9a:	d457      	bmi.n	8006c4c <__sflush_r+0xbc>
 8006b9c:	684b      	ldr	r3, [r1, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	dc04      	bgt.n	8006bac <__sflush_r+0x1c>
 8006ba2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dc01      	bgt.n	8006bac <__sflush_r+0x1c>
 8006ba8:	2000      	movs	r0, #0
 8006baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bae:	2e00      	cmp	r6, #0
 8006bb0:	d0fa      	beq.n	8006ba8 <__sflush_r+0x18>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bb8:	682f      	ldr	r7, [r5, #0]
 8006bba:	6a21      	ldr	r1, [r4, #32]
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	d032      	beq.n	8006c26 <__sflush_r+0x96>
 8006bc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	075a      	lsls	r2, r3, #29
 8006bc6:	d505      	bpl.n	8006bd4 <__sflush_r+0x44>
 8006bc8:	6863      	ldr	r3, [r4, #4]
 8006bca:	1ac0      	subs	r0, r0, r3
 8006bcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bce:	b10b      	cbz	r3, 8006bd4 <__sflush_r+0x44>
 8006bd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bd2:	1ac0      	subs	r0, r0, r3
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bda:	4628      	mov	r0, r5
 8006bdc:	6a21      	ldr	r1, [r4, #32]
 8006bde:	47b0      	blx	r6
 8006be0:	1c43      	adds	r3, r0, #1
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	d106      	bne.n	8006bf4 <__sflush_r+0x64>
 8006be6:	6829      	ldr	r1, [r5, #0]
 8006be8:	291d      	cmp	r1, #29
 8006bea:	d82b      	bhi.n	8006c44 <__sflush_r+0xb4>
 8006bec:	4a28      	ldr	r2, [pc, #160]	; (8006c90 <__sflush_r+0x100>)
 8006bee:	410a      	asrs	r2, r1
 8006bf0:	07d6      	lsls	r6, r2, #31
 8006bf2:	d427      	bmi.n	8006c44 <__sflush_r+0xb4>
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	6062      	str	r2, [r4, #4]
 8006bf8:	6922      	ldr	r2, [r4, #16]
 8006bfa:	04d9      	lsls	r1, r3, #19
 8006bfc:	6022      	str	r2, [r4, #0]
 8006bfe:	d504      	bpl.n	8006c0a <__sflush_r+0x7a>
 8006c00:	1c42      	adds	r2, r0, #1
 8006c02:	d101      	bne.n	8006c08 <__sflush_r+0x78>
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	b903      	cbnz	r3, 8006c0a <__sflush_r+0x7a>
 8006c08:	6560      	str	r0, [r4, #84]	; 0x54
 8006c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c0c:	602f      	str	r7, [r5, #0]
 8006c0e:	2900      	cmp	r1, #0
 8006c10:	d0ca      	beq.n	8006ba8 <__sflush_r+0x18>
 8006c12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c16:	4299      	cmp	r1, r3
 8006c18:	d002      	beq.n	8006c20 <__sflush_r+0x90>
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f7ff fbee 	bl	80063fc <_free_r>
 8006c20:	2000      	movs	r0, #0
 8006c22:	6360      	str	r0, [r4, #52]	; 0x34
 8006c24:	e7c1      	b.n	8006baa <__sflush_r+0x1a>
 8006c26:	2301      	movs	r3, #1
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b0      	blx	r6
 8006c2c:	1c41      	adds	r1, r0, #1
 8006c2e:	d1c8      	bne.n	8006bc2 <__sflush_r+0x32>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0c5      	beq.n	8006bc2 <__sflush_r+0x32>
 8006c36:	2b1d      	cmp	r3, #29
 8006c38:	d001      	beq.n	8006c3e <__sflush_r+0xae>
 8006c3a:	2b16      	cmp	r3, #22
 8006c3c:	d101      	bne.n	8006c42 <__sflush_r+0xb2>
 8006c3e:	602f      	str	r7, [r5, #0]
 8006c40:	e7b2      	b.n	8006ba8 <__sflush_r+0x18>
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	e7ae      	b.n	8006baa <__sflush_r+0x1a>
 8006c4c:	690f      	ldr	r7, [r1, #16]
 8006c4e:	2f00      	cmp	r7, #0
 8006c50:	d0aa      	beq.n	8006ba8 <__sflush_r+0x18>
 8006c52:	0793      	lsls	r3, r2, #30
 8006c54:	bf18      	it	ne
 8006c56:	2300      	movne	r3, #0
 8006c58:	680e      	ldr	r6, [r1, #0]
 8006c5a:	bf08      	it	eq
 8006c5c:	694b      	ldreq	r3, [r1, #20]
 8006c5e:	1bf6      	subs	r6, r6, r7
 8006c60:	600f      	str	r7, [r1, #0]
 8006c62:	608b      	str	r3, [r1, #8]
 8006c64:	2e00      	cmp	r6, #0
 8006c66:	dd9f      	ble.n	8006ba8 <__sflush_r+0x18>
 8006c68:	4633      	mov	r3, r6
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	6a21      	ldr	r1, [r4, #32]
 8006c70:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c74:	47e0      	blx	ip
 8006c76:	2800      	cmp	r0, #0
 8006c78:	dc06      	bgt.n	8006c88 <__sflush_r+0xf8>
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c84:	81a3      	strh	r3, [r4, #12]
 8006c86:	e790      	b.n	8006baa <__sflush_r+0x1a>
 8006c88:	4407      	add	r7, r0
 8006c8a:	1a36      	subs	r6, r6, r0
 8006c8c:	e7ea      	b.n	8006c64 <__sflush_r+0xd4>
 8006c8e:	bf00      	nop
 8006c90:	dfbffffe 	.word	0xdfbffffe

08006c94 <_fflush_r>:
 8006c94:	b538      	push	{r3, r4, r5, lr}
 8006c96:	690b      	ldr	r3, [r1, #16]
 8006c98:	4605      	mov	r5, r0
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	b913      	cbnz	r3, 8006ca4 <_fflush_r+0x10>
 8006c9e:	2500      	movs	r5, #0
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	b118      	cbz	r0, 8006cae <_fflush_r+0x1a>
 8006ca6:	6a03      	ldr	r3, [r0, #32]
 8006ca8:	b90b      	cbnz	r3, 8006cae <_fflush_r+0x1a>
 8006caa:	f7ff fa3b 	bl	8006124 <__sinit>
 8006cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0f3      	beq.n	8006c9e <_fflush_r+0xa>
 8006cb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cb8:	07d0      	lsls	r0, r2, #31
 8006cba:	d404      	bmi.n	8006cc6 <_fflush_r+0x32>
 8006cbc:	0599      	lsls	r1, r3, #22
 8006cbe:	d402      	bmi.n	8006cc6 <_fflush_r+0x32>
 8006cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cc2:	f7ff fb8a 	bl	80063da <__retarget_lock_acquire_recursive>
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	4621      	mov	r1, r4
 8006cca:	f7ff ff61 	bl	8006b90 <__sflush_r>
 8006cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	07da      	lsls	r2, r3, #31
 8006cd4:	d4e4      	bmi.n	8006ca0 <_fflush_r+0xc>
 8006cd6:	89a3      	ldrh	r3, [r4, #12]
 8006cd8:	059b      	lsls	r3, r3, #22
 8006cda:	d4e1      	bmi.n	8006ca0 <_fflush_r+0xc>
 8006cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cde:	f7ff fb7d 	bl	80063dc <__retarget_lock_release_recursive>
 8006ce2:	e7dd      	b.n	8006ca0 <_fflush_r+0xc>

08006ce4 <__swbuf_r>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	460e      	mov	r6, r1
 8006ce8:	4614      	mov	r4, r2
 8006cea:	4605      	mov	r5, r0
 8006cec:	b118      	cbz	r0, 8006cf6 <__swbuf_r+0x12>
 8006cee:	6a03      	ldr	r3, [r0, #32]
 8006cf0:	b90b      	cbnz	r3, 8006cf6 <__swbuf_r+0x12>
 8006cf2:	f7ff fa17 	bl	8006124 <__sinit>
 8006cf6:	69a3      	ldr	r3, [r4, #24]
 8006cf8:	60a3      	str	r3, [r4, #8]
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	071a      	lsls	r2, r3, #28
 8006cfe:	d525      	bpl.n	8006d4c <__swbuf_r+0x68>
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	b31b      	cbz	r3, 8006d4c <__swbuf_r+0x68>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	6922      	ldr	r2, [r4, #16]
 8006d08:	b2f6      	uxtb	r6, r6
 8006d0a:	1a98      	subs	r0, r3, r2
 8006d0c:	6963      	ldr	r3, [r4, #20]
 8006d0e:	4637      	mov	r7, r6
 8006d10:	4283      	cmp	r3, r0
 8006d12:	dc04      	bgt.n	8006d1e <__swbuf_r+0x3a>
 8006d14:	4621      	mov	r1, r4
 8006d16:	4628      	mov	r0, r5
 8006d18:	f7ff ffbc 	bl	8006c94 <_fflush_r>
 8006d1c:	b9e0      	cbnz	r0, 8006d58 <__swbuf_r+0x74>
 8006d1e:	68a3      	ldr	r3, [r4, #8]
 8006d20:	3b01      	subs	r3, #1
 8006d22:	60a3      	str	r3, [r4, #8]
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	6022      	str	r2, [r4, #0]
 8006d2a:	701e      	strb	r6, [r3, #0]
 8006d2c:	6962      	ldr	r2, [r4, #20]
 8006d2e:	1c43      	adds	r3, r0, #1
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d004      	beq.n	8006d3e <__swbuf_r+0x5a>
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	07db      	lsls	r3, r3, #31
 8006d38:	d506      	bpl.n	8006d48 <__swbuf_r+0x64>
 8006d3a:	2e0a      	cmp	r6, #10
 8006d3c:	d104      	bne.n	8006d48 <__swbuf_r+0x64>
 8006d3e:	4621      	mov	r1, r4
 8006d40:	4628      	mov	r0, r5
 8006d42:	f7ff ffa7 	bl	8006c94 <_fflush_r>
 8006d46:	b938      	cbnz	r0, 8006d58 <__swbuf_r+0x74>
 8006d48:	4638      	mov	r0, r7
 8006d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f000 f806 	bl	8006d60 <__swsetup_r>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d0d5      	beq.n	8006d04 <__swbuf_r+0x20>
 8006d58:	f04f 37ff 	mov.w	r7, #4294967295
 8006d5c:	e7f4      	b.n	8006d48 <__swbuf_r+0x64>
	...

08006d60 <__swsetup_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4b2a      	ldr	r3, [pc, #168]	; (8006e0c <__swsetup_r+0xac>)
 8006d64:	4605      	mov	r5, r0
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	460c      	mov	r4, r1
 8006d6a:	b118      	cbz	r0, 8006d74 <__swsetup_r+0x14>
 8006d6c:	6a03      	ldr	r3, [r0, #32]
 8006d6e:	b90b      	cbnz	r3, 8006d74 <__swsetup_r+0x14>
 8006d70:	f7ff f9d8 	bl	8006124 <__sinit>
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d7a:	0718      	lsls	r0, r3, #28
 8006d7c:	d422      	bmi.n	8006dc4 <__swsetup_r+0x64>
 8006d7e:	06d9      	lsls	r1, r3, #27
 8006d80:	d407      	bmi.n	8006d92 <__swsetup_r+0x32>
 8006d82:	2309      	movs	r3, #9
 8006d84:	602b      	str	r3, [r5, #0]
 8006d86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8e:	81a3      	strh	r3, [r4, #12]
 8006d90:	e034      	b.n	8006dfc <__swsetup_r+0x9c>
 8006d92:	0758      	lsls	r0, r3, #29
 8006d94:	d512      	bpl.n	8006dbc <__swsetup_r+0x5c>
 8006d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d98:	b141      	cbz	r1, 8006dac <__swsetup_r+0x4c>
 8006d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d9e:	4299      	cmp	r1, r3
 8006da0:	d002      	beq.n	8006da8 <__swsetup_r+0x48>
 8006da2:	4628      	mov	r0, r5
 8006da4:	f7ff fb2a 	bl	80063fc <_free_r>
 8006da8:	2300      	movs	r3, #0
 8006daa:	6363      	str	r3, [r4, #52]	; 0x34
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006db2:	81a3      	strh	r3, [r4, #12]
 8006db4:	2300      	movs	r3, #0
 8006db6:	6063      	str	r3, [r4, #4]
 8006db8:	6923      	ldr	r3, [r4, #16]
 8006dba:	6023      	str	r3, [r4, #0]
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	f043 0308 	orr.w	r3, r3, #8
 8006dc2:	81a3      	strh	r3, [r4, #12]
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	b94b      	cbnz	r3, 8006ddc <__swsetup_r+0x7c>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd2:	d003      	beq.n	8006ddc <__swsetup_r+0x7c>
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 f85d 	bl	8006e96 <__smakebuf_r>
 8006ddc:	89a0      	ldrh	r0, [r4, #12]
 8006dde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006de2:	f010 0301 	ands.w	r3, r0, #1
 8006de6:	d00a      	beq.n	8006dfe <__swsetup_r+0x9e>
 8006de8:	2300      	movs	r3, #0
 8006dea:	60a3      	str	r3, [r4, #8]
 8006dec:	6963      	ldr	r3, [r4, #20]
 8006dee:	425b      	negs	r3, r3
 8006df0:	61a3      	str	r3, [r4, #24]
 8006df2:	6923      	ldr	r3, [r4, #16]
 8006df4:	b943      	cbnz	r3, 8006e08 <__swsetup_r+0xa8>
 8006df6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dfa:	d1c4      	bne.n	8006d86 <__swsetup_r+0x26>
 8006dfc:	bd38      	pop	{r3, r4, r5, pc}
 8006dfe:	0781      	lsls	r1, r0, #30
 8006e00:	bf58      	it	pl
 8006e02:	6963      	ldrpl	r3, [r4, #20]
 8006e04:	60a3      	str	r3, [r4, #8]
 8006e06:	e7f4      	b.n	8006df2 <__swsetup_r+0x92>
 8006e08:	2000      	movs	r0, #0
 8006e0a:	e7f7      	b.n	8006dfc <__swsetup_r+0x9c>
 8006e0c:	20000068 	.word	0x20000068

08006e10 <_sbrk_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	2300      	movs	r3, #0
 8006e14:	4d05      	ldr	r5, [pc, #20]	; (8006e2c <_sbrk_r+0x1c>)
 8006e16:	4604      	mov	r4, r0
 8006e18:	4608      	mov	r0, r1
 8006e1a:	602b      	str	r3, [r5, #0]
 8006e1c:	f7f9 fcc4 	bl	80007a8 <_sbrk>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d102      	bne.n	8006e2a <_sbrk_r+0x1a>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	b103      	cbz	r3, 8006e2a <_sbrk_r+0x1a>
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	20001c94 	.word	0x20001c94

08006e30 <memchr>:
 8006e30:	4603      	mov	r3, r0
 8006e32:	b510      	push	{r4, lr}
 8006e34:	b2c9      	uxtb	r1, r1
 8006e36:	4402      	add	r2, r0
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	d101      	bne.n	8006e42 <memchr+0x12>
 8006e3e:	2000      	movs	r0, #0
 8006e40:	e003      	b.n	8006e4a <memchr+0x1a>
 8006e42:	7804      	ldrb	r4, [r0, #0]
 8006e44:	3301      	adds	r3, #1
 8006e46:	428c      	cmp	r4, r1
 8006e48:	d1f6      	bne.n	8006e38 <memchr+0x8>
 8006e4a:	bd10      	pop	{r4, pc}

08006e4c <__swhatbuf_r>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	460c      	mov	r4, r1
 8006e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e54:	4615      	mov	r5, r2
 8006e56:	2900      	cmp	r1, #0
 8006e58:	461e      	mov	r6, r3
 8006e5a:	b096      	sub	sp, #88	; 0x58
 8006e5c:	da0c      	bge.n	8006e78 <__swhatbuf_r+0x2c>
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	2100      	movs	r1, #0
 8006e62:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e66:	bf0c      	ite	eq
 8006e68:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006e6c:	2340      	movne	r3, #64	; 0x40
 8006e6e:	2000      	movs	r0, #0
 8006e70:	6031      	str	r1, [r6, #0]
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	b016      	add	sp, #88	; 0x58
 8006e76:	bd70      	pop	{r4, r5, r6, pc}
 8006e78:	466a      	mov	r2, sp
 8006e7a:	f000 f849 	bl	8006f10 <_fstat_r>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	dbed      	blt.n	8006e5e <__swhatbuf_r+0x12>
 8006e82:	9901      	ldr	r1, [sp, #4]
 8006e84:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006e88:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006e8c:	4259      	negs	r1, r3
 8006e8e:	4159      	adcs	r1, r3
 8006e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e94:	e7eb      	b.n	8006e6e <__swhatbuf_r+0x22>

08006e96 <__smakebuf_r>:
 8006e96:	898b      	ldrh	r3, [r1, #12]
 8006e98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e9a:	079d      	lsls	r5, r3, #30
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	d507      	bpl.n	8006eb2 <__smakebuf_r+0x1c>
 8006ea2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	6123      	str	r3, [r4, #16]
 8006eaa:	2301      	movs	r3, #1
 8006eac:	6163      	str	r3, [r4, #20]
 8006eae:	b002      	add	sp, #8
 8006eb0:	bd70      	pop	{r4, r5, r6, pc}
 8006eb2:	466a      	mov	r2, sp
 8006eb4:	ab01      	add	r3, sp, #4
 8006eb6:	f7ff ffc9 	bl	8006e4c <__swhatbuf_r>
 8006eba:	9900      	ldr	r1, [sp, #0]
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f7ff fb04 	bl	80064cc <_malloc_r>
 8006ec4:	b948      	cbnz	r0, 8006eda <__smakebuf_r+0x44>
 8006ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eca:	059a      	lsls	r2, r3, #22
 8006ecc:	d4ef      	bmi.n	8006eae <__smakebuf_r+0x18>
 8006ece:	f023 0303 	bic.w	r3, r3, #3
 8006ed2:	f043 0302 	orr.w	r3, r3, #2
 8006ed6:	81a3      	strh	r3, [r4, #12]
 8006ed8:	e7e3      	b.n	8006ea2 <__smakebuf_r+0xc>
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	6020      	str	r0, [r4, #0]
 8006ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee2:	81a3      	strh	r3, [r4, #12]
 8006ee4:	9b00      	ldr	r3, [sp, #0]
 8006ee6:	6120      	str	r0, [r4, #16]
 8006ee8:	6163      	str	r3, [r4, #20]
 8006eea:	9b01      	ldr	r3, [sp, #4]
 8006eec:	b15b      	cbz	r3, 8006f06 <__smakebuf_r+0x70>
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ef4:	f000 f81e 	bl	8006f34 <_isatty_r>
 8006ef8:	b128      	cbz	r0, 8006f06 <__smakebuf_r+0x70>
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	f023 0303 	bic.w	r3, r3, #3
 8006f00:	f043 0301 	orr.w	r3, r3, #1
 8006f04:	81a3      	strh	r3, [r4, #12]
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	431d      	orrs	r5, r3
 8006f0a:	81a5      	strh	r5, [r4, #12]
 8006f0c:	e7cf      	b.n	8006eae <__smakebuf_r+0x18>
	...

08006f10 <_fstat_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	2300      	movs	r3, #0
 8006f14:	4d06      	ldr	r5, [pc, #24]	; (8006f30 <_fstat_r+0x20>)
 8006f16:	4604      	mov	r4, r0
 8006f18:	4608      	mov	r0, r1
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	602b      	str	r3, [r5, #0]
 8006f1e:	f7f9 fc1d 	bl	800075c <_fstat>
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	d102      	bne.n	8006f2c <_fstat_r+0x1c>
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	b103      	cbz	r3, 8006f2c <_fstat_r+0x1c>
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	bd38      	pop	{r3, r4, r5, pc}
 8006f2e:	bf00      	nop
 8006f30:	20001c94 	.word	0x20001c94

08006f34 <_isatty_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	2300      	movs	r3, #0
 8006f38:	4d05      	ldr	r5, [pc, #20]	; (8006f50 <_isatty_r+0x1c>)
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	602b      	str	r3, [r5, #0]
 8006f40:	f7f9 fc1b 	bl	800077a <_isatty>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d102      	bne.n	8006f4e <_isatty_r+0x1a>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	b103      	cbz	r3, 8006f4e <_isatty_r+0x1a>
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	20001c94 	.word	0x20001c94

08006f54 <_init>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	bf00      	nop
 8006f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5a:	bc08      	pop	{r3}
 8006f5c:	469e      	mov	lr, r3
 8006f5e:	4770      	bx	lr

08006f60 <_fini>:
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f62:	bf00      	nop
 8006f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f66:	bc08      	pop	{r3}
 8006f68:	469e      	mov	lr, r3
 8006f6a:	4770      	bx	lr
