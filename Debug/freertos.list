
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066bc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080067cc  080067cc  000167cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006908  08006908  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08006908  08006908  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006908  08006908  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  2000006c  0800697c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  0800697c  00021c60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017eb3  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000387b  00000000  00000000  00037f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  0003b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fcf  00000000  00000000  0003cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b00b  00000000  00000000  0003dc3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000188a5  00000000  00000000  00058c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095ffe  00000000  00000000  000714ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005be8  00000000  00000000  001074f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0010d0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080067b4 	.word	0x080067b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080067b4 	.word	0x080067b4

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (5, sizeof(uint8_t), &myQueue01_attributes);
 8000154:	4a0c      	ldr	r2, [pc, #48]	; (8000188 <MX_FREERTOS_Init+0x38>)
 8000156:	2101      	movs	r1, #1
 8000158:	2005      	movs	r0, #5
 800015a:	f002 fd97 	bl	8002c8c <osMessageQueueNew>
 800015e:	4603      	mov	r3, r0
 8000160:	4a0a      	ldr	r2, [pc, #40]	; (800018c <MX_FREERTOS_Init+0x3c>)
 8000162:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of led0 */
  led0Handle = osThreadNew(StartDefaultTask, NULL, &led0_attributes);
 8000164:	4a0a      	ldr	r2, [pc, #40]	; (8000190 <MX_FREERTOS_Init+0x40>)
 8000166:	2100      	movs	r1, #0
 8000168:	480a      	ldr	r0, [pc, #40]	; (8000194 <MX_FREERTOS_Init+0x44>)
 800016a:	f002 fcb7 	bl	8002adc <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a09      	ldr	r2, [pc, #36]	; (8000198 <MX_FREERTOS_Init+0x48>)
 8000172:	6013      	str	r3, [r2, #0]

  /* creation of led1 */
  led1Handle = osThreadNew(StartTask02, NULL, &led1_attributes);
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <MX_FREERTOS_Init+0x4c>)
 8000176:	2100      	movs	r1, #0
 8000178:	4809      	ldr	r0, [pc, #36]	; (80001a0 <MX_FREERTOS_Init+0x50>)
 800017a:	f002 fcaf 	bl	8002adc <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a08      	ldr	r2, [pc, #32]	; (80001a4 <MX_FREERTOS_Init+0x54>)
 8000182:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000184:	bf00      	nop
 8000186:	bd80      	pop	{r7, pc}
 8000188:	08006890 	.word	0x08006890
 800018c:	20000094 	.word	0x20000094
 8000190:	08006848 	.word	0x08006848
 8000194:	080001a9 	.word	0x080001a9
 8000198:	2000008c 	.word	0x2000008c
 800019c:	0800686c 	.word	0x0800686c
 80001a0:	08000219 	.word	0x08000219
 80001a4:	20000090 	.word	0x20000090

080001a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint32_t pretime=HAL_GetTick();
 80001b0:	f000 fb9c 	bl	80008ec <HAL_GetTick>
 80001b4:	6178      	str	r0, [r7, #20]
	uint8_t receive_queue_priority;
  /* Infinite loop */
  for(;;)
  {

	if(HAL_GetTick()-pretime>50){
 80001b6:	f000 fb99 	bl	80008ec <HAL_GetTick>
 80001ba:	4602      	mov	r2, r0
 80001bc:	697b      	ldr	r3, [r7, #20]
 80001be:	1ad3      	subs	r3, r2, r3
 80001c0:	2b32      	cmp	r3, #50	; 0x32
 80001c2:	d906      	bls.n	80001d2 <StartDefaultTask+0x2a>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 80001c4:	2108      	movs	r1, #8
 80001c6:	4810      	ldr	r0, [pc, #64]	; (8000208 <StartDefaultTask+0x60>)
 80001c8:	f000 fec8 	bl	8000f5c <HAL_GPIO_TogglePin>
		pretime=HAL_GetTick();
 80001cc:	f000 fb8e 	bl	80008ec <HAL_GetTick>
 80001d0:	6178      	str	r0, [r7, #20]
	}
	if(task_send){
 80001d2:	4b0e      	ldr	r3, [pc, #56]	; (800020c <StartDefaultTask+0x64>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d011      	beq.n	80001fe <StartDefaultTask+0x56>
		osMessageQueueGet(myQueue01Handle,&receive_val,&receive_queue_priority,10);
 80001da:	4b0d      	ldr	r3, [pc, #52]	; (8000210 <StartDefaultTask+0x68>)
 80001dc:	6818      	ldr	r0, [r3, #0]
 80001de:	f107 020f 	add.w	r2, r7, #15
 80001e2:	f107 0110 	add.w	r1, r7, #16
 80001e6:	230a      	movs	r3, #10
 80001e8:	f002 fe4a 	bl	8002e80 <osMessageQueueGet>
		printf("task1-1) current receive val:%c\n",(uint8_t)receive_val);
 80001ec:	693b      	ldr	r3, [r7, #16]
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	4619      	mov	r1, r3
 80001f2:	4808      	ldr	r0, [pc, #32]	; (8000214 <StartDefaultTask+0x6c>)
 80001f4:	f005 fbfc 	bl	80059f0 <iprintf>
		task_send=false;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <StartDefaultTask+0x64>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	701a      	strb	r2, [r3, #0]
	}
    osDelay(1);
 80001fe:	2001      	movs	r0, #1
 8000200:	f002 fd16 	bl	8002c30 <osDelay>
	if(HAL_GetTick()-pretime>50){
 8000204:	e7d7      	b.n	80001b6 <StartDefaultTask+0xe>
 8000206:	bf00      	nop
 8000208:	40010c00 	.word	0x40010c00
 800020c:	20000088 	.word	0x20000088
 8000210:	20000094 	.word	0x20000094
 8000214:	080067e8 	.word	0x080067e8

08000218 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint32_t pretime=HAL_GetTick();
 8000220:	f000 fb64 	bl	80008ec <HAL_GetTick>
 8000224:	60f8      	str	r0, [r7, #12]
	uint32_t send_val;
  /* Infinite loop */
  for(;;)
  {

	  HAL_UART_Receive(&huart1,(uint8_t*)&send_val,1,100);
 8000226:	f107 0108 	add.w	r1, r7, #8
 800022a:	2364      	movs	r3, #100	; 0x64
 800022c:	2201      	movs	r2, #1
 800022e:	4819      	ldr	r0, [pc, #100]	; (8000294 <StartTask02+0x7c>)
 8000230:	f001 fe0b 	bl	8001e4a <HAL_UART_Receive>

	  if(send_val!=0){
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d018      	beq.n	800026c <StartTask02+0x54>
		  printf("\x1B[2J");
 800023a:	4817      	ldr	r0, [pc, #92]	; (8000298 <StartTask02+0x80>)
 800023c:	f005 fbd8 	bl	80059f0 <iprintf>
		  printf("task2-1) transmit val:%c\n",(uint8_t)send_val);
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	b2db      	uxtb	r3, r3
 8000244:	4619      	mov	r1, r3
 8000246:	4815      	ldr	r0, [pc, #84]	; (800029c <StartTask02+0x84>)
 8000248:	f005 fbd2 	bl	80059f0 <iprintf>
		  is_uart_receive=false;
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <StartTask02+0x88>)
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
		  osMessageQueuePut(myQueue01Handle,&send_val,1,10);
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <StartTask02+0x8c>)
 8000254:	6818      	ldr	r0, [r3, #0]
 8000256:	f107 0108 	add.w	r1, r7, #8
 800025a:	230a      	movs	r3, #10
 800025c:	2201      	movs	r2, #1
 800025e:	f002 fd9b 	bl	8002d98 <osMessageQueuePut>
		  task_send=true;
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <StartTask02+0x90>)
 8000264:	2201      	movs	r2, #1
 8000266:	701a      	strb	r2, [r3, #0]
		  send_val=0;
 8000268:	2300      	movs	r3, #0
 800026a:	60bb      	str	r3, [r7, #8]
	  }
	  if(HAL_GetTick()-pretime>300){
 800026c:	f000 fb3e 	bl	80008ec <HAL_GetTick>
 8000270:	4602      	mov	r2, r0
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	1ad3      	subs	r3, r2, r3
 8000276:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800027a:	d907      	bls.n	800028c <StartTask02+0x74>
	  	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 800027c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000280:	480a      	ldr	r0, [pc, #40]	; (80002ac <StartTask02+0x94>)
 8000282:	f000 fe6b 	bl	8000f5c <HAL_GPIO_TogglePin>
	  	pretime=HAL_GetTick();
 8000286:	f000 fb31 	bl	80008ec <HAL_GetTick>
 800028a:	60f8      	str	r0, [r7, #12]
	}

    osDelay(1);
 800028c:	2001      	movs	r0, #1
 800028e:	f002 fccf 	bl	8002c30 <osDelay>
	  HAL_UART_Receive(&huart1,(uint8_t*)&send_val,1,100);
 8000292:	e7c8      	b.n	8000226 <StartTask02+0xe>
 8000294:	200000e8 	.word	0x200000e8
 8000298:	0800680c 	.word	0x0800680c
 800029c:	08006814 	.word	0x08006814
 80002a0:	20000098 	.word	0x20000098
 80002a4:	20000094 	.word	0x20000094
 80002a8:	20000088 	.word	0x20000088
 80002ac:	40010c00 	.word	0x40010c00

080002b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c4:	4b1e      	ldr	r3, [pc, #120]	; (8000340 <MX_GPIO_Init+0x90>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a1d      	ldr	r2, [pc, #116]	; (8000340 <MX_GPIO_Init+0x90>)
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <MX_GPIO_Init+0x90>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0320 	and.w	r3, r3, #32
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <MX_GPIO_Init+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a17      	ldr	r2, [pc, #92]	; (8000340 <MX_GPIO_Init+0x90>)
 80002e2:	f043 0308 	orr.w	r3, r3, #8
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <MX_GPIO_Init+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0308 	and.w	r3, r3, #8
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4b12      	ldr	r3, [pc, #72]	; (8000340 <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a11      	ldr	r2, [pc, #68]	; (8000340 <MX_GPIO_Init+0x90>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_3, GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	f241 0108 	movw	r1, #4104	; 0x1008
 8000312:	480c      	ldr	r0, [pc, #48]	; (8000344 <MX_GPIO_Init+0x94>)
 8000314:	f000 fe0a 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 8000318:	f241 0308 	movw	r3, #4104	; 0x1008
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2302      	movs	r3, #2
 8000328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	4619      	mov	r1, r3
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <MX_GPIO_Init+0x94>)
 8000332:	f000 fc77 	bl	8000c24 <HAL_GPIO_Init>

}
 8000336:	bf00      	nop
 8000338:	3720      	adds	r7, #32
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40021000 	.word	0x40021000
 8000344:	40010c00 	.word	0x40010c00

08000348 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch){
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch,1,100);
 8000350:	1d39      	adds	r1, r7, #4
 8000352:	2364      	movs	r3, #100	; 0x64
 8000354:	2201      	movs	r2, #1
 8000356:	4804      	ldr	r0, [pc, #16]	; (8000368 <__io_putchar+0x20>)
 8000358:	f001 fcf4 	bl	8001d44 <HAL_UART_Transmit>
	return 0;
 800035c:	2300      	movs	r3, #0
}
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	200000e8 	.word	0x200000e8

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 fa94 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f80b 	bl	800038e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000378:	f7ff ff9a 	bl	80002b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800037c:	f000 f9ea 	bl	8000754 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000380:	f002 fb46 	bl	8002a10 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000384:	f7ff fee4 	bl	8000150 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000388:	f002 fb74 	bl	8002a74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800038c:	e7fe      	b.n	800038c <main+0x20>

0800038e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b090      	sub	sp, #64	; 0x40
 8000392:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000394:	f107 0318 	add.w	r3, r7, #24
 8000398:	2228      	movs	r2, #40	; 0x28
 800039a:	2100      	movs	r1, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f005 fb7c 	bl	8005a9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b0:	2301      	movs	r3, #1
 80003b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003be:	2301      	movs	r3, #1
 80003c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c2:	2302      	movs	r3, #2
 80003c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d2:	f107 0318 	add.w	r3, r7, #24
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 fdda 	bl	8000f90 <HAL_RCC_OscConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003e2:	f000 f82b 	bl	800043c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	230f      	movs	r3, #15
 80003e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ea:	2302      	movs	r3, #2
 80003ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2102      	movs	r1, #2
 8000400:	4618      	mov	r0, r3
 8000402:	f001 f847 	bl	8001494 <HAL_RCC_ClockConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800040c:	f000 f816 	bl	800043c <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3740      	adds	r7, #64	; 0x40
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d101      	bne.n	800042e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800042a:	f000 fa4d 	bl	80008c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40000800 	.word	0x40000800

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	e7fe      	b.n	8000444 <Error_Handler+0x8>
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <HAL_MspInit+0x68>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a17      	ldr	r2, [pc, #92]	; (80004b0 <HAL_MspInit+0x68>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <HAL_MspInit+0x68>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <HAL_MspInit+0x68>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <HAL_MspInit+0x68>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <HAL_MspInit+0x68>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800047e:	2200      	movs	r2, #0
 8000480:	210f      	movs	r1, #15
 8000482:	f06f 0001 	mvn.w	r0, #1
 8000486:	f000 faf0 	bl	8000a6a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800048a:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <HAL_MspInit+0x6c>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <HAL_MspInit+0x6c>)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010000 	.word	0x40010000

080004b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08e      	sub	sp, #56	; 0x38
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004c0:	2300      	movs	r3, #0
 80004c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80004c4:	2300      	movs	r3, #0
 80004c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004c8:	2300      	movs	r3, #0
 80004ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004ce:	4b34      	ldr	r3, [pc, #208]	; (80005a0 <HAL_InitTick+0xe8>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a33      	ldr	r2, [pc, #204]	; (80005a0 <HAL_InitTick+0xe8>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b31      	ldr	r3, [pc, #196]	; (80005a0 <HAL_InitTick+0xe8>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 0304 	and.w	r3, r3, #4
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004e6:	f107 0210 	add.w	r2, r7, #16
 80004ea:	f107 0314 	add.w	r3, r7, #20
 80004ee:	4611      	mov	r1, r2
 80004f0:	4618      	mov	r0, r3
 80004f2:	f001 f93f 	bl	8001774 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004f6:	6a3b      	ldr	r3, [r7, #32]
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d103      	bne.n	8000508 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000500:	f001 f910 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 8000504:	6378      	str	r0, [r7, #52]	; 0x34
 8000506:	e004      	b.n	8000512 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000508:	f001 f90c 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 800050c:	4603      	mov	r3, r0
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000514:	4a23      	ldr	r2, [pc, #140]	; (80005a4 <HAL_InitTick+0xec>)
 8000516:	fba2 2303 	umull	r2, r3, r2, r3
 800051a:	0c9b      	lsrs	r3, r3, #18
 800051c:	3b01      	subs	r3, #1
 800051e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000520:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <HAL_InitTick+0xf0>)
 8000522:	4a22      	ldr	r2, [pc, #136]	; (80005ac <HAL_InitTick+0xf4>)
 8000524:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000526:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <HAL_InitTick+0xf0>)
 8000528:	f240 32e7 	movw	r2, #999	; 0x3e7
 800052c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800052e:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <HAL_InitTick+0xf0>)
 8000530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000532:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <HAL_InitTick+0xf0>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <HAL_InitTick+0xf0>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000540:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <HAL_InitTick+0xf0>)
 8000542:	2200      	movs	r2, #0
 8000544:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000546:	4818      	ldr	r0, [pc, #96]	; (80005a8 <HAL_InitTick+0xf0>)
 8000548:	f001 f962 	bl	8001810 <HAL_TIM_Base_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000552:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000556:	2b00      	cmp	r3, #0
 8000558:	d11b      	bne.n	8000592 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800055a:	4813      	ldr	r0, [pc, #76]	; (80005a8 <HAL_InitTick+0xf0>)
 800055c:	f001 f9b0 	bl	80018c0 <HAL_TIM_Base_Start_IT>
 8000560:	4603      	mov	r3, r0
 8000562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000566:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800056a:	2b00      	cmp	r3, #0
 800056c:	d111      	bne.n	8000592 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800056e:	201e      	movs	r0, #30
 8000570:	f000 fa97 	bl	8000aa2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b0f      	cmp	r3, #15
 8000578:	d808      	bhi.n	800058c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800057a:	2200      	movs	r2, #0
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	201e      	movs	r0, #30
 8000580:	f000 fa73 	bl	8000a6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_InitTick+0xf8>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
 800058a:	e002      	b.n	8000592 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000592:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000596:	4618      	mov	r0, r3
 8000598:	3738      	adds	r7, #56	; 0x38
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	431bde83 	.word	0x431bde83
 80005a8:	2000009c 	.word	0x2000009c
 80005ac:	40000800 	.word	0x40000800
 80005b0:	20000004 	.word	0x20000004

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b8:	e7fe      	b.n	80005b8 <NMI_Handler+0x4>

080005ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <HardFault_Handler+0x4>

080005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <MemManage_Handler+0x4>

080005c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
	...

080005e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <TIM4_IRQHandler+0x10>)
 80005e6:	f001 f9bd 	bl	8001964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	2000009c 	.word	0x2000009c

080005f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <USART1_IRQHandler+0x10>)
 80005fa:	f001 fcb9 	bl	8001f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000e8 	.word	0x200000e8

08000608 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	e00a      	b.n	8000630 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800061a:	f3af 8000 	nop.w
 800061e:	4601      	mov	r1, r0
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	60ba      	str	r2, [r7, #8]
 8000626:	b2ca      	uxtb	r2, r1
 8000628:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbf0      	blt.n	800061a <_read+0x12>
  }

  return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b086      	sub	sp, #24
 8000646:	af00      	add	r7, sp, #0
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	e009      	b.n	8000668 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	1c5a      	adds	r2, r3, #1
 8000658:	60ba      	str	r2, [r7, #8]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fe73 	bl	8000348 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3301      	adds	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	dbf1      	blt.n	8000654 <_write+0x12>
  }
  return len;
 8000670:	687b      	ldr	r3, [r7, #4]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <_close>:

int _close(int file)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006a0:	605a      	str	r2, [r3, #4]
  return 0;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr

080006ae <_isatty>:

int _isatty(int file)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr

080006c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006c2:	b480      	push	{r7}
 80006c4:	b085      	sub	sp, #20
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	60f8      	str	r0, [r7, #12]
 80006ca:	60b9      	str	r1, [r7, #8]
 80006cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006ce:	2300      	movs	r3, #0
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
	...

080006dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e4:	4a14      	ldr	r2, [pc, #80]	; (8000738 <_sbrk+0x5c>)
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <_sbrk+0x60>)
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d102      	bne.n	80006fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <_sbrk+0x64>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <_sbrk+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <_sbrk+0x64>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	693a      	ldr	r2, [r7, #16]
 8000708:	429a      	cmp	r2, r3
 800070a:	d207      	bcs.n	800071c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800070c:	f005 fa6a 	bl	8005be4 <__errno>
 8000710:	4603      	mov	r3, r0
 8000712:	220c      	movs	r2, #12
 8000714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	e009      	b.n	8000730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <_sbrk+0x64>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <_sbrk+0x64>)
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4413      	add	r3, r2
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <_sbrk+0x64>)
 800072c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	4618      	mov	r0, r3
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20005000 	.word	0x20005000
 800073c:	00000400 	.word	0x00000400
 8000740:	200000e4 	.word	0x200000e4
 8000744:	20001c60 	.word	0x20001c60

08000748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART1_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART1_UART_Init+0x4c>)
 800078c:	f001 fa8a 	bl	8001ca4 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f7ff fe51 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000e8 	.word	0x200000e8
 80007a4:	40013800 	.word	0x40013800

080007a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a20      	ldr	r2, [pc, #128]	; (8000844 <HAL_UART_MspInit+0x9c>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d139      	bne.n	800083c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <HAL_UART_MspInit+0xa0>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <HAL_UART_MspInit+0xa0>)
 80007ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <HAL_UART_MspInit+0xa0>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <HAL_UART_MspInit+0xa0>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a18      	ldr	r2, [pc, #96]	; (8000848 <HAL_UART_MspInit+0xa0>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <HAL_UART_MspInit+0xa0>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	4619      	mov	r1, r3
 800080c:	480f      	ldr	r0, [pc, #60]	; (800084c <HAL_UART_MspInit+0xa4>)
 800080e:	f000 fa09 	bl	8000c24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000816:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	4619      	mov	r1, r3
 8000826:	4809      	ldr	r0, [pc, #36]	; (800084c <HAL_UART_MspInit+0xa4>)
 8000828:	f000 f9fc 	bl	8000c24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	2105      	movs	r1, #5
 8000830:	2025      	movs	r0, #37	; 0x25
 8000832:	f000 f91a 	bl	8000a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000836:	2025      	movs	r0, #37	; 0x25
 8000838:	f000 f933 	bl	8000aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40013800 	.word	0x40013800
 8000848:	40021000 	.word	0x40021000
 800084c:	40010800 	.word	0x40010800

08000850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000850:	f7ff ff7a 	bl	8000748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000856:	490c      	ldr	r1, [pc, #48]	; (8000888 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <LoopFillZerobss+0x16>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a09      	ldr	r2, [pc, #36]	; (8000890 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800086c:	4c09      	ldr	r4, [pc, #36]	; (8000894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800087a:	f005 f9b9 	bl	8005bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087e:	f7ff fd75 	bl	800036c <main>
  bx lr
 8000882:	4770      	bx	lr
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800088c:	08006910 	.word	0x08006910
  ldr r2, =_sbss
 8000890:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000894:	20001c60 	.word	0x20001c60

08000898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_2_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_Init+0x28>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_Init+0x28>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f000 f8d1 	bl	8000a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b2:	200f      	movs	r0, #15
 80008b4:	f7ff fe00 	bl	80004b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b8:	f7ff fdc6 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40022000 	.word	0x40022000

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x20>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a03      	ldr	r2, [pc, #12]	; (80008e8 <HAL_IncTick+0x20>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000130 	.word	0x20000130

080008ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <HAL_GetTick+0x10>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	20000130 	.word	0x20000130

08000900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <__NVIC_GetPriorityGrouping+0x18>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 0307 	and.w	r3, r3, #7
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	db0b      	blt.n	800098e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f003 021f 	and.w	r2, r3, #31
 800097c:	4906      	ldr	r1, [pc, #24]	; (8000998 <__NVIC_EnableIRQ+0x34>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	2001      	movs	r0, #1
 8000986:	fa00 f202 	lsl.w	r2, r0, r2
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	e000e100 	.word	0xe000e100

0800099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db0a      	blt.n	80009c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	490c      	ldr	r1, [pc, #48]	; (80009e8 <__NVIC_SetPriority+0x4c>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	0112      	lsls	r2, r2, #4
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	440b      	add	r3, r1
 80009c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c4:	e00a      	b.n	80009dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4908      	ldr	r1, [pc, #32]	; (80009ec <__NVIC_SetPriority+0x50>)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	3b04      	subs	r3, #4
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	440b      	add	r3, r1
 80009da:	761a      	strb	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f1c3 0307 	rsb	r3, r3, #7
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	bf28      	it	cs
 8000a0e:	2304      	movcs	r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3304      	adds	r3, #4
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d902      	bls.n	8000a20 <NVIC_EncodePriority+0x30>
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3b03      	subs	r3, #3
 8000a1e:	e000      	b.n	8000a22 <NVIC_EncodePriority+0x32>
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	401a      	ands	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43d9      	mvns	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	4313      	orrs	r3, r2
         );
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3724      	adds	r7, #36	; 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff4f 	bl	8000900 <__NVIC_SetPriorityGrouping>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a7c:	f7ff ff64 	bl	8000948 <__NVIC_GetPriorityGrouping>
 8000a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	6978      	ldr	r0, [r7, #20]
 8000a88:	f7ff ffb2 	bl	80009f0 <NVIC_EncodePriority>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff81 	bl	800099c <__NVIC_SetPriority>
}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff57 	bl	8000964 <__NVIC_EnableIRQ>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b085      	sub	sp, #20
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b02      	cmp	r3, #2
 8000ad4:	d008      	beq.n	8000ae8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2204      	movs	r2, #4
 8000ada:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e020      	b.n	8000b2a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 020e 	bic.w	r2, r2, #14
 8000af6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f022 0201 	bic.w	r2, r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b10:	2101      	movs	r1, #1
 8000b12:	fa01 f202 	lsl.w	r2, r1, r2
 8000b16:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d005      	beq.n	8000b58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2204      	movs	r2, #4
 8000b50:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	e051      	b.n	8000bfc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f022 020e 	bic.w	r2, r2, #14
 8000b66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 0201 	bic.w	r2, r2, #1
 8000b76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <HAL_DMA_Abort_IT+0xd4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d029      	beq.n	8000bd6 <HAL_DMA_Abort_IT+0xa2>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <HAL_DMA_Abort_IT+0xd8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d022      	beq.n	8000bd2 <HAL_DMA_Abort_IT+0x9e>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <HAL_DMA_Abort_IT+0xdc>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d01a      	beq.n	8000bcc <HAL_DMA_Abort_IT+0x98>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a1e      	ldr	r2, [pc, #120]	; (8000c14 <HAL_DMA_Abort_IT+0xe0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d012      	beq.n	8000bc6 <HAL_DMA_Abort_IT+0x92>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <HAL_DMA_Abort_IT+0xe4>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d00a      	beq.n	8000bc0 <HAL_DMA_Abort_IT+0x8c>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <HAL_DMA_Abort_IT+0xe8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d102      	bne.n	8000bba <HAL_DMA_Abort_IT+0x86>
 8000bb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bb8:	e00e      	b.n	8000bd8 <HAL_DMA_Abort_IT+0xa4>
 8000bba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bbe:	e00b      	b.n	8000bd8 <HAL_DMA_Abort_IT+0xa4>
 8000bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc4:	e008      	b.n	8000bd8 <HAL_DMA_Abort_IT+0xa4>
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	e005      	b.n	8000bd8 <HAL_DMA_Abort_IT+0xa4>
 8000bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd0:	e002      	b.n	8000bd8 <HAL_DMA_Abort_IT+0xa4>
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	e000      	b.n	8000bd8 <HAL_DMA_Abort_IT+0xa4>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <HAL_DMA_Abort_IT+0xec>)
 8000bda:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2201      	movs	r2, #1
 8000be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	4798      	blx	r3
    } 
  }
  return status;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40020008 	.word	0x40020008
 8000c0c:	4002001c 	.word	0x4002001c
 8000c10:	40020030 	.word	0x40020030
 8000c14:	40020044 	.word	0x40020044
 8000c18:	40020058 	.word	0x40020058
 8000c1c:	4002006c 	.word	0x4002006c
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b08b      	sub	sp, #44	; 0x2c
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c36:	e169      	b.n	8000f0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	69fa      	ldr	r2, [r7, #28]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f040 8158 	bne.w	8000f06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	4a9a      	ldr	r2, [pc, #616]	; (8000ec4 <HAL_GPIO_Init+0x2a0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d05e      	beq.n	8000d1e <HAL_GPIO_Init+0xfa>
 8000c60:	4a98      	ldr	r2, [pc, #608]	; (8000ec4 <HAL_GPIO_Init+0x2a0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d875      	bhi.n	8000d52 <HAL_GPIO_Init+0x12e>
 8000c66:	4a98      	ldr	r2, [pc, #608]	; (8000ec8 <HAL_GPIO_Init+0x2a4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d058      	beq.n	8000d1e <HAL_GPIO_Init+0xfa>
 8000c6c:	4a96      	ldr	r2, [pc, #600]	; (8000ec8 <HAL_GPIO_Init+0x2a4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d86f      	bhi.n	8000d52 <HAL_GPIO_Init+0x12e>
 8000c72:	4a96      	ldr	r2, [pc, #600]	; (8000ecc <HAL_GPIO_Init+0x2a8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d052      	beq.n	8000d1e <HAL_GPIO_Init+0xfa>
 8000c78:	4a94      	ldr	r2, [pc, #592]	; (8000ecc <HAL_GPIO_Init+0x2a8>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d869      	bhi.n	8000d52 <HAL_GPIO_Init+0x12e>
 8000c7e:	4a94      	ldr	r2, [pc, #592]	; (8000ed0 <HAL_GPIO_Init+0x2ac>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d04c      	beq.n	8000d1e <HAL_GPIO_Init+0xfa>
 8000c84:	4a92      	ldr	r2, [pc, #584]	; (8000ed0 <HAL_GPIO_Init+0x2ac>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d863      	bhi.n	8000d52 <HAL_GPIO_Init+0x12e>
 8000c8a:	4a92      	ldr	r2, [pc, #584]	; (8000ed4 <HAL_GPIO_Init+0x2b0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d046      	beq.n	8000d1e <HAL_GPIO_Init+0xfa>
 8000c90:	4a90      	ldr	r2, [pc, #576]	; (8000ed4 <HAL_GPIO_Init+0x2b0>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d85d      	bhi.n	8000d52 <HAL_GPIO_Init+0x12e>
 8000c96:	2b12      	cmp	r3, #18
 8000c98:	d82a      	bhi.n	8000cf0 <HAL_GPIO_Init+0xcc>
 8000c9a:	2b12      	cmp	r3, #18
 8000c9c:	d859      	bhi.n	8000d52 <HAL_GPIO_Init+0x12e>
 8000c9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ca4 <HAL_GPIO_Init+0x80>)
 8000ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca4:	08000d1f 	.word	0x08000d1f
 8000ca8:	08000cf9 	.word	0x08000cf9
 8000cac:	08000d0b 	.word	0x08000d0b
 8000cb0:	08000d4d 	.word	0x08000d4d
 8000cb4:	08000d53 	.word	0x08000d53
 8000cb8:	08000d53 	.word	0x08000d53
 8000cbc:	08000d53 	.word	0x08000d53
 8000cc0:	08000d53 	.word	0x08000d53
 8000cc4:	08000d53 	.word	0x08000d53
 8000cc8:	08000d53 	.word	0x08000d53
 8000ccc:	08000d53 	.word	0x08000d53
 8000cd0:	08000d53 	.word	0x08000d53
 8000cd4:	08000d53 	.word	0x08000d53
 8000cd8:	08000d53 	.word	0x08000d53
 8000cdc:	08000d53 	.word	0x08000d53
 8000ce0:	08000d53 	.word	0x08000d53
 8000ce4:	08000d53 	.word	0x08000d53
 8000ce8:	08000d01 	.word	0x08000d01
 8000cec:	08000d15 	.word	0x08000d15
 8000cf0:	4a79      	ldr	r2, [pc, #484]	; (8000ed8 <HAL_GPIO_Init+0x2b4>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d013      	beq.n	8000d1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cf6:	e02c      	b.n	8000d52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	623b      	str	r3, [r7, #32]
          break;
 8000cfe:	e029      	b.n	8000d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	3304      	adds	r3, #4
 8000d06:	623b      	str	r3, [r7, #32]
          break;
 8000d08:	e024      	b.n	8000d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	3308      	adds	r3, #8
 8000d10:	623b      	str	r3, [r7, #32]
          break;
 8000d12:	e01f      	b.n	8000d54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	330c      	adds	r3, #12
 8000d1a:	623b      	str	r3, [r7, #32]
          break;
 8000d1c:	e01a      	b.n	8000d54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d102      	bne.n	8000d2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d26:	2304      	movs	r3, #4
 8000d28:	623b      	str	r3, [r7, #32]
          break;
 8000d2a:	e013      	b.n	8000d54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d105      	bne.n	8000d40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d34:	2308      	movs	r3, #8
 8000d36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69fa      	ldr	r2, [r7, #28]
 8000d3c:	611a      	str	r2, [r3, #16]
          break;
 8000d3e:	e009      	b.n	8000d54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d40:	2308      	movs	r3, #8
 8000d42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69fa      	ldr	r2, [r7, #28]
 8000d48:	615a      	str	r2, [r3, #20]
          break;
 8000d4a:	e003      	b.n	8000d54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
          break;
 8000d50:	e000      	b.n	8000d54 <HAL_GPIO_Init+0x130>
          break;
 8000d52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	2bff      	cmp	r3, #255	; 0xff
 8000d58:	d801      	bhi.n	8000d5e <HAL_GPIO_Init+0x13a>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	e001      	b.n	8000d62 <HAL_GPIO_Init+0x13e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3304      	adds	r3, #4
 8000d62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	2bff      	cmp	r3, #255	; 0xff
 8000d68:	d802      	bhi.n	8000d70 <HAL_GPIO_Init+0x14c>
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	e002      	b.n	8000d76 <HAL_GPIO_Init+0x152>
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	3b08      	subs	r3, #8
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	401a      	ands	r2, r3
 8000d88:	6a39      	ldr	r1, [r7, #32]
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	431a      	orrs	r2, r3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80b1 	beq.w	8000f06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000da4:	4b4d      	ldr	r3, [pc, #308]	; (8000edc <HAL_GPIO_Init+0x2b8>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a4c      	ldr	r2, [pc, #304]	; (8000edc <HAL_GPIO_Init+0x2b8>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b4a      	ldr	r3, [pc, #296]	; (8000edc <HAL_GPIO_Init+0x2b8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dbc:	4a48      	ldr	r2, [pc, #288]	; (8000ee0 <HAL_GPIO_Init+0x2bc>)
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a40      	ldr	r2, [pc, #256]	; (8000ee4 <HAL_GPIO_Init+0x2c0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d013      	beq.n	8000e10 <HAL_GPIO_Init+0x1ec>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a3f      	ldr	r2, [pc, #252]	; (8000ee8 <HAL_GPIO_Init+0x2c4>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d00d      	beq.n	8000e0c <HAL_GPIO_Init+0x1e8>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a3e      	ldr	r2, [pc, #248]	; (8000eec <HAL_GPIO_Init+0x2c8>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d007      	beq.n	8000e08 <HAL_GPIO_Init+0x1e4>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a3d      	ldr	r2, [pc, #244]	; (8000ef0 <HAL_GPIO_Init+0x2cc>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d101      	bne.n	8000e04 <HAL_GPIO_Init+0x1e0>
 8000e00:	2303      	movs	r3, #3
 8000e02:	e006      	b.n	8000e12 <HAL_GPIO_Init+0x1ee>
 8000e04:	2304      	movs	r3, #4
 8000e06:	e004      	b.n	8000e12 <HAL_GPIO_Init+0x1ee>
 8000e08:	2302      	movs	r3, #2
 8000e0a:	e002      	b.n	8000e12 <HAL_GPIO_Init+0x1ee>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e000      	b.n	8000e12 <HAL_GPIO_Init+0x1ee>
 8000e10:	2300      	movs	r3, #0
 8000e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e14:	f002 0203 	and.w	r2, r2, #3
 8000e18:	0092      	lsls	r2, r2, #2
 8000e1a:	4093      	lsls	r3, r2
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e22:	492f      	ldr	r1, [pc, #188]	; (8000ee0 <HAL_GPIO_Init+0x2bc>)
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	492c      	ldr	r1, [pc, #176]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	608b      	str	r3, [r1, #8]
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	4928      	ldr	r1, [pc, #160]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d006      	beq.n	8000e72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	4922      	ldr	r1, [pc, #136]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	60cb      	str	r3, [r1, #12]
 8000e70:	e006      	b.n	8000e80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	491e      	ldr	r1, [pc, #120]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	4918      	ldr	r1, [pc, #96]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	604b      	str	r3, [r1, #4]
 8000e98:	e006      	b.n	8000ea8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	4914      	ldr	r1, [pc, #80]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d021      	beq.n	8000ef8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <HAL_GPIO_Init+0x2d0>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	600b      	str	r3, [r1, #0]
 8000ec0:	e021      	b.n	8000f06 <HAL_GPIO_Init+0x2e2>
 8000ec2:	bf00      	nop
 8000ec4:	10320000 	.word	0x10320000
 8000ec8:	10310000 	.word	0x10310000
 8000ecc:	10220000 	.word	0x10220000
 8000ed0:	10210000 	.word	0x10210000
 8000ed4:	10120000 	.word	0x10120000
 8000ed8:	10110000 	.word	0x10110000
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	40010c00 	.word	0x40010c00
 8000eec:	40011000 	.word	0x40011000
 8000ef0:	40011400 	.word	0x40011400
 8000ef4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_GPIO_Init+0x304>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	4909      	ldr	r1, [pc, #36]	; (8000f28 <HAL_GPIO_Init+0x304>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	3301      	adds	r3, #1
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	fa22 f303 	lsr.w	r3, r2, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f47f ae8e 	bne.w	8000c38 <HAL_GPIO_Init+0x14>
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	372c      	adds	r7, #44	; 0x2c
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	40010400 	.word	0x40010400

08000f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f3c:	787b      	ldrb	r3, [r7, #1]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f48:	e003      	b.n	8000f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	041a      	lsls	r2, r3, #16
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	611a      	str	r2, [r3, #16]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4013      	ands	r3, r2
 8000f74:	041a      	lsls	r2, r3, #16
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43d9      	mvns	r1, r3
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	400b      	ands	r3, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	611a      	str	r2, [r3, #16]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
	...

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e272      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 8087 	beq.w	80010be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb0:	4b92      	ldr	r3, [pc, #584]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d00c      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fbc:	4b8f      	ldr	r3, [pc, #572]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d112      	bne.n	8000fee <HAL_RCC_OscConfig+0x5e>
 8000fc8:	4b8c      	ldr	r3, [pc, #560]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd4:	d10b      	bne.n	8000fee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd6:	4b89      	ldr	r3, [pc, #548]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d06c      	beq.n	80010bc <HAL_RCC_OscConfig+0x12c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d168      	bne.n	80010bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e24c      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff6:	d106      	bne.n	8001006 <HAL_RCC_OscConfig+0x76>
 8000ff8:	4b80      	ldr	r3, [pc, #512]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a7f      	ldr	r2, [pc, #508]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	e02e      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x98>
 800100e:	4b7b      	ldr	r3, [pc, #492]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a7a      	ldr	r2, [pc, #488]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b78      	ldr	r3, [pc, #480]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a77      	ldr	r2, [pc, #476]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e01d      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0xbc>
 8001032:	4b72      	ldr	r3, [pc, #456]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a71      	ldr	r2, [pc, #452]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	4b6f      	ldr	r3, [pc, #444]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a6e      	ldr	r2, [pc, #440]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e00b      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 800104c:	4b6b      	ldr	r3, [pc, #428]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a6a      	ldr	r2, [pc, #424]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b68      	ldr	r3, [pc, #416]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a67      	ldr	r2, [pc, #412]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800105e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001062:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fc3e 	bl	80008ec <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fc3a 	bl	80008ec <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	; 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e200      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0xe4>
 8001092:	e014      	b.n	80010be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fc2a 	bl	80008ec <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fc26 	bl	80008ec <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e1ec      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	4b53      	ldr	r3, [pc, #332]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x10c>
 80010ba:	e000      	b.n	80010be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d063      	beq.n	8001192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ca:	4b4c      	ldr	r3, [pc, #304]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010d6:	4b49      	ldr	r3, [pc, #292]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d11c      	bne.n	800111c <HAL_RCC_OscConfig+0x18c>
 80010e2:	4b46      	ldr	r3, [pc, #280]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d116      	bne.n	800111c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	4b43      	ldr	r3, [pc, #268]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_RCC_OscConfig+0x176>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d001      	beq.n	8001106 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e1c0      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001106:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4939      	ldr	r1, [pc, #228]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	e03a      	b.n	8001192 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d020      	beq.n	8001166 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001124:	4b36      	ldr	r3, [pc, #216]	; (8001200 <HAL_RCC_OscConfig+0x270>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fbdf 	bl	80008ec <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fbdb 	bl	80008ec <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e1a1      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4927      	ldr	r1, [pc, #156]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]
 8001164:	e015      	b.n	8001192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <HAL_RCC_OscConfig+0x270>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fbbe 	bl	80008ec <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fbba 	bl	80008ec <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e180      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d03a      	beq.n	8001214 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d019      	beq.n	80011da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_RCC_OscConfig+0x274>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ac:	f7ff fb9e 	bl	80008ec <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fb9a 	bl	80008ec <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e160      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f000 fafe 	bl	80017d4 <RCC_Delay>
 80011d8:	e01c      	b.n	8001214 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_RCC_OscConfig+0x274>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e0:	f7ff fb84 	bl	80008ec <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e6:	e00f      	b.n	8001208 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e8:	f7ff fb80 	bl	80008ec <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d908      	bls.n	8001208 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e146      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	42420000 	.word	0x42420000
 8001204:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001208:	4b92      	ldr	r3, [pc, #584]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1e9      	bne.n	80011e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80a6 	beq.w	800136e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001226:	4b8b      	ldr	r3, [pc, #556]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10d      	bne.n	800124e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b88      	ldr	r3, [pc, #544]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a87      	ldr	r2, [pc, #540]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b85      	ldr	r3, [pc, #532]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800124a:	2301      	movs	r3, #1
 800124c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124e:	4b82      	ldr	r3, [pc, #520]	; (8001458 <HAL_RCC_OscConfig+0x4c8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	2b00      	cmp	r3, #0
 8001258:	d118      	bne.n	800128c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800125a:	4b7f      	ldr	r3, [pc, #508]	; (8001458 <HAL_RCC_OscConfig+0x4c8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a7e      	ldr	r2, [pc, #504]	; (8001458 <HAL_RCC_OscConfig+0x4c8>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001266:	f7ff fb41 	bl	80008ec <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126e:	f7ff fb3d 	bl	80008ec <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b64      	cmp	r3, #100	; 0x64
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e103      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001280:	4b75      	ldr	r3, [pc, #468]	; (8001458 <HAL_RCC_OscConfig+0x4c8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d106      	bne.n	80012a2 <HAL_RCC_OscConfig+0x312>
 8001294:	4b6f      	ldr	r3, [pc, #444]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4a6e      	ldr	r2, [pc, #440]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6213      	str	r3, [r2, #32]
 80012a0:	e02d      	b.n	80012fe <HAL_RCC_OscConfig+0x36e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0x334>
 80012aa:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	4a69      	ldr	r2, [pc, #420]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	f023 0301 	bic.w	r3, r3, #1
 80012b4:	6213      	str	r3, [r2, #32]
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4a66      	ldr	r2, [pc, #408]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	f023 0304 	bic.w	r3, r3, #4
 80012c0:	6213      	str	r3, [r2, #32]
 80012c2:	e01c      	b.n	80012fe <HAL_RCC_OscConfig+0x36e>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d10c      	bne.n	80012e6 <HAL_RCC_OscConfig+0x356>
 80012cc:	4b61      	ldr	r3, [pc, #388]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4a60      	ldr	r2, [pc, #384]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	6213      	str	r3, [r2, #32]
 80012d8:	4b5e      	ldr	r3, [pc, #376]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4a5d      	ldr	r2, [pc, #372]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6213      	str	r3, [r2, #32]
 80012e4:	e00b      	b.n	80012fe <HAL_RCC_OscConfig+0x36e>
 80012e6:	4b5b      	ldr	r3, [pc, #364]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4a5a      	ldr	r2, [pc, #360]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	6213      	str	r3, [r2, #32]
 80012f2:	4b58      	ldr	r3, [pc, #352]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4a57      	ldr	r2, [pc, #348]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	f023 0304 	bic.w	r3, r3, #4
 80012fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d015      	beq.n	8001332 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff faf1 	bl	80008ec <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f7ff faed 	bl	80008ec <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e0b1      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001324:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0ee      	beq.n	800130e <HAL_RCC_OscConfig+0x37e>
 8001330:	e014      	b.n	800135c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001332:	f7ff fadb 	bl	80008ec <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001338:	e00a      	b.n	8001350 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7ff fad7 	bl	80008ec <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	f241 3288 	movw	r2, #5000	; 0x1388
 8001348:	4293      	cmp	r3, r2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e09b      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001350:	4b40      	ldr	r3, [pc, #256]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ee      	bne.n	800133a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d105      	bne.n	800136e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001362:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a3b      	ldr	r2, [pc, #236]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800136c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8087 	beq.w	8001486 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b08      	cmp	r3, #8
 8001382:	d061      	beq.n	8001448 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d146      	bne.n	800141a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <HAL_RCC_OscConfig+0x4cc>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff faab 	bl	80008ec <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff faa7 	bl	80008ec <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e06d      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ac:	4b29      	ldr	r3, [pc, #164]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d108      	bne.n	80013d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	4921      	ldr	r1, [pc, #132]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a19      	ldr	r1, [r3, #32]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	430b      	orrs	r3, r1
 80013e6:	491b      	ldr	r1, [pc, #108]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_RCC_OscConfig+0x4cc>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fa7b 	bl	80008ec <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fa77 	bl	80008ec <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e03d      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x46a>
 8001418:	e035      	b.n	8001486 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_RCC_OscConfig+0x4cc>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fa64 	bl	80008ec <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff fa60 	bl	80008ec <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e026      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x498>
 8001446:	e01e      	b.n	8001486 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d107      	bne.n	8001460 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e019      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
 8001454:	40021000 	.word	0x40021000
 8001458:	40007000 	.word	0x40007000
 800145c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_RCC_OscConfig+0x500>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	429a      	cmp	r2, r3
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000

08001494 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0d0      	b.n	800164a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a8:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <HAL_RCC_ClockConfig+0x1c0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d910      	bls.n	80014d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b6:	4b67      	ldr	r3, [pc, #412]	; (8001654 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 0207 	bic.w	r2, r3, #7
 80014be:	4965      	ldr	r1, [pc, #404]	; (8001654 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b63      	ldr	r3, [pc, #396]	; (8001654 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0b8      	b.n	800164a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f0:	4b59      	ldr	r3, [pc, #356]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001508:	4b53      	ldr	r3, [pc, #332]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a52      	ldr	r2, [pc, #328]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001512:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001514:	4b50      	ldr	r3, [pc, #320]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	494d      	ldr	r1, [pc, #308]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	4313      	orrs	r3, r2
 8001524:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d040      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d115      	bne.n	8001572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e07f      	b.n	800164a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001552:	4b41      	ldr	r3, [pc, #260]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e073      	b.n	800164a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001562:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e06b      	b.n	800164a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001572:	4b39      	ldr	r3, [pc, #228]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f023 0203 	bic.w	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4936      	ldr	r1, [pc, #216]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001584:	f7ff f9b2 	bl	80008ec <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158a:	e00a      	b.n	80015a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158c:	f7ff f9ae 	bl	80008ec <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e053      	b.n	800164a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 020c 	and.w	r2, r3, #12
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d1eb      	bne.n	800158c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_RCC_ClockConfig+0x1c0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d210      	bcs.n	80015e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 0207 	bic.w	r2, r3, #7
 80015ca:	4922      	ldr	r1, [pc, #136]	; (8001654 <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e032      	b.n	800164a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f0:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4916      	ldr	r1, [pc, #88]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	490e      	ldr	r1, [pc, #56]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	4313      	orrs	r3, r2
 8001620:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001622:	f000 f821 	bl	8001668 <HAL_RCC_GetSysClockFreq>
 8001626:	4602      	mov	r2, r0
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	490a      	ldr	r1, [pc, #40]	; (800165c <HAL_RCC_ClockConfig+0x1c8>)
 8001634:	5ccb      	ldrb	r3, [r1, r3]
 8001636:	fa22 f303 	lsr.w	r3, r2, r3
 800163a:	4a09      	ldr	r2, [pc, #36]	; (8001660 <HAL_RCC_ClockConfig+0x1cc>)
 800163c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_ClockConfig+0x1d0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff38 	bl	80004b8 <HAL_InitTick>

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40022000 	.word	0x40022000
 8001658:	40021000 	.word	0x40021000
 800165c:	080068a8 	.word	0x080068a8
 8001660:	20000000 	.word	0x20000000
 8001664:	20000004 	.word	0x20000004

08001668 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_RCC_GetSysClockFreq+0x94>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b04      	cmp	r3, #4
 8001690:	d002      	beq.n	8001698 <HAL_RCC_GetSysClockFreq+0x30>
 8001692:	2b08      	cmp	r3, #8
 8001694:	d003      	beq.n	800169e <HAL_RCC_GetSysClockFreq+0x36>
 8001696:	e027      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_RCC_GetSysClockFreq+0x98>)
 800169a:	613b      	str	r3, [r7, #16]
      break;
 800169c:	e027      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	0c9b      	lsrs	r3, r3, #18
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016a8:	5cd3      	ldrb	r3, [r2, r3]
 80016aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d010      	beq.n	80016d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_RCC_GetSysClockFreq+0x94>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	0c5b      	lsrs	r3, r3, #17
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	4a11      	ldr	r2, [pc, #68]	; (8001708 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016c2:	5cd3      	ldrb	r3, [r2, r3]
 80016c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ca:	fb03 f202 	mul.w	r2, r3, r2
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e004      	b.n	80016e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a0c      	ldr	r2, [pc, #48]	; (800170c <HAL_RCC_GetSysClockFreq+0xa4>)
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	613b      	str	r3, [r7, #16]
      break;
 80016e6:	e002      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ea:	613b      	str	r3, [r7, #16]
      break;
 80016ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ee:	693b      	ldr	r3, [r7, #16]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	371c      	adds	r7, #28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	007a1200 	.word	0x007a1200
 8001704:	080068c0 	.word	0x080068c0
 8001708:	080068d0 	.word	0x080068d0
 800170c:	003d0900 	.word	0x003d0900

08001710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001714:	4b02      	ldr	r3, [pc, #8]	; (8001720 <HAL_RCC_GetHCLKFreq+0x10>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000000 	.word	0x20000000

08001724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001728:	f7ff fff2 	bl	8001710 <HAL_RCC_GetHCLKFreq>
 800172c:	4602      	mov	r2, r0
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	4903      	ldr	r1, [pc, #12]	; (8001748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800173a:	5ccb      	ldrb	r3, [r1, r3]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	080068b8 	.word	0x080068b8

0800174c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001750:	f7ff ffde 	bl	8001710 <HAL_RCC_GetHCLKFreq>
 8001754:	4602      	mov	r2, r0
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	0adb      	lsrs	r3, r3, #11
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	4903      	ldr	r1, [pc, #12]	; (8001770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001762:	5ccb      	ldrb	r3, [r1, r3]
 8001764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	080068b8 	.word	0x080068b8

08001774 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	220f      	movs	r2, #15
 8001782:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_RCC_GetClockConfig+0x58>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0203 	and.w	r2, r3, #3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_RCC_GetClockConfig+0x58>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_RCC_GetClockConfig+0x58>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_RCC_GetClockConfig+0x58>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_RCC_GetClockConfig+0x5c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0207 	and.w	r2, r3, #7
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40022000 	.word	0x40022000

080017d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <RCC_Delay+0x34>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	; (800180c <RCC_Delay+0x38>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	0a5b      	lsrs	r3, r3, #9
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017f0:	bf00      	nop
  }
  while (Delay --);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	60fa      	str	r2, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f9      	bne.n	80017f0 <RCC_Delay+0x1c>
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	20000000 	.word	0x20000000
 800180c:	10624dd3 	.word	0x10624dd3

08001810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e041      	b.n	80018a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d106      	bne.n	800183c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f839 	bl	80018ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3304      	adds	r3, #4
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f000 f9b4 	bl	8001bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d001      	beq.n	80018d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e03a      	b.n	800194e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68da      	ldr	r2, [r3, #12]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a18      	ldr	r2, [pc, #96]	; (8001958 <HAL_TIM_Base_Start_IT+0x98>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00e      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001902:	d009      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_TIM_Base_Start_IT+0x9c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d004      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x58>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a13      	ldr	r2, [pc, #76]	; (8001960 <HAL_TIM_Base_Start_IT+0xa0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d111      	bne.n	800193c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b06      	cmp	r3, #6
 8001928:	d010      	beq.n	800194c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0201 	orr.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800193a:	e007      	b.n	800194c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40012c00 	.word	0x40012c00
 800195c:	40000400 	.word	0x40000400
 8001960:	40000800 	.word	0x40000800

08001964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d122      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b02      	cmp	r3, #2
 8001986:	d11b      	bne.n	80019c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f06f 0202 	mvn.w	r2, #2
 8001990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8ed 	bl	8001b86 <HAL_TIM_IC_CaptureCallback>
 80019ac:	e005      	b.n	80019ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f8e0 	bl	8001b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8ef 	bl	8001b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d122      	bne.n	8001a14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d11b      	bne.n	8001a14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0204 	mvn.w	r2, #4
 80019e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2202      	movs	r2, #2
 80019ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f8c3 	bl	8001b86 <HAL_TIM_IC_CaptureCallback>
 8001a00:	e005      	b.n	8001a0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f8b6 	bl	8001b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f8c5 	bl	8001b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d122      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d11b      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0208 	mvn.w	r2, #8
 8001a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f899 	bl	8001b86 <HAL_TIM_IC_CaptureCallback>
 8001a54:	e005      	b.n	8001a62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f88c 	bl	8001b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f89b 	bl	8001b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d122      	bne.n	8001abc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d11b      	bne.n	8001abc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0210 	mvn.w	r2, #16
 8001a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2208      	movs	r2, #8
 8001a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f86f 	bl	8001b86 <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e005      	b.n	8001ab6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f862 	bl	8001b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f871 	bl	8001b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0201 	mvn.w	r2, #1
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7fe fc98 	bl	8000418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af2:	2b80      	cmp	r3, #128	; 0x80
 8001af4:	d10e      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b00:	2b80      	cmp	r3, #128	; 0x80
 8001b02:	d107      	bne.n	8001b14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8bf 	bl	8001c92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1e:	2b40      	cmp	r3, #64	; 0x40
 8001b20:	d10e      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d107      	bne.n	8001b40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f835 	bl	8001baa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d10e      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d107      	bne.n	8001b6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f06f 0220 	mvn.w	r2, #32
 8001b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f88a 	bl	8001c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a29      	ldr	r2, [pc, #164]	; (8001c74 <TIM_Base_SetConfig+0xb8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00b      	beq.n	8001bec <TIM_Base_SetConfig+0x30>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bda:	d007      	beq.n	8001bec <TIM_Base_SetConfig+0x30>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <TIM_Base_SetConfig+0xbc>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d003      	beq.n	8001bec <TIM_Base_SetConfig+0x30>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a25      	ldr	r2, [pc, #148]	; (8001c7c <TIM_Base_SetConfig+0xc0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d108      	bne.n	8001bfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <TIM_Base_SetConfig+0xb8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00b      	beq.n	8001c1e <TIM_Base_SetConfig+0x62>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0c:	d007      	beq.n	8001c1e <TIM_Base_SetConfig+0x62>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <TIM_Base_SetConfig+0xbc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d003      	beq.n	8001c1e <TIM_Base_SetConfig+0x62>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <TIM_Base_SetConfig+0xc0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d108      	bne.n	8001c30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <TIM_Base_SetConfig+0xb8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d103      	bne.n	8001c64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	615a      	str	r2, [r3, #20]
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	40012c00 	.word	0x40012c00
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40000800 	.word	0x40000800

08001c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e042      	b.n	8001d3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe fd6c 	bl	80007a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2224      	movs	r2, #36	; 0x24
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fe03 	bl	80028f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	d16d      	bne.n	8001e40 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d002      	beq.n	8001d70 <HAL_UART_Transmit+0x2c>
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e066      	b.n	8001e42 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2221      	movs	r2, #33	; 0x21
 8001d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d82:	f7fe fdb3 	bl	80008ec <HAL_GetTick>
 8001d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	88fa      	ldrh	r2, [r7, #6]
 8001d8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	88fa      	ldrh	r2, [r7, #6]
 8001d92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d9c:	d108      	bne.n	8001db0 <HAL_UART_Transmit+0x6c>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	e003      	b.n	8001db8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001db8:	e02a      	b.n	8001e10 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2180      	movs	r1, #128	; 0x80
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fb8b 	bl	80024e0 <UART_WaitOnFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e036      	b.n	8001e42 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10b      	bne.n	8001df2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001de8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	3302      	adds	r3, #2
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	e007      	b.n	8001e02 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1cf      	bne.n	8001dba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2200      	movs	r2, #0
 8001e22:	2140      	movs	r1, #64	; 0x40
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fb5b 	bl	80024e0 <UART_WaitOnFlagUntilTimeout>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e006      	b.n	8001e42 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e000      	b.n	8001e42 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001e40:	2302      	movs	r3, #2
  }
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b08a      	sub	sp, #40	; 0x28
 8001e4e:	af02      	add	r7, sp, #8
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4613      	mov	r3, r2
 8001e58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d17c      	bne.n	8001f64 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_UART_Receive+0x2c>
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e075      	b.n	8001f66 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2222      	movs	r2, #34	; 0x22
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e8e:	f7fe fd2d 	bl	80008ec <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	88fa      	ldrh	r2, [r7, #6]
 8001e98:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	88fa      	ldrh	r2, [r7, #6]
 8001e9e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea8:	d108      	bne.n	8001ebc <HAL_UART_Receive+0x72>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d104      	bne.n	8001ebc <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	e003      	b.n	8001ec4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001ec4:	e043      	b.n	8001f4e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2120      	movs	r1, #32
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fb05 	bl	80024e0 <UART_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e042      	b.n	8001f66 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	3302      	adds	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	e01f      	b.n	8001f40 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f08:	d007      	beq.n	8001f1a <HAL_UART_Receive+0xd0>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10a      	bne.n	8001f28 <HAL_UART_Receive+0xde>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	701a      	strb	r2, [r3, #0]
 8001f26:	e008      	b.n	8001f3a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1b6      	bne.n	8001ec6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	e000      	b.n	8001f66 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f64:	2302      	movs	r3, #2
  }
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3720      	adds	r7, #32
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b0ba      	sub	sp, #232	; 0xe8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <HAL_UART_IRQHandler+0x66>
 8001fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fbd1 	bl	8002776 <UART_Receive_IT>
      return;
 8001fd4:	e25b      	b.n	800248e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80de 	beq.w	800219c <HAL_UART_IRQHandler+0x22c>
 8001fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d106      	bne.n	8001ffa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ff0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80d1 	beq.w	800219c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_UART_IRQHandler+0xae>
 8002006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800201e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_UART_IRQHandler+0xd2>
 800202a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f043 0202 	orr.w	r2, r3, #2
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <HAL_UART_IRQHandler+0xf6>
 800204e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f043 0204 	orr.w	r2, r3, #4
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d011      	beq.n	8002096 <HAL_UART_IRQHandler+0x126>
 8002072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800207e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f043 0208 	orr.w	r2, r3, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 81f2 	beq.w	8002484 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_UART_IRQHandler+0x14e>
 80020ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fb5c 	bl	8002776 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d103      	bne.n	80020ea <HAL_UART_IRQHandler+0x17a>
 80020e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d04f      	beq.n	800218a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fa66 	bl	80025bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d041      	beq.n	8002182 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3314      	adds	r3, #20
 8002104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002108:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800210c:	e853 3f00 	ldrex	r3, [r3]
 8002110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800211c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3314      	adds	r3, #20
 8002126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800212a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800212e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800213a:	e841 2300 	strex	r3, r2, [r1]
 800213e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1d9      	bne.n	80020fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d013      	beq.n	800217a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	4a7e      	ldr	r2, [pc, #504]	; (8002350 <HAL_UART_IRQHandler+0x3e0>)
 8002158:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fce8 	bl	8000b34 <HAL_DMA_Abort_IT>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d016      	beq.n	8002198 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002174:	4610      	mov	r0, r2
 8002176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002178:	e00e      	b.n	8002198 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f99c 	bl	80024b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002180:	e00a      	b.n	8002198 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f998 	bl	80024b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002188:	e006      	b.n	8002198 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f994 	bl	80024b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002196:	e175      	b.n	8002484 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002198:	bf00      	nop
    return;
 800219a:	e173      	b.n	8002484 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	f040 814f 	bne.w	8002444 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8148 	beq.w	8002444 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8141 	beq.w	8002444 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80b6 	beq.w	8002354 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80021f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 8145 	beq.w	8002488 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002206:	429a      	cmp	r2, r3
 8002208:	f080 813e 	bcs.w	8002488 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002212:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b20      	cmp	r3, #32
 800221c:	f000 8088 	beq.w	8002330 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800222a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800222e:	e853 3f00 	ldrex	r3, [r3]
 8002232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002236:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800223a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800223e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	330c      	adds	r3, #12
 8002248:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800224c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002250:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002254:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002258:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800225c:	e841 2300 	strex	r3, r2, [r1]
 8002260:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002264:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1d9      	bne.n	8002220 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3314      	adds	r3, #20
 8002272:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002276:	e853 3f00 	ldrex	r3, [r3]
 800227a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800227c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3314      	adds	r3, #20
 800228c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002290:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002294:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002296:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002298:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800229c:	e841 2300 	strex	r3, r2, [r1]
 80022a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80022a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1e1      	bne.n	800226c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3314      	adds	r3, #20
 80022ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b2:	e853 3f00 	ldrex	r3, [r3]
 80022b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80022b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3314      	adds	r3, #20
 80022c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80022cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80022d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80022d4:	e841 2300 	strex	r3, r2, [r1]
 80022d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80022da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e3      	bne.n	80022a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	330c      	adds	r3, #12
 80022f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f8:	e853 3f00 	ldrex	r3, [r3]
 80022fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80022fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002300:	f023 0310 	bic.w	r3, r3, #16
 8002304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	330c      	adds	r3, #12
 800230e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002312:	65ba      	str	r2, [r7, #88]	; 0x58
 8002314:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002316:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800231a:	e841 2300 	strex	r3, r2, [r1]
 800231e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1e3      	bne.n	80022ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fbc7 	bl	8000abe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800233e:	b29b      	uxth	r3, r3
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	b29b      	uxth	r3, r3
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f8bf 	bl	80024ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800234c:	e09c      	b.n	8002488 <HAL_UART_IRQHandler+0x518>
 800234e:	bf00      	nop
 8002350:	08002681 	.word	0x08002681
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800235c:	b29b      	uxth	r3, r3
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 808e 	beq.w	800248c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 8089 	beq.w	800248c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	330c      	adds	r3, #12
 8002380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002384:	e853 3f00 	ldrex	r3, [r3]
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800238a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	330c      	adds	r3, #12
 800239a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800239e:	647a      	str	r2, [r7, #68]	; 0x44
 80023a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80023a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023a6:	e841 2300 	strex	r3, r2, [r1]
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80023ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e3      	bne.n	800237a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3314      	adds	r3, #20
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	e853 3f00 	ldrex	r3, [r3]
 80023c0:	623b      	str	r3, [r7, #32]
   return(result);
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3314      	adds	r3, #20
 80023d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80023d6:	633a      	str	r2, [r7, #48]	; 0x30
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023de:	e841 2300 	strex	r3, r2, [r1]
 80023e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1e3      	bne.n	80023b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	330c      	adds	r3, #12
 80023fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	e853 3f00 	ldrex	r3, [r3]
 8002406:	60fb      	str	r3, [r7, #12]
   return(result);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 0310 	bic.w	r3, r3, #16
 800240e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800241c:	61fa      	str	r2, [r7, #28]
 800241e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002420:	69b9      	ldr	r1, [r7, #24]
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	e841 2300 	strex	r3, r2, [r1]
 8002428:	617b      	str	r3, [r7, #20]
   return(result);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e3      	bne.n	80023f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002436:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800243a:	4619      	mov	r1, r3
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f844 	bl	80024ca <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002442:	e023      	b.n	800248c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <HAL_UART_IRQHandler+0x4f4>
 8002450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f923 	bl	80026a8 <UART_Transmit_IT>
    return;
 8002462:	e014      	b.n	800248e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <HAL_UART_IRQHandler+0x51e>
 8002470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f962 	bl	8002746 <UART_EndTransmit_IT>
    return;
 8002482:	e004      	b.n	800248e <HAL_UART_IRQHandler+0x51e>
    return;
 8002484:	bf00      	nop
 8002486:	e002      	b.n	800248e <HAL_UART_IRQHandler+0x51e>
      return;
 8002488:	bf00      	nop
 800248a:	e000      	b.n	800248e <HAL_UART_IRQHandler+0x51e>
      return;
 800248c:	bf00      	nop
  }
}
 800248e:	37e8      	adds	r7, #232	; 0xe8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b090      	sub	sp, #64	; 0x40
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f0:	e050      	b.n	8002594 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d04c      	beq.n	8002594 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <UART_WaitOnFlagUntilTimeout+0x30>
 8002500:	f7fe f9f4 	bl	80008ec <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800250c:	429a      	cmp	r2, r3
 800250e:	d241      	bcs.n	8002594 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	330c      	adds	r3, #12
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	e853 3f00 	ldrex	r3, [r3]
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	330c      	adds	r3, #12
 800252e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002530:	637a      	str	r2, [r7, #52]	; 0x34
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002534:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002538:	e841 2300 	strex	r3, r2, [r1]
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e5      	bne.n	8002510 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3314      	adds	r3, #20
 800254a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	e853 3f00 	ldrex	r3, [r3]
 8002552:	613b      	str	r3, [r7, #16]
   return(result);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	63bb      	str	r3, [r7, #56]	; 0x38
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	3314      	adds	r3, #20
 8002562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002564:	623a      	str	r2, [r7, #32]
 8002566:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002568:	69f9      	ldr	r1, [r7, #28]
 800256a:	6a3a      	ldr	r2, [r7, #32]
 800256c:	e841 2300 	strex	r3, r2, [r1]
 8002570:	61bb      	str	r3, [r7, #24]
   return(result);
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e5      	bne.n	8002544 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e00f      	b.n	80025b4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	4013      	ands	r3, r2
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	461a      	mov	r2, r3
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d09f      	beq.n	80024f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3740      	adds	r7, #64	; 0x40
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025bc:	b480      	push	{r7}
 80025be:	b095      	sub	sp, #84	; 0x54
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	330c      	adds	r3, #12
 80025ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ce:	e853 3f00 	ldrex	r3, [r3]
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	330c      	adds	r3, #12
 80025e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025e4:	643a      	str	r2, [r7, #64]	; 0x40
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025ec:	e841 2300 	strex	r3, r2, [r1]
 80025f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80025f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1e5      	bne.n	80025c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3314      	adds	r3, #20
 80025fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	e853 3f00 	ldrex	r3, [r3]
 8002606:	61fb      	str	r3, [r7, #28]
   return(result);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3314      	adds	r3, #20
 8002616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002618:	62fa      	str	r2, [r7, #44]	; 0x2c
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800261e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002620:	e841 2300 	strex	r3, r2, [r1]
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e5      	bne.n	80025f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	2b01      	cmp	r3, #1
 8002632:	d119      	bne.n	8002668 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	330c      	adds	r3, #12
 800263a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	e853 3f00 	ldrex	r3, [r3]
 8002642:	60bb      	str	r3, [r7, #8]
   return(result);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f023 0310 	bic.w	r3, r3, #16
 800264a:	647b      	str	r3, [r7, #68]	; 0x44
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	330c      	adds	r3, #12
 8002652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002654:	61ba      	str	r2, [r7, #24]
 8002656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002658:	6979      	ldr	r1, [r7, #20]
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	e841 2300 	strex	r3, r2, [r1]
 8002660:	613b      	str	r3, [r7, #16]
   return(result);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1e5      	bne.n	8002634 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002676:	bf00      	nop
 8002678:	3754      	adds	r7, #84	; 0x54
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f7ff ff0c 	bl	80024b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b21      	cmp	r3, #33	; 0x21
 80026ba:	d13e      	bne.n	800273a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c4:	d114      	bne.n	80026f0 <UART_Transmit_IT+0x48>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d110      	bne.n	80026f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	1c9a      	adds	r2, r3, #2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	621a      	str	r2, [r3, #32]
 80026ee:	e008      	b.n	8002702 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	1c59      	adds	r1, r3, #1
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6211      	str	r1, [r2, #32]
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29b      	uxth	r3, r3
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4619      	mov	r1, r3
 8002710:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002724:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002734:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	e000      	b.n	800273c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800273a:	2302      	movs	r3, #2
  }
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff fe94 	bl	8002494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b08c      	sub	sp, #48	; 0x30
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b22      	cmp	r3, #34	; 0x22
 8002788:	f040 80ae 	bne.w	80028e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002794:	d117      	bne.n	80027c6 <UART_Receive_IT+0x50>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d113      	bne.n	80027c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	1c9a      	adds	r2, r3, #2
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
 80027c4:	e026      	b.n	8002814 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d8:	d007      	beq.n	80027ea <UART_Receive_IT+0x74>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10a      	bne.n	80027f8 <UART_Receive_IT+0x82>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	e008      	b.n	800280a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002804:	b2da      	uxtb	r2, r3
 8002806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002808:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29b      	uxth	r3, r3
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4619      	mov	r1, r3
 8002822:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002824:	2b00      	cmp	r3, #0
 8002826:	d15d      	bne.n	80028e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0220 	bic.w	r2, r2, #32
 8002836:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002846:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	2b01      	cmp	r3, #1
 800286c:	d135      	bne.n	80028da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	330c      	adds	r3, #12
 800287a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	e853 3f00 	ldrex	r3, [r3]
 8002882:	613b      	str	r3, [r7, #16]
   return(result);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	f023 0310 	bic.w	r3, r3, #16
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	330c      	adds	r3, #12
 8002892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002894:	623a      	str	r2, [r7, #32]
 8002896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002898:	69f9      	ldr	r1, [r7, #28]
 800289a:	6a3a      	ldr	r2, [r7, #32]
 800289c:	e841 2300 	strex	r3, r2, [r1]
 80028a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e5      	bne.n	8002874 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d10a      	bne.n	80028cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff fdf9 	bl	80024ca <HAL_UARTEx_RxEventCallback>
 80028d8:	e002      	b.n	80028e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff fde3 	bl	80024a6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e002      	b.n	80028ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	e000      	b.n	80028ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
  }
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3730      	adds	r7, #48	; 0x30
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800292e:	f023 030c 	bic.w	r3, r3, #12
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	430b      	orrs	r3, r1
 800293a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2c      	ldr	r2, [pc, #176]	; (8002a08 <UART_SetConfig+0x114>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d103      	bne.n	8002964 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800295c:	f7fe fef6 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	e002      	b.n	800296a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002964:	f7fe fede 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 8002968:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	009a      	lsls	r2, r3, #2
 8002974:	441a      	add	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <UART_SetConfig+0x118>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	0119      	lsls	r1, r3, #4
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	009a      	lsls	r2, r3, #2
 8002994:	441a      	add	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	fbb2 f2f3 	udiv	r2, r2, r3
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <UART_SetConfig+0x118>)
 80029a2:	fba3 0302 	umull	r0, r3, r3, r2
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	2064      	movs	r0, #100	; 0x64
 80029aa:	fb00 f303 	mul.w	r3, r0, r3
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	3332      	adds	r3, #50	; 0x32
 80029b4:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <UART_SetConfig+0x118>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c0:	4419      	add	r1, r3
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	009a      	lsls	r2, r3, #2
 80029cc:	441a      	add	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <UART_SetConfig+0x118>)
 80029da:	fba3 0302 	umull	r0, r3, r3, r2
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2064      	movs	r0, #100	; 0x64
 80029e2:	fb00 f303 	mul.w	r3, r0, r3
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	3332      	adds	r3, #50	; 0x32
 80029ec:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <UART_SetConfig+0x118>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	f003 020f 	and.w	r2, r3, #15
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	440a      	add	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	51eb851f 	.word	0x51eb851f

08002a10 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a16:	f3ef 8305 	mrs	r3, IPSR
 8002a1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10f      	bne.n	8002a42 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a22:	f3ef 8310 	mrs	r3, PRIMASK
 8002a26:	607b      	str	r3, [r7, #4]
  return(result);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <osKernelInitialize+0x32>
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <osKernelInitialize+0x60>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d109      	bne.n	8002a4a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a36:	f3ef 8311 	mrs	r3, BASEPRI
 8002a3a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002a42:	f06f 0305 	mvn.w	r3, #5
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e00c      	b.n	8002a64 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <osKernelInitialize+0x60>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d105      	bne.n	8002a5e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <osKernelInitialize+0x60>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e002      	b.n	8002a64 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a64:	68fb      	ldr	r3, [r7, #12]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20000134 	.word	0x20000134

08002a74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a7a:	f3ef 8305 	mrs	r3, IPSR
 8002a7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a86:	f3ef 8310 	mrs	r3, PRIMASK
 8002a8a:	607b      	str	r3, [r7, #4]
  return(result);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <osKernelStart+0x32>
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <osKernelStart+0x64>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d109      	bne.n	8002aae <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8002a9e:	603b      	str	r3, [r7, #0]
  return(result);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <osKernelStart+0x3a>
    stat = osErrorISR;
 8002aa6:	f06f 0305 	mvn.w	r3, #5
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e00e      	b.n	8002acc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <osKernelStart+0x64>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <osKernelStart+0x64>)
 8002ab8:	2202      	movs	r2, #2
 8002aba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002abc:	f001 faba 	bl	8004034 <vTaskStartScheduler>
      stat = osOK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e002      	b.n	8002acc <osKernelStart+0x58>
    } else {
      stat = osError;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002acc:	68fb      	ldr	r3, [r7, #12]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000134 	.word	0x20000134

08002adc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b092      	sub	sp, #72	; 0x48
 8002ae0:	af04      	add	r7, sp, #16
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aec:	f3ef 8305 	mrs	r3, IPSR
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f040 8094 	bne.w	8002c22 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002afa:	f3ef 8310 	mrs	r3, PRIMASK
 8002afe:	623b      	str	r3, [r7, #32]
  return(result);
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f040 808d 	bne.w	8002c22 <osThreadNew+0x146>
 8002b08:	4b48      	ldr	r3, [pc, #288]	; (8002c2c <osThreadNew+0x150>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d106      	bne.n	8002b1e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b10:	f3ef 8311 	mrs	r3, BASEPRI
 8002b14:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f040 8082 	bne.w	8002c22 <osThreadNew+0x146>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d07e      	beq.n	8002c22 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002b28:	2318      	movs	r3, #24
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002b30:	f107 031b 	add.w	r3, r7, #27
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d045      	beq.n	8002bce <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <osThreadNew+0x74>
        name = attr->name;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <osThreadNew+0x9a>
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	2b38      	cmp	r3, #56	; 0x38
 8002b68:	d805      	bhi.n	8002b76 <osThreadNew+0x9a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <osThreadNew+0x9e>
        return (NULL);
 8002b76:	2300      	movs	r3, #0
 8002b78:	e054      	b.n	8002c24 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	089b      	lsrs	r3, r3, #2
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00e      	beq.n	8002bb0 <osThreadNew+0xd4>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2ba7      	cmp	r3, #167	; 0xa7
 8002b98:	d90a      	bls.n	8002bb0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d006      	beq.n	8002bb0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <osThreadNew+0xd4>
        mem = 1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bae:	e010      	b.n	8002bd2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10c      	bne.n	8002bd2 <osThreadNew+0xf6>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d108      	bne.n	8002bd2 <osThreadNew+0xf6>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d104      	bne.n	8002bd2 <osThreadNew+0xf6>
          mem = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bcc:	e001      	b.n	8002bd2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d110      	bne.n	8002bfa <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002be0:	9202      	str	r2, [sp, #8]
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f001 f83c 	bl	8003c6c <xTaskCreateStatic>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	e013      	b.n	8002c22 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d110      	bne.n	8002c22 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f001 f886 	bl	8003d24 <xTaskCreate>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d001      	beq.n	8002c22 <osThreadNew+0x146>
          hTask = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c22:	697b      	ldr	r3, [r7, #20]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3738      	adds	r7, #56	; 0x38
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000134 	.word	0x20000134

08002c30 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c38:	f3ef 8305 	mrs	r3, IPSR
 8002c3c:	613b      	str	r3, [r7, #16]
  return(result);
 8002c3e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10f      	bne.n	8002c64 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c44:	f3ef 8310 	mrs	r3, PRIMASK
 8002c48:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <osDelay+0x34>
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <osDelay+0x58>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d109      	bne.n	8002c6c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c58:	f3ef 8311 	mrs	r3, BASEPRI
 8002c5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <osDelay+0x3c>
    stat = osErrorISR;
 8002c64:	f06f 0305 	mvn.w	r3, #5
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e007      	b.n	8002c7c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f001 f9a8 	bl	8003fcc <vTaskDelay>
    }
  }

  return (stat);
 8002c7c:	697b      	ldr	r3, [r7, #20]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000134 	.word	0x20000134

08002c8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c9c:	f3ef 8305 	mrs	r3, IPSR
 8002ca0:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ca2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d16f      	bne.n	8002d88 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cac:	617b      	str	r3, [r7, #20]
  return(result);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d169      	bne.n	8002d88 <osMessageQueueNew+0xfc>
 8002cb4:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <osMessageQueueNew+0x108>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d105      	bne.n	8002cc8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002cbc:	f3ef 8311 	mrs	r3, BASEPRI
 8002cc0:	613b      	str	r3, [r7, #16]
  return(result);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d15f      	bne.n	8002d88 <osMessageQueueNew+0xfc>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d05c      	beq.n	8002d88 <osMessageQueueNew+0xfc>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d059      	beq.n	8002d88 <osMessageQueueNew+0xfc>
    mem = -1;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d029      	beq.n	8002d34 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d012      	beq.n	8002d0e <osMessageQueueNew+0x82>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b4f      	cmp	r3, #79	; 0x4f
 8002cee:	d90e      	bls.n	8002d0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d302      	bcc.n	8002d0e <osMessageQueueNew+0x82>
        mem = 1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	e014      	b.n	8002d38 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d110      	bne.n	8002d38 <osMessageQueueNew+0xac>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10c      	bne.n	8002d38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d108      	bne.n	8002d38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <osMessageQueueNew+0xac>
          mem = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	623b      	str	r3, [r7, #32]
 8002d32:	e001      	b.n	8002d38 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10b      	bne.n	8002d56 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2100      	movs	r1, #0
 8002d48:	9100      	str	r1, [sp, #0]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fa53 	bl	80031f8 <xQueueGenericCreateStatic>
 8002d52:	6278      	str	r0, [r7, #36]	; 0x24
 8002d54:	e008      	b.n	8002d68 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fac0 	bl	80032e6 <xQueueGenericCreate>
 8002d66:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00c      	beq.n	8002d88 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <osMessageQueueNew+0xf0>
        name = attr->name;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	e001      	b.n	8002d80 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002d80:	69f9      	ldr	r1, [r7, #28]
 8002d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d84:	f000 ff16 	bl	8003bb4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3728      	adds	r7, #40	; 0x28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000134 	.word	0x20000134

08002d98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002db0:	f3ef 8305 	mrs	r3, IPSR
 8002db4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002db6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10f      	bne.n	8002ddc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <osMessageQueuePut+0x44>
 8002dc8:	4b2b      	ldr	r3, [pc, #172]	; (8002e78 <osMessageQueuePut+0xe0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d12e      	bne.n	8002e2e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002dd0:	f3ef 8311 	mrs	r3, BASEPRI
 8002dd4:	617b      	str	r3, [r7, #20]
  return(result);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d028      	beq.n	8002e2e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <osMessageQueuePut+0x56>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <osMessageQueuePut+0x56>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002dee:	f06f 0303 	mvn.w	r3, #3
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002df4:	e039      	b.n	8002e6a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002dfa:	f107 0210 	add.w	r2, r7, #16
 8002dfe:	2300      	movs	r3, #0
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	6a38      	ldr	r0, [r7, #32]
 8002e04:	f000 fbce 	bl	80035a4 <xQueueGenericSendFromISR>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d003      	beq.n	8002e16 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002e0e:	f06f 0302 	mvn.w	r3, #2
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002e14:	e029      	b.n	8002e6a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d026      	beq.n	8002e6a <osMessageQueuePut+0xd2>
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <osMessageQueuePut+0xe4>)
 8002e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002e2c:	e01d      	b.n	8002e6a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <osMessageQueuePut+0xa2>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d103      	bne.n	8002e42 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8002e3a:	f06f 0303 	mvn.w	r3, #3
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	e014      	b.n	8002e6c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002e42:	2300      	movs	r3, #0
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	6a38      	ldr	r0, [r7, #32]
 8002e4a:	f000 faad 	bl	80033a8 <xQueueGenericSend>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d00b      	beq.n	8002e6c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002e5a:	f06f 0301 	mvn.w	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e60:	e004      	b.n	8002e6c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002e62:	f06f 0302 	mvn.w	r3, #2
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
 8002e68:	e000      	b.n	8002e6c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002e6a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3728      	adds	r7, #40	; 0x28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000134 	.word	0x20000134
 8002e7c:	e000ed04 	.word	0xe000ed04

08002e80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e96:	f3ef 8305 	mrs	r3, IPSR
 8002e9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e9c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <osMessageQueueGet+0x42>
 8002eae:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <osMessageQueueGet+0xdc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d12e      	bne.n	8002f14 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8002eba:	617b      	str	r3, [r7, #20]
  return(result);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d028      	beq.n	8002f14 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <osMessageQueueGet+0x54>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <osMessageQueueGet+0x54>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002ed4:	f06f 0303 	mvn.w	r3, #3
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002eda:	e038      	b.n	8002f4e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	6a38      	ldr	r0, [r7, #32]
 8002eea:	f000 fcd3 	bl	8003894 <xQueueReceiveFromISR>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d003      	beq.n	8002efc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002ef4:	f06f 0302 	mvn.w	r3, #2
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002efa:	e028      	b.n	8002f4e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d025      	beq.n	8002f4e <osMessageQueueGet+0xce>
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <osMessageQueueGet+0xe0>)
 8002f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002f12:	e01c      	b.n	8002f4e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <osMessageQueueGet+0xa0>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d103      	bne.n	8002f28 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002f20:	f06f 0303 	mvn.w	r3, #3
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
 8002f26:	e013      	b.n	8002f50 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	6a38      	ldr	r0, [r7, #32]
 8002f2e:	f000 fbd1 	bl	80036d4 <xQueueReceive>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d00b      	beq.n	8002f50 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8002f3e:	f06f 0301 	mvn.w	r3, #1
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
 8002f44:	e004      	b.n	8002f50 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8002f46:	f06f 0302 	mvn.w	r3, #2
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4c:	e000      	b.n	8002f50 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002f4e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3728      	adds	r7, #40	; 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000134 	.word	0x20000134
 8002f60:	e000ed04 	.word	0xe000ed04

08002f64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a06      	ldr	r2, [pc, #24]	; (8002f8c <vApplicationGetIdleTaskMemory+0x28>)
 8002f74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2280      	movs	r2, #128	; 0x80
 8002f80:	601a      	str	r2, [r3, #0]
}
 8002f82:	bf00      	nop
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	20000138 	.word	0x20000138
 8002f90:	200001e0 	.word	0x200001e0

08002f94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002fa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4a06      	ldr	r2, [pc, #24]	; (8002fc4 <vApplicationGetTimerTaskMemory+0x30>)
 8002faa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fb2:	601a      	str	r2, [r3, #0]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	200003e0 	.word	0x200003e0
 8002fc4:	20000488 	.word	0x20000488

08002fc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f103 0208 	add.w	r2, r3, #8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f103 0208 	add.w	r2, r3, #8
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f103 0208 	add.w	r2, r3, #8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	601a      	str	r2, [r3, #0]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d103      	bne.n	8003084 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	e00c      	b.n	800309e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3308      	adds	r3, #8
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e002      	b.n	8003092 <vListInsert+0x2e>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	d2f6      	bcs.n	800308c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	601a      	str	r2, [r3, #0]
}
 80030ca:	bf00      	nop
 80030cc:	3714      	adds	r7, #20
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6892      	ldr	r2, [r2, #8]
 80030ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6852      	ldr	r2, [r2, #4]
 80030f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d103      	bne.n	8003108 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	1e5a      	subs	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
	...

08003128 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003152:	f002 f8b3 	bl	80052bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	68f9      	ldr	r1, [r7, #12]
 8003160:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	441a      	add	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	3b01      	subs	r3, #1
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	441a      	add	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	22ff      	movs	r2, #255	; 0xff
 8003196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	22ff      	movs	r2, #255	; 0xff
 800319e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d114      	bne.n	80031d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01a      	beq.n	80031e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3310      	adds	r3, #16
 80031b4:	4618      	mov	r0, r3
 80031b6:	f001 f9d9 	bl	800456c <xTaskRemoveFromEventList>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <xQueueGenericReset+0xcc>)
 80031c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	e009      	b.n	80031e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3310      	adds	r3, #16
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fef6 	bl	8002fc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3324      	adds	r3, #36	; 0x24
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fef1 	bl	8002fc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031e6:	f002 f899 	bl	800531c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031ea:	2301      	movs	r3, #1
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08e      	sub	sp, #56	; 0x38
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
}
 800323a:	bf00      	nop
 800323c:	e7fe      	b.n	800323c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <xQueueGenericCreateStatic+0x52>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <xQueueGenericCreateStatic+0x56>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <xQueueGenericCreateStatic+0x58>
 800324e:	2300      	movs	r3, #0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	623b      	str	r3, [r7, #32]
}
 8003266:	bf00      	nop
 8003268:	e7fe      	b.n	8003268 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <xQueueGenericCreateStatic+0x7e>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <xQueueGenericCreateStatic+0x82>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <xQueueGenericCreateStatic+0x84>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10a      	bne.n	8003296 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	61fb      	str	r3, [r7, #28]
}
 8003292:	bf00      	nop
 8003294:	e7fe      	b.n	8003294 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003296:	2350      	movs	r3, #80	; 0x50
 8003298:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b50      	cmp	r3, #80	; 0x50
 800329e:	d00a      	beq.n	80032b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	61bb      	str	r3, [r7, #24]
}
 80032b2:	bf00      	nop
 80032b4:	e7fe      	b.n	80032b4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00d      	beq.n	80032dc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032c8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80032cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	4613      	mov	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68b9      	ldr	r1, [r7, #8]
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f843 	bl	8003362 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80032de:	4618      	mov	r0, r3
 80032e0:	3730      	adds	r7, #48	; 0x30
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b08a      	sub	sp, #40	; 0x28
 80032ea:	af02      	add	r7, sp, #8
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	4613      	mov	r3, r2
 80032f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <xQueueGenericCreate+0x2a>
	__asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	613b      	str	r3, [r7, #16]
}
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	e004      	b.n	8003326 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	fb02 f303 	mul.w	r3, r2, r3
 8003324:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3350      	adds	r3, #80	; 0x50
 800332a:	4618      	mov	r0, r3
 800332c:	f002 f8c6 	bl	80054bc <pvPortMalloc>
 8003330:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00f      	beq.n	8003358 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	3350      	adds	r3, #80	; 0x50
 800333c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003346:	79fa      	ldrb	r2, [r7, #7]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f805 	bl	8003362 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003358:	69bb      	ldr	r3, [r7, #24]
	}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	60f8      	str	r0, [r7, #12]
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d103      	bne.n	800337e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e002      	b.n	8003384 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003390:	2101      	movs	r1, #1
 8003392:	69b8      	ldr	r0, [r7, #24]
 8003394:	f7ff fec8 	bl	8003128 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08e      	sub	sp, #56	; 0x38
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033b6:	2300      	movs	r3, #0
 80033b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10a      	bne.n	80033da <xQueueGenericSend+0x32>
	__asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033d6:	bf00      	nop
 80033d8:	e7fe      	b.n	80033d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d103      	bne.n	80033e8 <xQueueGenericSend+0x40>
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <xQueueGenericSend+0x44>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <xQueueGenericSend+0x46>
 80033ec:	2300      	movs	r3, #0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <xQueueGenericSend+0x60>
	__asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003404:	bf00      	nop
 8003406:	e7fe      	b.n	8003406 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d103      	bne.n	8003416 <xQueueGenericSend+0x6e>
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <xQueueGenericSend+0x72>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <xQueueGenericSend+0x74>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <xQueueGenericSend+0x8e>
	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	623b      	str	r3, [r7, #32]
}
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003436:	f001 fa5f 	bl	80048f8 <xTaskGetSchedulerState>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <xQueueGenericSend+0x9e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <xQueueGenericSend+0xa2>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <xQueueGenericSend+0xa4>
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <xQueueGenericSend+0xbe>
	__asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	61fb      	str	r3, [r7, #28]
}
 8003462:	bf00      	nop
 8003464:	e7fe      	b.n	8003464 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003466:	f001 ff29 	bl	80052bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003472:	429a      	cmp	r2, r3
 8003474:	d302      	bcc.n	800347c <xQueueGenericSend+0xd4>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d129      	bne.n	80034d0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003482:	f000 fa87 	bl	8003994 <prvCopyDataToQueue>
 8003486:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d010      	beq.n	80034b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003492:	3324      	adds	r3, #36	; 0x24
 8003494:	4618      	mov	r0, r3
 8003496:	f001 f869 	bl	800456c <xTaskRemoveFromEventList>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034a0:	4b3f      	ldr	r3, [pc, #252]	; (80035a0 <xQueueGenericSend+0x1f8>)
 80034a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	e00a      	b.n	80034c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d007      	beq.n	80034c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034b8:	4b39      	ldr	r3, [pc, #228]	; (80035a0 <xQueueGenericSend+0x1f8>)
 80034ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034c8:	f001 ff28 	bl	800531c <vPortExitCritical>
				return pdPASS;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e063      	b.n	8003598 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034d6:	f001 ff21 	bl	800531c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	e05c      	b.n	8003598 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 f8a3 	bl	8004634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034ee:	2301      	movs	r3, #1
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034f2:	f001 ff13 	bl	800531c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034f6:	f000 fe0d 	bl	8004114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034fa:	f001 fedf 	bl	80052bc <vPortEnterCritical>
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003504:	b25b      	sxtb	r3, r3
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d103      	bne.n	8003514 <xQueueGenericSend+0x16c>
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800351a:	b25b      	sxtb	r3, r3
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d103      	bne.n	800352a <xQueueGenericSend+0x182>
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800352a:	f001 fef7 	bl	800531c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800352e:	1d3a      	adds	r2, r7, #4
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f892 	bl	8004660 <xTaskCheckForTimeOut>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d124      	bne.n	800358c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003544:	f000 fb1e 	bl	8003b84 <prvIsQueueFull>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d018      	beq.n	8003580 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	3310      	adds	r3, #16
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f000 ffb8 	bl	80044cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800355c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800355e:	f000 faa9 	bl	8003ab4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003562:	f000 fde5 	bl	8004130 <xTaskResumeAll>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	f47f af7c 	bne.w	8003466 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800356e:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <xQueueGenericSend+0x1f8>)
 8003570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	f3bf 8f4f 	dsb	sy
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	e772      	b.n	8003466 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003582:	f000 fa97 	bl	8003ab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003586:	f000 fdd3 	bl	8004130 <xTaskResumeAll>
 800358a:	e76c      	b.n	8003466 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800358c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800358e:	f000 fa91 	bl	8003ab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003592:	f000 fdcd 	bl	8004130 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003596:	2300      	movs	r3, #0
		}
	}
}
 8003598:	4618      	mov	r0, r3
 800359a:	3738      	adds	r7, #56	; 0x38
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	e000ed04 	.word	0xe000ed04

080035a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08e      	sub	sp, #56	; 0x38
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d103      	bne.n	80035e0 <xQueueGenericSendFromISR+0x3c>
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <xQueueGenericSendFromISR+0x40>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <xQueueGenericSendFromISR+0x42>
 80035e4:	2300      	movs	r3, #0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	623b      	str	r3, [r7, #32]
}
 80035fc:	bf00      	nop
 80035fe:	e7fe      	b.n	80035fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d103      	bne.n	800360e <xQueueGenericSendFromISR+0x6a>
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <xQueueGenericSendFromISR+0x6e>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <xQueueGenericSendFromISR+0x70>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	61fb      	str	r3, [r7, #28]
}
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800362e:	f001 ff07 	bl	8005440 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003632:	f3ef 8211 	mrs	r2, BASEPRI
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	61ba      	str	r2, [r7, #24]
 8003648:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800364a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	429a      	cmp	r2, r3
 8003658:	d302      	bcc.n	8003660 <xQueueGenericSendFromISR+0xbc>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d12c      	bne.n	80036ba <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	68b9      	ldr	r1, [r7, #8]
 800366e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003670:	f000 f990 	bl	8003994 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003674:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d112      	bne.n	80036a4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d016      	beq.n	80036b4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	3324      	adds	r3, #36	; 0x24
 800368a:	4618      	mov	r0, r3
 800368c:	f000 ff6e 	bl	800456c <xTaskRemoveFromEventList>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e007      	b.n	80036b4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036a8:	3301      	adds	r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	b25a      	sxtb	r2, r3
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036b4:	2301      	movs	r3, #1
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80036b8:	e001      	b.n	80036be <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	637b      	str	r3, [r7, #52]	; 0x34
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3738      	adds	r7, #56	; 0x38
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08c      	sub	sp, #48	; 0x30
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <xQueueReceive+0x30>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	623b      	str	r3, [r7, #32]
}
 8003700:	bf00      	nop
 8003702:	e7fe      	b.n	8003702 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d103      	bne.n	8003712 <xQueueReceive+0x3e>
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <xQueueReceive+0x42>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <xQueueReceive+0x44>
 8003716:	2300      	movs	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <xQueueReceive+0x5e>
	__asm volatile
 800371c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	61fb      	str	r3, [r7, #28]
}
 800372e:	bf00      	nop
 8003730:	e7fe      	b.n	8003730 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003732:	f001 f8e1 	bl	80048f8 <xTaskGetSchedulerState>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <xQueueReceive+0x6e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <xQueueReceive+0x72>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <xQueueReceive+0x74>
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <xQueueReceive+0x8e>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	61bb      	str	r3, [r7, #24]
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003762:	f001 fdab 	bl	80052bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01f      	beq.n	80037b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003776:	f000 f977 	bl	8003a68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	1e5a      	subs	r2, r3, #1
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00f      	beq.n	80037aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	3310      	adds	r3, #16
 800378e:	4618      	mov	r0, r3
 8003790:	f000 feec 	bl	800456c <xTaskRemoveFromEventList>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d007      	beq.n	80037aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800379a:	4b3d      	ldr	r3, [pc, #244]	; (8003890 <xQueueReceive+0x1bc>)
 800379c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037aa:	f001 fdb7 	bl	800531c <vPortExitCritical>
				return pdPASS;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e069      	b.n	8003886 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d103      	bne.n	80037c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037b8:	f001 fdb0 	bl	800531c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037bc:	2300      	movs	r3, #0
 80037be:	e062      	b.n	8003886 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037c6:	f107 0310 	add.w	r3, r7, #16
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 ff32 	bl	8004634 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037d0:	2301      	movs	r3, #1
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037d4:	f001 fda2 	bl	800531c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037d8:	f000 fc9c 	bl	8004114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037dc:	f001 fd6e 	bl	80052bc <vPortEnterCritical>
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d103      	bne.n	80037f6 <xQueueReceive+0x122>
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037fc:	b25b      	sxtb	r3, r3
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d103      	bne.n	800380c <xQueueReceive+0x138>
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800380c:	f001 fd86 	bl	800531c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003810:	1d3a      	adds	r2, r7, #4
 8003812:	f107 0310 	add.w	r3, r7, #16
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f000 ff21 	bl	8004660 <xTaskCheckForTimeOut>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d123      	bne.n	800386c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003826:	f000 f997 	bl	8003b58 <prvIsQueueEmpty>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	3324      	adds	r3, #36	; 0x24
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fe47 	bl	80044cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800383e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003840:	f000 f938 	bl	8003ab4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003844:	f000 fc74 	bl	8004130 <xTaskResumeAll>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d189      	bne.n	8003762 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <xQueueReceive+0x1bc>)
 8003850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	e780      	b.n	8003762 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003862:	f000 f927 	bl	8003ab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003866:	f000 fc63 	bl	8004130 <xTaskResumeAll>
 800386a:	e77a      	b.n	8003762 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800386c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800386e:	f000 f921 	bl	8003ab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003872:	f000 fc5d 	bl	8004130 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003878:	f000 f96e 	bl	8003b58 <prvIsQueueEmpty>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	f43f af6f 	beq.w	8003762 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003884:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003886:	4618      	mov	r0, r3
 8003888:	3730      	adds	r7, #48	; 0x30
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08e      	sub	sp, #56	; 0x38
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	623b      	str	r3, [r7, #32]
}
 80038bc:	bf00      	nop
 80038be:	e7fe      	b.n	80038be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d103      	bne.n	80038ce <xQueueReceiveFromISR+0x3a>
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <xQueueReceiveFromISR+0x3e>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <xQueueReceiveFromISR+0x40>
 80038d2:	2300      	movs	r3, #0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	61fb      	str	r3, [r7, #28]
}
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038ee:	f001 fda7 	bl	8005440 <vPortValidateInterruptPriority>
	__asm volatile
 80038f2:	f3ef 8211 	mrs	r2, BASEPRI
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	61ba      	str	r2, [r7, #24]
 8003908:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800390a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	d02f      	beq.n	800397a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800391a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003928:	f000 f89e 	bl	8003a68 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	1e5a      	subs	r2, r3, #1
 8003930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003932:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003934:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393c:	d112      	bne.n	8003964 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d016      	beq.n	8003974 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	3310      	adds	r3, #16
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fe0e 	bl	800456c <xTaskRemoveFromEventList>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00e      	beq.n	8003974 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e007      	b.n	8003974 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003968:	3301      	adds	r3, #1
 800396a:	b2db      	uxtb	r3, r3
 800396c:	b25a      	sxtb	r2, r3
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003974:	2301      	movs	r3, #1
 8003976:	637b      	str	r3, [r7, #52]	; 0x34
 8003978:	e001      	b.n	800397e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800397a:	2300      	movs	r3, #0
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f383 8811 	msr	BASEPRI, r3
}
 8003988:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800398a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800398c:	4618      	mov	r0, r3
 800398e:	3738      	adds	r7, #56	; 0x38
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d14d      	bne.n	8003a56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 ffb8 	bl	8004934 <xTaskPriorityDisinherit>
 80039c4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	e043      	b.n	8003a56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d119      	bne.n	8003a08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6898      	ldr	r0, [r3, #8]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	461a      	mov	r2, r3
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	f002 f92d 	bl	8005c3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	441a      	add	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d32b      	bcc.n	8003a56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	609a      	str	r2, [r3, #8]
 8003a06:	e026      	b.n	8003a56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68d8      	ldr	r0, [r3, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	461a      	mov	r2, r3
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	f002 f913 	bl	8005c3e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	425b      	negs	r3, r3
 8003a22:	441a      	add	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d207      	bcs.n	8003a44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	425b      	negs	r3, r3
 8003a3e:	441a      	add	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d105      	bne.n	8003a56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a5e:	697b      	ldr	r3, [r7, #20]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d018      	beq.n	8003aac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	441a      	add	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d303      	bcc.n	8003a9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68d9      	ldr	r1, [r3, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6838      	ldr	r0, [r7, #0]
 8003aa8:	f002 f8c9 	bl	8005c3e <memcpy>
	}
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003abc:	f001 fbfe 	bl	80052bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ac8:	e011      	b.n	8003aee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d012      	beq.n	8003af8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3324      	adds	r3, #36	; 0x24
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fd48 	bl	800456c <xTaskRemoveFromEventList>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ae2:	f000 fe1f 	bl	8004724 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	dce9      	bgt.n	8003aca <prvUnlockQueue+0x16>
 8003af6:	e000      	b.n	8003afa <prvUnlockQueue+0x46>
					break;
 8003af8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	22ff      	movs	r2, #255	; 0xff
 8003afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003b02:	f001 fc0b 	bl	800531c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b06:	f001 fbd9 	bl	80052bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b12:	e011      	b.n	8003b38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d012      	beq.n	8003b42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3310      	adds	r3, #16
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fd23 	bl	800456c <xTaskRemoveFromEventList>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b2c:	f000 fdfa 	bl	8004724 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b30:	7bbb      	ldrb	r3, [r7, #14]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	dce9      	bgt.n	8003b14 <prvUnlockQueue+0x60>
 8003b40:	e000      	b.n	8003b44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	22ff      	movs	r2, #255	; 0xff
 8003b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003b4c:	f001 fbe6 	bl	800531c <vPortExitCritical>
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b60:	f001 fbac 	bl	80052bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e001      	b.n	8003b76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b76:	f001 fbd1 	bl	800531c <vPortExitCritical>

	return xReturn;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b8c:	f001 fb96 	bl	80052bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d102      	bne.n	8003ba2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	e001      	b.n	8003ba6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ba6:	f001 fbb9 	bl	800531c <vPortExitCritical>

	return xReturn;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e014      	b.n	8003bee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003bc4:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <vQueueAddToRegistry+0x4c>)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003bd0:	490b      	ldr	r1, [pc, #44]	; (8003c00 <vQueueAddToRegistry+0x4c>)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003bda:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <vQueueAddToRegistry+0x4c>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003be6:	e006      	b.n	8003bf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3301      	adds	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b07      	cmp	r3, #7
 8003bf2:	d9e7      	bls.n	8003bc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr
 8003c00:	20000888 	.word	0x20000888

08003c04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c14:	f001 fb52 	bl	80052bc <vPortEnterCritical>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c1e:	b25b      	sxtb	r3, r3
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d103      	bne.n	8003c2e <vQueueWaitForMessageRestricted+0x2a>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c34:	b25b      	sxtb	r3, r3
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d103      	bne.n	8003c44 <vQueueWaitForMessageRestricted+0x40>
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c44:	f001 fb6a 	bl	800531c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3324      	adds	r3, #36	; 0x24
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fc5b 	bl	8004514 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c5e:	6978      	ldr	r0, [r7, #20]
 8003c60:	f7ff ff28 	bl	8003ab4 <prvUnlockQueue>
	}
 8003c64:	bf00      	nop
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08e      	sub	sp, #56	; 0x38
 8003c70:	af04      	add	r7, sp, #16
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	623b      	str	r3, [r7, #32]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <xTaskCreateStatic+0x46>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	61fb      	str	r3, [r7, #28]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cb2:	23a8      	movs	r3, #168	; 0xa8
 8003cb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2ba8      	cmp	r3, #168	; 0xa8
 8003cba:	d00a      	beq.n	8003cd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	61bb      	str	r3, [r7, #24]
}
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01e      	beq.n	8003d16 <xTaskCreateStatic+0xaa>
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01b      	beq.n	8003d16 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9303      	str	r3, [sp, #12]
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	9302      	str	r3, [sp, #8]
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f851 	bl	8003db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d10:	f000 f8ec 	bl	8003eec <prvAddNewTaskToReadyList>
 8003d14:	e001      	b.n	8003d1a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d1a:	697b      	ldr	r3, [r7, #20]
	}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3728      	adds	r7, #40	; 0x28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08c      	sub	sp, #48	; 0x30
 8003d28:	af04      	add	r7, sp, #16
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 fbbf 	bl	80054bc <pvPortMalloc>
 8003d3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d46:	20a8      	movs	r0, #168	; 0xa8
 8003d48:	f001 fbb8 	bl	80054bc <pvPortMalloc>
 8003d4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
 8003d5a:	e005      	b.n	8003d68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d5c:	6978      	ldr	r0, [r7, #20]
 8003d5e:	f001 fc71 	bl	8005644 <vPortFree>
 8003d62:	e001      	b.n	8003d68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d017      	beq.n	8003d9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d76:	88fa      	ldrh	r2, [r7, #6]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9303      	str	r3, [sp, #12]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	9302      	str	r3, [sp, #8]
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f80f 	bl	8003db0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d92:	69f8      	ldr	r0, [r7, #28]
 8003d94:	f000 f8aa 	bl	8003eec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	e002      	b.n	8003da4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003da2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003da4:	69bb      	ldr	r3, [r7, #24]
	}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	21a5      	movs	r1, #165	; 0xa5
 8003dca:	f001 fe66 	bl	8005a9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f023 0307 	bic.w	r3, r3, #7
 8003de6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	617b      	str	r3, [r7, #20]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	e012      	b.n	8003e34 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	7819      	ldrb	r1, [r3, #0]
 8003e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3334      	adds	r3, #52	; 0x34
 8003e1e:	460a      	mov	r2, r1
 8003e20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	4413      	add	r3, r2
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d006      	beq.n	8003e3c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	d9e9      	bls.n	8003e0e <prvInitialiseNewTask+0x5e>
 8003e3a:	e000      	b.n	8003e3e <prvInitialiseNewTask+0x8e>
		{
			break;
 8003e3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	2b37      	cmp	r3, #55	; 0x37
 8003e4a:	d901      	bls.n	8003e50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e4c:	2337      	movs	r3, #55	; 0x37
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	2200      	movs	r2, #0
 8003e60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	3304      	adds	r3, #4
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff f8cd 	bl	8003006 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	3318      	adds	r3, #24
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff f8c8 	bl	8003006 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	3354      	adds	r3, #84	; 0x54
 8003ea0:	224c      	movs	r2, #76	; 0x4c
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f001 fdf8 	bl	8005a9a <memset>
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <prvInitialiseNewTask+0x130>)
 8003eae:	659a      	str	r2, [r3, #88]	; 0x58
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	4a0c      	ldr	r2, [pc, #48]	; (8003ee4 <prvInitialiseNewTask+0x134>)
 8003eb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	4a0b      	ldr	r2, [pc, #44]	; (8003ee8 <prvInitialiseNewTask+0x138>)
 8003eba:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	68f9      	ldr	r1, [r7, #12]
 8003ec0:	69b8      	ldr	r0, [r7, #24]
 8003ec2:	f001 f90b 	bl	80050dc <pxPortInitialiseStack>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ed6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ed8:	bf00      	nop
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20001b14 	.word	0x20001b14
 8003ee4:	20001b7c 	.word	0x20001b7c
 8003ee8:	20001be4 	.word	0x20001be4

08003eec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ef4:	f001 f9e2 	bl	80052bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	; (8003fb0 <prvAddNewTaskToReadyList+0xc4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	3301      	adds	r3, #1
 8003efe:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <prvAddNewTaskToReadyList+0xc4>)
 8003f00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f02:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <prvAddNewTaskToReadyList+0xc8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f0a:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <prvAddNewTaskToReadyList+0xc8>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f10:	4b27      	ldr	r3, [pc, #156]	; (8003fb0 <prvAddNewTaskToReadyList+0xc4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d110      	bne.n	8003f3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f18:	f000 fc28 	bl	800476c <prvInitialiseTaskLists>
 8003f1c:	e00d      	b.n	8003f3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f1e:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <prvAddNewTaskToReadyList+0xcc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f26:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <prvAddNewTaskToReadyList+0xc8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d802      	bhi.n	8003f3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <prvAddNewTaskToReadyList+0xc8>)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f3a:	4b20      	ldr	r3, [pc, #128]	; (8003fbc <prvAddNewTaskToReadyList+0xd0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <prvAddNewTaskToReadyList+0xd0>)
 8003f42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <prvAddNewTaskToReadyList+0xd0>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <prvAddNewTaskToReadyList+0xd4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d903      	bls.n	8003f60 <prvAddNewTaskToReadyList+0x74>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <prvAddNewTaskToReadyList+0xd4>)
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <prvAddNewTaskToReadyList+0xd8>)
 8003f6e:	441a      	add	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f7ff f851 	bl	800301e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f7c:	f001 f9ce 	bl	800531c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f80:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <prvAddNewTaskToReadyList+0xcc>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00e      	beq.n	8003fa6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <prvAddNewTaskToReadyList+0xc8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d207      	bcs.n	8003fa6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <prvAddNewTaskToReadyList+0xdc>)
 8003f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000d9c 	.word	0x20000d9c
 8003fb4:	200008c8 	.word	0x200008c8
 8003fb8:	20000da8 	.word	0x20000da8
 8003fbc:	20000db8 	.word	0x20000db8
 8003fc0:	20000da4 	.word	0x20000da4
 8003fc4:	200008cc 	.word	0x200008cc
 8003fc8:	e000ed04 	.word	0xe000ed04

08003fcc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d017      	beq.n	800400e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fde:	4b13      	ldr	r3, [pc, #76]	; (800402c <vTaskDelay+0x60>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <vTaskDelay+0x30>
	__asm volatile
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	60bb      	str	r3, [r7, #8]
}
 8003ff8:	bf00      	nop
 8003ffa:	e7fe      	b.n	8003ffa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ffc:	f000 f88a 	bl	8004114 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004000:	2100      	movs	r1, #0
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fd04 	bl	8004a10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004008:	f000 f892 	bl	8004130 <xTaskResumeAll>
 800400c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d107      	bne.n	8004024 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <vTaskDelay+0x64>)
 8004016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000dc4 	.word	0x20000dc4
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08a      	sub	sp, #40	; 0x28
 8004038:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004042:	463a      	mov	r2, r7
 8004044:	1d39      	adds	r1, r7, #4
 8004046:	f107 0308 	add.w	r3, r7, #8
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe ff8a 	bl	8002f64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004050:	6839      	ldr	r1, [r7, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	9202      	str	r2, [sp, #8]
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	2300      	movs	r3, #0
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	2300      	movs	r3, #0
 8004060:	460a      	mov	r2, r1
 8004062:	4924      	ldr	r1, [pc, #144]	; (80040f4 <vTaskStartScheduler+0xc0>)
 8004064:	4824      	ldr	r0, [pc, #144]	; (80040f8 <vTaskStartScheduler+0xc4>)
 8004066:	f7ff fe01 	bl	8003c6c <xTaskCreateStatic>
 800406a:	4603      	mov	r3, r0
 800406c:	4a23      	ldr	r2, [pc, #140]	; (80040fc <vTaskStartScheduler+0xc8>)
 800406e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004070:	4b22      	ldr	r3, [pc, #136]	; (80040fc <vTaskStartScheduler+0xc8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004078:	2301      	movs	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e001      	b.n	8004082 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d102      	bne.n	800408e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004088:	f000 fd16 	bl	8004ab8 <xTimerCreateTimerTask>
 800408c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d11b      	bne.n	80040cc <vTaskStartScheduler+0x98>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	613b      	str	r3, [r7, #16]
}
 80040a6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040a8:	4b15      	ldr	r3, [pc, #84]	; (8004100 <vTaskStartScheduler+0xcc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3354      	adds	r3, #84	; 0x54
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <vTaskStartScheduler+0xd0>)
 80040b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040b2:	4b15      	ldr	r3, [pc, #84]	; (8004108 <vTaskStartScheduler+0xd4>)
 80040b4:	f04f 32ff 	mov.w	r2, #4294967295
 80040b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <vTaskStartScheduler+0xd8>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <vTaskStartScheduler+0xdc>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040c6:	f001 f887 	bl	80051d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040ca:	e00e      	b.n	80040ea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d2:	d10a      	bne.n	80040ea <vTaskStartScheduler+0xb6>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	60fb      	str	r3, [r7, #12]
}
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <vTaskStartScheduler+0xb4>
}
 80040ea:	bf00      	nop
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	08006830 	.word	0x08006830
 80040f8:	0800473d 	.word	0x0800473d
 80040fc:	20000dc0 	.word	0x20000dc0
 8004100:	200008c8 	.word	0x200008c8
 8004104:	20000068 	.word	0x20000068
 8004108:	20000dbc 	.word	0x20000dbc
 800410c:	20000da8 	.word	0x20000da8
 8004110:	20000da0 	.word	0x20000da0

08004114 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <vTaskSuspendAll+0x18>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	4a03      	ldr	r2, [pc, #12]	; (800412c <vTaskSuspendAll+0x18>)
 8004120:	6013      	str	r3, [r2, #0]
}
 8004122:	bf00      	nop
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000dc4 	.word	0x20000dc4

08004130 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800413e:	4b42      	ldr	r3, [pc, #264]	; (8004248 <xTaskResumeAll+0x118>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <xTaskResumeAll+0x2c>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	603b      	str	r3, [r7, #0]
}
 8004158:	bf00      	nop
 800415a:	e7fe      	b.n	800415a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800415c:	f001 f8ae 	bl	80052bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004160:	4b39      	ldr	r3, [pc, #228]	; (8004248 <xTaskResumeAll+0x118>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3b01      	subs	r3, #1
 8004166:	4a38      	ldr	r2, [pc, #224]	; (8004248 <xTaskResumeAll+0x118>)
 8004168:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800416a:	4b37      	ldr	r3, [pc, #220]	; (8004248 <xTaskResumeAll+0x118>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d162      	bne.n	8004238 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004172:	4b36      	ldr	r3, [pc, #216]	; (800424c <xTaskResumeAll+0x11c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d05e      	beq.n	8004238 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800417a:	e02f      	b.n	80041dc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800417c:	4b34      	ldr	r3, [pc, #208]	; (8004250 <xTaskResumeAll+0x120>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3318      	adds	r3, #24
 8004188:	4618      	mov	r0, r3
 800418a:	f7fe ffa3 	bl	80030d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3304      	adds	r3, #4
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe ff9e 	bl	80030d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <xTaskResumeAll+0x124>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d903      	bls.n	80041ac <xTaskResumeAll+0x7c>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	4a2a      	ldr	r2, [pc, #168]	; (8004254 <xTaskResumeAll+0x124>)
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4a27      	ldr	r2, [pc, #156]	; (8004258 <xTaskResumeAll+0x128>)
 80041ba:	441a      	add	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3304      	adds	r3, #4
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f7fe ff2b 	bl	800301e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041cc:	4b23      	ldr	r3, [pc, #140]	; (800425c <xTaskResumeAll+0x12c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d302      	bcc.n	80041dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <xTaskResumeAll+0x130>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041dc:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <xTaskResumeAll+0x120>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1cb      	bne.n	800417c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041ea:	f000 fb61 	bl	80048b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80041ee:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <xTaskResumeAll+0x134>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d010      	beq.n	800421c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041fa:	f000 f845 	bl	8004288 <xTaskIncrementTick>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004204:	4b16      	ldr	r3, [pc, #88]	; (8004260 <xTaskResumeAll+0x130>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3b01      	subs	r3, #1
 800420e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f1      	bne.n	80041fa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004216:	4b13      	ldr	r3, [pc, #76]	; (8004264 <xTaskResumeAll+0x134>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <xTaskResumeAll+0x130>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d009      	beq.n	8004238 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004224:	2301      	movs	r3, #1
 8004226:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <xTaskResumeAll+0x138>)
 800422a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004238:	f001 f870 	bl	800531c <vPortExitCritical>

	return xAlreadyYielded;
 800423c:	68bb      	ldr	r3, [r7, #8]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000dc4 	.word	0x20000dc4
 800424c:	20000d9c 	.word	0x20000d9c
 8004250:	20000d5c 	.word	0x20000d5c
 8004254:	20000da4 	.word	0x20000da4
 8004258:	200008cc 	.word	0x200008cc
 800425c:	200008c8 	.word	0x200008c8
 8004260:	20000db0 	.word	0x20000db0
 8004264:	20000dac 	.word	0x20000dac
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <xTaskGetTickCount+0x18>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004278:	687b      	ldr	r3, [r7, #4]
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	20000da0 	.word	0x20000da0

08004288 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004292:	4b51      	ldr	r3, [pc, #324]	; (80043d8 <xTaskIncrementTick+0x150>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f040 808e 	bne.w	80043b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800429c:	4b4f      	ldr	r3, [pc, #316]	; (80043dc <xTaskIncrementTick+0x154>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042a4:	4a4d      	ldr	r2, [pc, #308]	; (80043dc <xTaskIncrementTick+0x154>)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d120      	bne.n	80042f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80042b0:	4b4b      	ldr	r3, [pc, #300]	; (80043e0 <xTaskIncrementTick+0x158>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	603b      	str	r3, [r7, #0]
}
 80042cc:	bf00      	nop
 80042ce:	e7fe      	b.n	80042ce <xTaskIncrementTick+0x46>
 80042d0:	4b43      	ldr	r3, [pc, #268]	; (80043e0 <xTaskIncrementTick+0x158>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <xTaskIncrementTick+0x15c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a41      	ldr	r2, [pc, #260]	; (80043e0 <xTaskIncrementTick+0x158>)
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	4a41      	ldr	r2, [pc, #260]	; (80043e4 <xTaskIncrementTick+0x15c>)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b40      	ldr	r3, [pc, #256]	; (80043e8 <xTaskIncrementTick+0x160>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3301      	adds	r3, #1
 80042ea:	4a3f      	ldr	r2, [pc, #252]	; (80043e8 <xTaskIncrementTick+0x160>)
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	f000 fadf 	bl	80048b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042f2:	4b3e      	ldr	r3, [pc, #248]	; (80043ec <xTaskIncrementTick+0x164>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d34e      	bcc.n	800439a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042fc:	4b38      	ldr	r3, [pc, #224]	; (80043e0 <xTaskIncrementTick+0x158>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <xTaskIncrementTick+0x82>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <xTaskIncrementTick+0x84>
 800430a:	2300      	movs	r3, #0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004310:	4b36      	ldr	r3, [pc, #216]	; (80043ec <xTaskIncrementTick+0x164>)
 8004312:	f04f 32ff 	mov.w	r2, #4294967295
 8004316:	601a      	str	r2, [r3, #0]
					break;
 8004318:	e03f      	b.n	800439a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800431a:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <xTaskIncrementTick+0x158>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	429a      	cmp	r2, r3
 8004330:	d203      	bcs.n	800433a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004332:	4a2e      	ldr	r2, [pc, #184]	; (80043ec <xTaskIncrementTick+0x164>)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6013      	str	r3, [r2, #0]
						break;
 8004338:	e02f      	b.n	800439a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	3304      	adds	r3, #4
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fec8 	bl	80030d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	d004      	beq.n	8004356 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	3318      	adds	r3, #24
 8004350:	4618      	mov	r0, r3
 8004352:	f7fe febf 	bl	80030d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <xTaskIncrementTick+0x168>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d903      	bls.n	800436a <xTaskIncrementTick+0xe2>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	4a22      	ldr	r2, [pc, #136]	; (80043f0 <xTaskIncrementTick+0x168>)
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <xTaskIncrementTick+0x16c>)
 8004378:	441a      	add	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f7fe fe4c 	bl	800301e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438a:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <xTaskIncrementTick+0x170>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	429a      	cmp	r2, r3
 8004392:	d3b3      	bcc.n	80042fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004394:	2301      	movs	r3, #1
 8004396:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004398:	e7b0      	b.n	80042fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800439a:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <xTaskIncrementTick+0x170>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	4914      	ldr	r1, [pc, #80]	; (80043f4 <xTaskIncrementTick+0x16c>)
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d907      	bls.n	80043c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80043b2:	2301      	movs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	e004      	b.n	80043c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80043b8:	4b10      	ldr	r3, [pc, #64]	; (80043fc <xTaskIncrementTick+0x174>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3301      	adds	r3, #1
 80043be:	4a0f      	ldr	r2, [pc, #60]	; (80043fc <xTaskIncrementTick+0x174>)
 80043c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80043c2:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <xTaskIncrementTick+0x178>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80043ca:	2301      	movs	r3, #1
 80043cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80043ce:	697b      	ldr	r3, [r7, #20]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000dc4 	.word	0x20000dc4
 80043dc:	20000da0 	.word	0x20000da0
 80043e0:	20000d54 	.word	0x20000d54
 80043e4:	20000d58 	.word	0x20000d58
 80043e8:	20000db4 	.word	0x20000db4
 80043ec:	20000dbc 	.word	0x20000dbc
 80043f0:	20000da4 	.word	0x20000da4
 80043f4:	200008cc 	.word	0x200008cc
 80043f8:	200008c8 	.word	0x200008c8
 80043fc:	20000dac 	.word	0x20000dac
 8004400:	20000db0 	.word	0x20000db0

08004404 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800440a:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <vTaskSwitchContext+0xb0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004412:	4b29      	ldr	r3, [pc, #164]	; (80044b8 <vTaskSwitchContext+0xb4>)
 8004414:	2201      	movs	r2, #1
 8004416:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004418:	e046      	b.n	80044a8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800441a:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <vTaskSwitchContext+0xb4>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004420:	4b26      	ldr	r3, [pc, #152]	; (80044bc <vTaskSwitchContext+0xb8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	e010      	b.n	800444a <vTaskSwitchContext+0x46>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <vTaskSwitchContext+0x40>
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	607b      	str	r3, [r7, #4]
}
 8004440:	bf00      	nop
 8004442:	e7fe      	b.n	8004442 <vTaskSwitchContext+0x3e>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3b01      	subs	r3, #1
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	491d      	ldr	r1, [pc, #116]	; (80044c0 <vTaskSwitchContext+0xbc>)
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0e4      	beq.n	8004428 <vTaskSwitchContext+0x24>
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4a15      	ldr	r2, [pc, #84]	; (80044c0 <vTaskSwitchContext+0xbc>)
 800446a:	4413      	add	r3, r2
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	3308      	adds	r3, #8
 8004480:	429a      	cmp	r2, r3
 8004482:	d104      	bne.n	800448e <vTaskSwitchContext+0x8a>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <vTaskSwitchContext+0xc0>)
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	4a08      	ldr	r2, [pc, #32]	; (80044bc <vTaskSwitchContext+0xb8>)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <vTaskSwitchContext+0xc0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3354      	adds	r3, #84	; 0x54
 80044a4:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <vTaskSwitchContext+0xc4>)
 80044a6:	6013      	str	r3, [r2, #0]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000dc4 	.word	0x20000dc4
 80044b8:	20000db0 	.word	0x20000db0
 80044bc:	20000da4 	.word	0x20000da4
 80044c0:	200008cc 	.word	0x200008cc
 80044c4:	200008c8 	.word	0x200008c8
 80044c8:	20000068 	.word	0x20000068

080044cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	60fb      	str	r3, [r7, #12]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <vTaskPlaceOnEventList+0x44>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3318      	adds	r3, #24
 80044f8:	4619      	mov	r1, r3
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fe fdb2 	bl	8003064 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004500:	2101      	movs	r1, #1
 8004502:	6838      	ldr	r0, [r7, #0]
 8004504:	f000 fa84 	bl	8004a10 <prvAddCurrentTaskToDelayedList>
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200008c8 	.word	0x200008c8

08004514 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10a      	bne.n	800453c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	617b      	str	r3, [r7, #20]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <vTaskPlaceOnEventListRestricted+0x54>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3318      	adds	r3, #24
 8004542:	4619      	mov	r1, r3
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7fe fd6a 	bl	800301e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004550:	f04f 33ff 	mov.w	r3, #4294967295
 8004554:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	68b8      	ldr	r0, [r7, #8]
 800455a:	f000 fa59 	bl	8004a10 <prvAddCurrentTaskToDelayedList>
	}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	200008c8 	.word	0x200008c8

0800456c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004586:	f383 8811 	msr	BASEPRI, r3
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	60fb      	str	r3, [r7, #12]
}
 8004594:	bf00      	nop
 8004596:	e7fe      	b.n	8004596 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	3318      	adds	r3, #24
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe fd99 	bl	80030d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a2:	4b1e      	ldr	r3, [pc, #120]	; (800461c <xTaskRemoveFromEventList+0xb0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d11d      	bne.n	80045e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe fd90 	bl	80030d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4b19      	ldr	r3, [pc, #100]	; (8004620 <xTaskRemoveFromEventList+0xb4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d903      	bls.n	80045c8 <xTaskRemoveFromEventList+0x5c>
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	4a16      	ldr	r2, [pc, #88]	; (8004620 <xTaskRemoveFromEventList+0xb4>)
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4a13      	ldr	r2, [pc, #76]	; (8004624 <xTaskRemoveFromEventList+0xb8>)
 80045d6:	441a      	add	r2, r3
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f7fe fd1d 	bl	800301e <vListInsertEnd>
 80045e4:	e005      	b.n	80045f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	3318      	adds	r3, #24
 80045ea:	4619      	mov	r1, r3
 80045ec:	480e      	ldr	r0, [pc, #56]	; (8004628 <xTaskRemoveFromEventList+0xbc>)
 80045ee:	f7fe fd16 	bl	800301e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <xTaskRemoveFromEventList+0xc0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d905      	bls.n	800460c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004600:	2301      	movs	r3, #1
 8004602:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004604:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <xTaskRemoveFromEventList+0xc4>)
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e001      	b.n	8004610 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004610:	697b      	ldr	r3, [r7, #20]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000dc4 	.word	0x20000dc4
 8004620:	20000da4 	.word	0x20000da4
 8004624:	200008cc 	.word	0x200008cc
 8004628:	20000d5c 	.word	0x20000d5c
 800462c:	200008c8 	.word	0x200008c8
 8004630:	20000db0 	.word	0x20000db0

08004634 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <vTaskInternalSetTimeOutState+0x24>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <vTaskInternalSetTimeOutState+0x28>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	605a      	str	r2, [r3, #4]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000db4 	.word	0x20000db4
 800465c:	20000da0 	.word	0x20000da0

08004660 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10a      	bne.n	8004686 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	613b      	str	r3, [r7, #16]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	60fb      	str	r3, [r7, #12]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80046a2:	f000 fe0b 	bl	80052bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046a6:	4b1d      	ldr	r3, [pc, #116]	; (800471c <xTaskCheckForTimeOut+0xbc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d102      	bne.n	80046c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	e023      	b.n	800470e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b15      	ldr	r3, [pc, #84]	; (8004720 <xTaskCheckForTimeOut+0xc0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d007      	beq.n	80046e2 <xTaskCheckForTimeOut+0x82>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d302      	bcc.n	80046e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046dc:	2301      	movs	r3, #1
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	e015      	b.n	800470e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d20b      	bcs.n	8004704 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad2      	subs	r2, r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff ff9b 	bl	8004634 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	e004      	b.n	800470e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800470a:	2301      	movs	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800470e:	f000 fe05 	bl	800531c <vPortExitCritical>

	return xReturn;
 8004712:	69fb      	ldr	r3, [r7, #28]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000da0 	.word	0x20000da0
 8004720:	20000db4 	.word	0x20000db4

08004724 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <vTaskMissedYield+0x14>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
}
 800472e:	bf00      	nop
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000db0 	.word	0x20000db0

0800473c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004744:	f000 f852 	bl	80047ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <prvIdleTask+0x28>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d9f9      	bls.n	8004744 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <prvIdleTask+0x2c>)
 8004752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004760:	e7f0      	b.n	8004744 <prvIdleTask+0x8>
 8004762:	bf00      	nop
 8004764:	200008cc 	.word	0x200008cc
 8004768:	e000ed04 	.word	0xe000ed04

0800476c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
 8004776:	e00c      	b.n	8004792 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4a12      	ldr	r2, [pc, #72]	; (80047cc <prvInitialiseTaskLists+0x60>)
 8004784:	4413      	add	r3, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fc1e 	bl	8002fc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3301      	adds	r3, #1
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b37      	cmp	r3, #55	; 0x37
 8004796:	d9ef      	bls.n	8004778 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004798:	480d      	ldr	r0, [pc, #52]	; (80047d0 <prvInitialiseTaskLists+0x64>)
 800479a:	f7fe fc15 	bl	8002fc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800479e:	480d      	ldr	r0, [pc, #52]	; (80047d4 <prvInitialiseTaskLists+0x68>)
 80047a0:	f7fe fc12 	bl	8002fc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047a4:	480c      	ldr	r0, [pc, #48]	; (80047d8 <prvInitialiseTaskLists+0x6c>)
 80047a6:	f7fe fc0f 	bl	8002fc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047aa:	480c      	ldr	r0, [pc, #48]	; (80047dc <prvInitialiseTaskLists+0x70>)
 80047ac:	f7fe fc0c 	bl	8002fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047b0:	480b      	ldr	r0, [pc, #44]	; (80047e0 <prvInitialiseTaskLists+0x74>)
 80047b2:	f7fe fc09 	bl	8002fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <prvInitialiseTaskLists+0x78>)
 80047b8:	4a05      	ldr	r2, [pc, #20]	; (80047d0 <prvInitialiseTaskLists+0x64>)
 80047ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <prvInitialiseTaskLists+0x7c>)
 80047be:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <prvInitialiseTaskLists+0x68>)
 80047c0:	601a      	str	r2, [r3, #0]
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200008cc 	.word	0x200008cc
 80047d0:	20000d2c 	.word	0x20000d2c
 80047d4:	20000d40 	.word	0x20000d40
 80047d8:	20000d5c 	.word	0x20000d5c
 80047dc:	20000d70 	.word	0x20000d70
 80047e0:	20000d88 	.word	0x20000d88
 80047e4:	20000d54 	.word	0x20000d54
 80047e8:	20000d58 	.word	0x20000d58

080047ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047f2:	e019      	b.n	8004828 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047f4:	f000 fd62 	bl	80052bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80047f8:	4b10      	ldr	r3, [pc, #64]	; (800483c <prvCheckTasksWaitingTermination+0x50>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	4618      	mov	r0, r3
 8004806:	f7fe fc65 	bl	80030d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800480a:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <prvCheckTasksWaitingTermination+0x54>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3b01      	subs	r3, #1
 8004810:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <prvCheckTasksWaitingTermination+0x54>)
 8004812:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <prvCheckTasksWaitingTermination+0x58>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3b01      	subs	r3, #1
 800481a:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <prvCheckTasksWaitingTermination+0x58>)
 800481c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800481e:	f000 fd7d 	bl	800531c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f810 	bl	8004848 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <prvCheckTasksWaitingTermination+0x58>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e1      	bne.n	80047f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000d70 	.word	0x20000d70
 8004840:	20000d9c 	.word	0x20000d9c
 8004844:	20000d84 	.word	0x20000d84

08004848 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3354      	adds	r3, #84	; 0x54
 8004854:	4618      	mov	r0, r3
 8004856:	f001 f939 	bl	8005acc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004860:	2b00      	cmp	r3, #0
 8004862:	d108      	bne.n	8004876 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	4618      	mov	r0, r3
 800486a:	f000 feeb 	bl	8005644 <vPortFree>
				vPortFree( pxTCB );
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fee8 	bl	8005644 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004874:	e018      	b.n	80048a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800487c:	2b01      	cmp	r3, #1
 800487e:	d103      	bne.n	8004888 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 fedf 	bl	8005644 <vPortFree>
	}
 8004886:	e00f      	b.n	80048a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800488e:	2b02      	cmp	r3, #2
 8004890:	d00a      	beq.n	80048a8 <prvDeleteTCB+0x60>
	__asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	60fb      	str	r3, [r7, #12]
}
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <prvDeleteTCB+0x5e>
	}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b6:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <prvResetNextTaskUnblockTime+0x40>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <prvResetNextTaskUnblockTime+0x14>
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <prvResetNextTaskUnblockTime+0x16>
 80048c4:	2300      	movs	r3, #0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d004      	beq.n	80048d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <prvResetNextTaskUnblockTime+0x44>)
 80048cc:	f04f 32ff 	mov.w	r2, #4294967295
 80048d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048d2:	e008      	b.n	80048e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048d4:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <prvResetNextTaskUnblockTime+0x40>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <prvResetNextTaskUnblockTime+0x44>)
 80048e4:	6013      	str	r3, [r2, #0]
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr
 80048f0:	20000d54 	.word	0x20000d54
 80048f4:	20000dbc 	.word	0x20000dbc

080048f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048fe:	4b0b      	ldr	r3, [pc, #44]	; (800492c <xTaskGetSchedulerState+0x34>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d102      	bne.n	800490c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004906:	2301      	movs	r3, #1
 8004908:	607b      	str	r3, [r7, #4]
 800490a:	e008      	b.n	800491e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800490c:	4b08      	ldr	r3, [pc, #32]	; (8004930 <xTaskGetSchedulerState+0x38>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004914:	2302      	movs	r3, #2
 8004916:	607b      	str	r3, [r7, #4]
 8004918:	e001      	b.n	800491e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800491e:	687b      	ldr	r3, [r7, #4]
	}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000da8 	.word	0x20000da8
 8004930:	20000dc4 	.word	0x20000dc4

08004934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d056      	beq.n	80049f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800494a:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <xTaskPriorityDisinherit+0xd0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	429a      	cmp	r2, r3
 8004952:	d00a      	beq.n	800496a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	60fb      	str	r3, [r7, #12]
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	60bb      	str	r3, [r7, #8]
}
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498c:	1e5a      	subs	r2, r3, #1
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	429a      	cmp	r2, r3
 800499c:	d02c      	beq.n	80049f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d128      	bne.n	80049f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe fb92 	bl	80030d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <xTaskPriorityDisinherit+0xd4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d903      	bls.n	80049d8 <xTaskPriorityDisinherit+0xa4>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <xTaskPriorityDisinherit+0xd4>)
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <xTaskPriorityDisinherit+0xd8>)
 80049e6:	441a      	add	r2, r3
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f7fe fb15 	bl	800301e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049f4:	2301      	movs	r3, #1
 80049f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049f8:	697b      	ldr	r3, [r7, #20]
	}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	200008c8 	.word	0x200008c8
 8004a08:	20000da4 	.word	0x20000da4
 8004a0c:	200008cc 	.word	0x200008cc

08004a10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a1a:	4b21      	ldr	r3, [pc, #132]	; (8004aa0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a20:	4b20      	ldr	r3, [pc, #128]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3304      	adds	r3, #4
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe fb54 	bl	80030d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d10a      	bne.n	8004a4a <prvAddCurrentTaskToDelayedList+0x3a>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d007      	beq.n	8004a4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a3a:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4819      	ldr	r0, [pc, #100]	; (8004aa8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a44:	f7fe faeb 	bl	800301e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a48:	e026      	b.n	8004a98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4413      	add	r3, r2
 8004a50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a52:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d209      	bcs.n	8004a76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f7fe faf8 	bl	8003064 <vListInsert>
}
 8004a74:	e010      	b.n	8004a98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a76:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f7fe faee 	bl	8003064 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d202      	bcs.n	8004a98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a92:	4a08      	ldr	r2, [pc, #32]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	6013      	str	r3, [r2, #0]
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000da0 	.word	0x20000da0
 8004aa4:	200008c8 	.word	0x200008c8
 8004aa8:	20000d88 	.word	0x20000d88
 8004aac:	20000d58 	.word	0x20000d58
 8004ab0:	20000d54 	.word	0x20000d54
 8004ab4:	20000dbc 	.word	0x20000dbc

08004ab8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	; 0x28
 8004abc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ac2:	f000 facb 	bl	800505c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ac6:	4b1c      	ldr	r3, [pc, #112]	; (8004b38 <xTimerCreateTimerTask+0x80>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d021      	beq.n	8004b12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ad6:	1d3a      	adds	r2, r7, #4
 8004ad8:	f107 0108 	add.w	r1, r7, #8
 8004adc:	f107 030c 	add.w	r3, r7, #12
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe fa57 	bl	8002f94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	9202      	str	r2, [sp, #8]
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	2302      	movs	r3, #2
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	2300      	movs	r3, #0
 8004af6:	460a      	mov	r2, r1
 8004af8:	4910      	ldr	r1, [pc, #64]	; (8004b3c <xTimerCreateTimerTask+0x84>)
 8004afa:	4811      	ldr	r0, [pc, #68]	; (8004b40 <xTimerCreateTimerTask+0x88>)
 8004afc:	f7ff f8b6 	bl	8003c6c <xTaskCreateStatic>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4a10      	ldr	r2, [pc, #64]	; (8004b44 <xTimerCreateTimerTask+0x8c>)
 8004b04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <xTimerCreateTimerTask+0x8c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	613b      	str	r3, [r7, #16]
}
 8004b2a:	bf00      	nop
 8004b2c:	e7fe      	b.n	8004b2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b2e:	697b      	ldr	r3, [r7, #20]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20000df8 	.word	0x20000df8
 8004b3c:	08006838 	.word	0x08006838
 8004b40:	08004c65 	.word	0x08004c65
 8004b44:	20000dfc 	.word	0x20000dfc

08004b48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08a      	sub	sp, #40	; 0x28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
 8004b54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	623b      	str	r3, [r7, #32]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <xTimerGenericCommand+0x98>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d02a      	beq.n	8004bd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	dc18      	bgt.n	8004bc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b90:	f7ff feb2 	bl	80048f8 <xTaskGetSchedulerState>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d109      	bne.n	8004bae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b9a:	4b11      	ldr	r3, [pc, #68]	; (8004be0 <xTimerGenericCommand+0x98>)
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	f107 0110 	add.w	r1, r7, #16
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba6:	f7fe fbff 	bl	80033a8 <xQueueGenericSend>
 8004baa:	6278      	str	r0, [r7, #36]	; 0x24
 8004bac:	e012      	b.n	8004bd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bae:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <xTimerGenericCommand+0x98>)
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	f107 0110 	add.w	r1, r7, #16
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f7fe fbf5 	bl	80033a8 <xQueueGenericSend>
 8004bbe:	6278      	str	r0, [r7, #36]	; 0x24
 8004bc0:	e008      	b.n	8004bd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <xTimerGenericCommand+0x98>)
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	f107 0110 	add.w	r1, r7, #16
 8004bca:	2300      	movs	r3, #0
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	f7fe fce9 	bl	80035a4 <xQueueGenericSendFromISR>
 8004bd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3728      	adds	r7, #40	; 0x28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000df8 	.word	0x20000df8

08004be4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af02      	add	r7, sp, #8
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bee:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <prvProcessExpiredTimer+0x7c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe fa69 	bl	80030d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d122      	bne.n	8004c50 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	18d1      	adds	r1, r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	6978      	ldr	r0, [r7, #20]
 8004c18:	f000 f8c8 	bl	8004dac <prvInsertTimerInActiveList>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d016      	beq.n	8004c50 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c22:	2300      	movs	r3, #0
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	2300      	movs	r3, #0
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	6978      	ldr	r0, [r7, #20]
 8004c2e:	f7ff ff8b 	bl	8004b48 <xTimerGenericCommand>
 8004c32:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	60fb      	str	r3, [r7, #12]
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	6978      	ldr	r0, [r7, #20]
 8004c56:	4798      	blx	r3
}
 8004c58:	bf00      	nop
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000df0 	.word	0x20000df0

08004c64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c6c:	f107 0308 	add.w	r3, r7, #8
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 f857 	bl	8004d24 <prvGetNextExpireTime>
 8004c76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f803 	bl	8004c88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c82:	f000 f8d5 	bl	8004e30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c86:	e7f1      	b.n	8004c6c <prvTimerTask+0x8>

08004c88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c92:	f7ff fa3f 	bl	8004114 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c96:	f107 0308 	add.w	r3, r7, #8
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 f866 	bl	8004d6c <prvSampleTimeNow>
 8004ca0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d130      	bne.n	8004d0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <prvProcessTimerOrBlockTask+0x3c>
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d806      	bhi.n	8004cc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004cb6:	f7ff fa3b 	bl	8004130 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff ff91 	bl	8004be4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004cc2:	e024      	b.n	8004d0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004cca:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <prvProcessTimerOrBlockTask+0x90>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004cdc:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <prvProcessTimerOrBlockTask+0x94>)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	f7fe ff8b 	bl	8003c04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004cee:	f7ff fa1f 	bl	8004130 <xTaskResumeAll>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004cf8:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <prvProcessTimerOrBlockTask+0x98>)
 8004cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	f3bf 8f6f 	isb	sy
}
 8004d08:	e001      	b.n	8004d0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d0a:	f7ff fa11 	bl	8004130 <xTaskResumeAll>
}
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000df4 	.word	0x20000df4
 8004d1c:	20000df8 	.word	0x20000df8
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <prvGetNextExpireTime+0x44>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf0c      	ite	eq
 8004d36:	2301      	moveq	r3, #1
 8004d38:	2300      	movne	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d105      	bne.n	8004d56 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d4a:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <prvGetNextExpireTime+0x44>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e001      	b.n	8004d5a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20000df0 	.word	0x20000df0

08004d6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d74:	f7ff fa7a 	bl	800426c <xTaskGetTickCount>
 8004d78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <prvSampleTimeNow+0x3c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d205      	bcs.n	8004d90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d84:	f000 f908 	bl	8004f98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e002      	b.n	8004d96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d96:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <prvSampleTimeNow+0x3c>)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000e00 	.word	0x20000e00

08004dac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d812      	bhi.n	8004df8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	1ad2      	subs	r2, r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d302      	bcc.n	8004de6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	e01b      	b.n	8004e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004de6:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <prvInsertTimerInActiveList+0x7c>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3304      	adds	r3, #4
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f7fe f937 	bl	8003064 <vListInsert>
 8004df6:	e012      	b.n	8004e1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d206      	bcs.n	8004e0e <prvInsertTimerInActiveList+0x62>
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d302      	bcc.n	8004e0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e007      	b.n	8004e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e0e:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <prvInsertTimerInActiveList+0x80>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f7fe f923 	bl	8003064 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e1e:	697b      	ldr	r3, [r7, #20]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000df4 	.word	0x20000df4
 8004e2c:	20000df0 	.word	0x20000df0

08004e30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08e      	sub	sp, #56	; 0x38
 8004e34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e36:	e09d      	b.n	8004f74 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da18      	bge.n	8004e70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e3e:	1d3b      	adds	r3, r7, #4
 8004e40:	3304      	adds	r3, #4
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	61fb      	str	r3, [r7, #28]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e66:	6850      	ldr	r0, [r2, #4]
 8004e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e6a:	6892      	ldr	r2, [r2, #8]
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	db7e      	blt.n	8004f74 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d004      	beq.n	8004e8c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	3304      	adds	r3, #4
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe f924 	bl	80030d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e8c:	463b      	mov	r3, r7
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff ff6c 	bl	8004d6c <prvSampleTimeNow>
 8004e94:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b09      	cmp	r3, #9
 8004e9a:	d86a      	bhi.n	8004f72 <prvProcessReceivedCommands+0x142>
 8004e9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <prvProcessReceivedCommands+0x74>)
 8004e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea2:	bf00      	nop
 8004ea4:	08004ecd 	.word	0x08004ecd
 8004ea8:	08004ecd 	.word	0x08004ecd
 8004eac:	08004ecd 	.word	0x08004ecd
 8004eb0:	08004f75 	.word	0x08004f75
 8004eb4:	08004f29 	.word	0x08004f29
 8004eb8:	08004f61 	.word	0x08004f61
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004ecd 	.word	0x08004ecd
 8004ec4:	08004f75 	.word	0x08004f75
 8004ec8:	08004f29 	.word	0x08004f29
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	18d1      	adds	r1, r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eda:	f7ff ff67 	bl	8004dac <prvInsertTimerInActiveList>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d047      	beq.n	8004f74 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d13f      	bne.n	8004f74 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	441a      	add	r2, r3
 8004efc:	2300      	movs	r3, #0
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	2300      	movs	r3, #0
 8004f02:	2100      	movs	r1, #0
 8004f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f06:	f7ff fe1f 	bl	8004b48 <xTimerGenericCommand>
 8004f0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d130      	bne.n	8004f74 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	61bb      	str	r3, [r7, #24]
}
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	617b      	str	r3, [r7, #20]
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	18d1      	adds	r1, r2, r3
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f5a:	f7ff ff27 	bl	8004dac <prvInsertTimerInActiveList>
					break;
 8004f5e:	e009      	b.n	8004f74 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f6c:	f000 fb6a 	bl	8005644 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f70:	e000      	b.n	8004f74 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8004f72:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f74:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <prvProcessReceivedCommands+0x164>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	1d39      	adds	r1, r7, #4
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fe fba9 	bl	80036d4 <xQueueReceive>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f47f af57 	bne.w	8004e38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	3730      	adds	r7, #48	; 0x30
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000df8 	.word	0x20000df8

08004f98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f9e:	e045      	b.n	800502c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fa0:	4b2c      	ldr	r3, [pc, #176]	; (8005054 <prvSwitchTimerLists+0xbc>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004faa:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <prvSwitchTimerLists+0xbc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fe f88b 	bl	80030d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d12e      	bne.n	800502c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d90e      	bls.n	8004ffe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fec:	4b19      	ldr	r3, [pc, #100]	; (8005054 <prvSwitchTimerLists+0xbc>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f7fe f834 	bl	8003064 <vListInsert>
 8004ffc:	e016      	b.n	800502c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ffe:	2300      	movs	r3, #0
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	2100      	movs	r1, #0
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f7ff fd9d 	bl	8004b48 <xTimerGenericCommand>
 800500e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10a      	bne.n	800502c <prvSwitchTimerLists+0x94>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	603b      	str	r3, [r7, #0]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <prvSwitchTimerLists+0xbc>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1b4      	bne.n	8004fa0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005036:	4b07      	ldr	r3, [pc, #28]	; (8005054 <prvSwitchTimerLists+0xbc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <prvSwitchTimerLists+0xc0>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a04      	ldr	r2, [pc, #16]	; (8005054 <prvSwitchTimerLists+0xbc>)
 8005042:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005044:	4a04      	ldr	r2, [pc, #16]	; (8005058 <prvSwitchTimerLists+0xc0>)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	6013      	str	r3, [r2, #0]
}
 800504a:	bf00      	nop
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000df0 	.word	0x20000df0
 8005058:	20000df4 	.word	0x20000df4

0800505c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005062:	f000 f92b 	bl	80052bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005066:	4b15      	ldr	r3, [pc, #84]	; (80050bc <prvCheckForValidListAndQueue+0x60>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d120      	bne.n	80050b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800506e:	4814      	ldr	r0, [pc, #80]	; (80050c0 <prvCheckForValidListAndQueue+0x64>)
 8005070:	f7fd ffaa 	bl	8002fc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005074:	4813      	ldr	r0, [pc, #76]	; (80050c4 <prvCheckForValidListAndQueue+0x68>)
 8005076:	f7fd ffa7 	bl	8002fc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800507a:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <prvCheckForValidListAndQueue+0x6c>)
 800507c:	4a10      	ldr	r2, [pc, #64]	; (80050c0 <prvCheckForValidListAndQueue+0x64>)
 800507e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005080:	4b12      	ldr	r3, [pc, #72]	; (80050cc <prvCheckForValidListAndQueue+0x70>)
 8005082:	4a10      	ldr	r2, [pc, #64]	; (80050c4 <prvCheckForValidListAndQueue+0x68>)
 8005084:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005086:	2300      	movs	r3, #0
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <prvCheckForValidListAndQueue+0x74>)
 800508c:	4a11      	ldr	r2, [pc, #68]	; (80050d4 <prvCheckForValidListAndQueue+0x78>)
 800508e:	2110      	movs	r1, #16
 8005090:	200a      	movs	r0, #10
 8005092:	f7fe f8b1 	bl	80031f8 <xQueueGenericCreateStatic>
 8005096:	4603      	mov	r3, r0
 8005098:	4a08      	ldr	r2, [pc, #32]	; (80050bc <prvCheckForValidListAndQueue+0x60>)
 800509a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800509c:	4b07      	ldr	r3, [pc, #28]	; (80050bc <prvCheckForValidListAndQueue+0x60>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <prvCheckForValidListAndQueue+0x60>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	490b      	ldr	r1, [pc, #44]	; (80050d8 <prvCheckForValidListAndQueue+0x7c>)
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fe fd82 	bl	8003bb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050b0:	f000 f934 	bl	800531c <vPortExitCritical>
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000df8 	.word	0x20000df8
 80050c0:	20000dc8 	.word	0x20000dc8
 80050c4:	20000ddc 	.word	0x20000ddc
 80050c8:	20000df0 	.word	0x20000df0
 80050cc:	20000df4 	.word	0x20000df4
 80050d0:	20000ea4 	.word	0x20000ea4
 80050d4:	20000e04 	.word	0x20000e04
 80050d8:	08006840 	.word	0x08006840

080050dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3b04      	subs	r3, #4
 80050ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3b04      	subs	r3, #4
 80050fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f023 0201 	bic.w	r2, r3, #1
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3b04      	subs	r3, #4
 800510a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800510c:	4a08      	ldr	r2, [pc, #32]	; (8005130 <pxPortInitialiseStack+0x54>)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3b14      	subs	r3, #20
 8005116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3b20      	subs	r3, #32
 8005122:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005124:	68fb      	ldr	r3, [r7, #12]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr
 8005130:	08005135 	.word	0x08005135

08005134 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800513a:	2300      	movs	r3, #0
 800513c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800513e:	4b12      	ldr	r3, [pc, #72]	; (8005188 <prvTaskExitError+0x54>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005146:	d00a      	beq.n	800515e <prvTaskExitError+0x2a>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	60fb      	str	r3, [r7, #12]
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <prvTaskExitError+0x28>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	60bb      	str	r3, [r7, #8]
}
 8005170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005172:	bf00      	nop
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0fc      	beq.n	8005174 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800517a:	bf00      	nop
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	2000000c 	.word	0x2000000c
 800518c:	00000000 	.word	0x00000000

08005190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005190:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <pxCurrentTCBConst2>)
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	6808      	ldr	r0, [r1, #0]
 8005196:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800519a:	f380 8809 	msr	PSP, r0
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f04f 0000 	mov.w	r0, #0
 80051a6:	f380 8811 	msr	BASEPRI, r0
 80051aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80051ae:	4770      	bx	lr

080051b0 <pxCurrentTCBConst2>:
 80051b0:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop

080051b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80051b8:	4806      	ldr	r0, [pc, #24]	; (80051d4 <prvPortStartFirstTask+0x1c>)
 80051ba:	6800      	ldr	r0, [r0, #0]
 80051bc:	6800      	ldr	r0, [r0, #0]
 80051be:	f380 8808 	msr	MSP, r0
 80051c2:	b662      	cpsie	i
 80051c4:	b661      	cpsie	f
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	df00      	svc	0
 80051d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051d2:	bf00      	nop
 80051d4:	e000ed08 	.word	0xe000ed08

080051d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051de:	4b32      	ldr	r3, [pc, #200]	; (80052a8 <xPortStartScheduler+0xd0>)
 80051e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	22ff      	movs	r2, #255	; 0xff
 80051ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005200:	b2da      	uxtb	r2, r3
 8005202:	4b2a      	ldr	r3, [pc, #168]	; (80052ac <xPortStartScheduler+0xd4>)
 8005204:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005206:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <xPortStartScheduler+0xd8>)
 8005208:	2207      	movs	r2, #7
 800520a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800520c:	e009      	b.n	8005222 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800520e:	4b28      	ldr	r3, [pc, #160]	; (80052b0 <xPortStartScheduler+0xd8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3b01      	subs	r3, #1
 8005214:	4a26      	ldr	r2, [pc, #152]	; (80052b0 <xPortStartScheduler+0xd8>)
 8005216:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	b2db      	uxtb	r3, r3
 8005220:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005222:	78fb      	ldrb	r3, [r7, #3]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522a:	2b80      	cmp	r3, #128	; 0x80
 800522c:	d0ef      	beq.n	800520e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800522e:	4b20      	ldr	r3, [pc, #128]	; (80052b0 <xPortStartScheduler+0xd8>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1c3 0307 	rsb	r3, r3, #7
 8005236:	2b04      	cmp	r3, #4
 8005238:	d00a      	beq.n	8005250 <xPortStartScheduler+0x78>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	60bb      	str	r3, [r7, #8]
}
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005250:	4b17      	ldr	r3, [pc, #92]	; (80052b0 <xPortStartScheduler+0xd8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <xPortStartScheduler+0xd8>)
 8005258:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800525a:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <xPortStartScheduler+0xd8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005262:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <xPortStartScheduler+0xd8>)
 8005264:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	b2da      	uxtb	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800526e:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <xPortStartScheduler+0xdc>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a10      	ldr	r2, [pc, #64]	; (80052b4 <xPortStartScheduler+0xdc>)
 8005274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005278:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800527a:	4b0e      	ldr	r3, [pc, #56]	; (80052b4 <xPortStartScheduler+0xdc>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a0d      	ldr	r2, [pc, #52]	; (80052b4 <xPortStartScheduler+0xdc>)
 8005280:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005284:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005286:	f000 f8b9 	bl	80053fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <xPortStartScheduler+0xe0>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005290:	f7ff ff92 	bl	80051b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005294:	f7ff f8b6 	bl	8004404 <vTaskSwitchContext>
	prvTaskExitError();
 8005298:	f7ff ff4c 	bl	8005134 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	e000e400 	.word	0xe000e400
 80052ac:	20000ef4 	.word	0x20000ef4
 80052b0:	20000ef8 	.word	0x20000ef8
 80052b4:	e000ed20 	.word	0xe000ed20
 80052b8:	2000000c 	.word	0x2000000c

080052bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	607b      	str	r3, [r7, #4]
}
 80052d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052d6:	4b0f      	ldr	r3, [pc, #60]	; (8005314 <vPortEnterCritical+0x58>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3301      	adds	r3, #1
 80052dc:	4a0d      	ldr	r2, [pc, #52]	; (8005314 <vPortEnterCritical+0x58>)
 80052de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052e0:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <vPortEnterCritical+0x58>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10f      	bne.n	8005308 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <vPortEnterCritical+0x5c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <vPortEnterCritical+0x4c>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	603b      	str	r3, [r7, #0]
}
 8005304:	bf00      	nop
 8005306:	e7fe      	b.n	8005306 <vPortEnterCritical+0x4a>
	}
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	2000000c 	.word	0x2000000c
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005322:	4b11      	ldr	r3, [pc, #68]	; (8005368 <vPortExitCritical+0x4c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <vPortExitCritical+0x24>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	607b      	str	r3, [r7, #4]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005340:	4b09      	ldr	r3, [pc, #36]	; (8005368 <vPortExitCritical+0x4c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3b01      	subs	r3, #1
 8005346:	4a08      	ldr	r2, [pc, #32]	; (8005368 <vPortExitCritical+0x4c>)
 8005348:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800534a:	4b07      	ldr	r3, [pc, #28]	; (8005368 <vPortExitCritical+0x4c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d105      	bne.n	800535e <vPortExitCritical+0x42>
 8005352:	2300      	movs	r3, #0
 8005354:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f383 8811 	msr	BASEPRI, r3
}
 800535c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr
 8005368:	2000000c 	.word	0x2000000c
 800536c:	00000000 	.word	0x00000000

08005370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005370:	f3ef 8009 	mrs	r0, PSP
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <pxCurrentTCBConst>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005380:	6010      	str	r0, [r2, #0]
 8005382:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005386:	f04f 0050 	mov.w	r0, #80	; 0x50
 800538a:	f380 8811 	msr	BASEPRI, r0
 800538e:	f7ff f839 	bl	8004404 <vTaskSwitchContext>
 8005392:	f04f 0000 	mov.w	r0, #0
 8005396:	f380 8811 	msr	BASEPRI, r0
 800539a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800539e:	6819      	ldr	r1, [r3, #0]
 80053a0:	6808      	ldr	r0, [r1, #0]
 80053a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053a6:	f380 8809 	msr	PSP, r0
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	4770      	bx	lr

080053b0 <pxCurrentTCBConst>:
 80053b0:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop

080053b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	607b      	str	r3, [r7, #4]
}
 80053d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053d2:	f7fe ff59 	bl	8004288 <xTaskIncrementTick>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053dc:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <SysTick_Handler+0x40>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	2300      	movs	r3, #0
 80053e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	f383 8811 	msr	BASEPRI, r3
}
 80053ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053f0:	bf00      	nop
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005400:	4b0a      	ldr	r3, [pc, #40]	; (800542c <vPortSetupTimerInterrupt+0x30>)
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <vPortSetupTimerInterrupt+0x34>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <vPortSetupTimerInterrupt+0x38>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a09      	ldr	r2, [pc, #36]	; (8005438 <vPortSetupTimerInterrupt+0x3c>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	099b      	lsrs	r3, r3, #6
 8005418:	4a08      	ldr	r2, [pc, #32]	; (800543c <vPortSetupTimerInterrupt+0x40>)
 800541a:	3b01      	subs	r3, #1
 800541c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800541e:	4b03      	ldr	r3, [pc, #12]	; (800542c <vPortSetupTimerInterrupt+0x30>)
 8005420:	2207      	movs	r2, #7
 8005422:	601a      	str	r2, [r3, #0]
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr
 800542c:	e000e010 	.word	0xe000e010
 8005430:	e000e018 	.word	0xe000e018
 8005434:	20000000 	.word	0x20000000
 8005438:	10624dd3 	.word	0x10624dd3
 800543c:	e000e014 	.word	0xe000e014

08005440 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005446:	f3ef 8305 	mrs	r3, IPSR
 800544a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b0f      	cmp	r3, #15
 8005450:	d914      	bls.n	800547c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005452:	4a16      	ldr	r2, [pc, #88]	; (80054ac <vPortValidateInterruptPriority+0x6c>)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800545c:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <vPortValidateInterruptPriority+0x70>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	7afa      	ldrb	r2, [r7, #11]
 8005462:	429a      	cmp	r2, r3
 8005464:	d20a      	bcs.n	800547c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	607b      	str	r3, [r7, #4]
}
 8005478:	bf00      	nop
 800547a:	e7fe      	b.n	800547a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800547c:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <vPortValidateInterruptPriority+0x74>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005484:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <vPortValidateInterruptPriority+0x78>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d90a      	bls.n	80054a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	603b      	str	r3, [r7, #0]
}
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <vPortValidateInterruptPriority+0x60>
	}
 80054a2:	bf00      	nop
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr
 80054ac:	e000e3f0 	.word	0xe000e3f0
 80054b0:	20000ef4 	.word	0x20000ef4
 80054b4:	e000ed0c 	.word	0xe000ed0c
 80054b8:	20000ef8 	.word	0x20000ef8

080054bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	; 0x28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054c8:	f7fe fe24 	bl	8004114 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054cc:	4b58      	ldr	r3, [pc, #352]	; (8005630 <pvPortMalloc+0x174>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054d4:	f000 f910 	bl	80056f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054d8:	4b56      	ldr	r3, [pc, #344]	; (8005634 <pvPortMalloc+0x178>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f040 808e 	bne.w	8005602 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01d      	beq.n	8005528 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054ec:	2208      	movs	r2, #8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d014      	beq.n	8005528 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f023 0307 	bic.w	r3, r3, #7
 8005504:	3308      	adds	r3, #8
 8005506:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <pvPortMalloc+0x6c>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	617b      	str	r3, [r7, #20]
}
 8005524:	bf00      	nop
 8005526:	e7fe      	b.n	8005526 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d069      	beq.n	8005602 <pvPortMalloc+0x146>
 800552e:	4b42      	ldr	r3, [pc, #264]	; (8005638 <pvPortMalloc+0x17c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d864      	bhi.n	8005602 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005538:	4b40      	ldr	r3, [pc, #256]	; (800563c <pvPortMalloc+0x180>)
 800553a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800553c:	4b3f      	ldr	r3, [pc, #252]	; (800563c <pvPortMalloc+0x180>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005542:	e004      	b.n	800554e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d903      	bls.n	8005560 <pvPortMalloc+0xa4>
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f1      	bne.n	8005544 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005560:	4b33      	ldr	r3, [pc, #204]	; (8005630 <pvPortMalloc+0x174>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005566:	429a      	cmp	r2, r3
 8005568:	d04b      	beq.n	8005602 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2208      	movs	r2, #8
 8005570:	4413      	add	r3, r2
 8005572:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	1ad2      	subs	r2, r2, r3
 8005584:	2308      	movs	r3, #8
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	429a      	cmp	r2, r3
 800558a:	d91f      	bls.n	80055cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800558c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <pvPortMalloc+0xf8>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	613b      	str	r3, [r7, #16]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	1ad2      	subs	r2, r2, r3
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055c6:	69b8      	ldr	r0, [r7, #24]
 80055c8:	f000 f8f8 	bl	80057bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055cc:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <pvPortMalloc+0x17c>)
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <pvPortMalloc+0x17c>)
 80055d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055da:	4b17      	ldr	r3, [pc, #92]	; (8005638 <pvPortMalloc+0x17c>)
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4b18      	ldr	r3, [pc, #96]	; (8005640 <pvPortMalloc+0x184>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d203      	bcs.n	80055ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <pvPortMalloc+0x17c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a15      	ldr	r2, [pc, #84]	; (8005640 <pvPortMalloc+0x184>)
 80055ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	4b10      	ldr	r3, [pc, #64]	; (8005634 <pvPortMalloc+0x178>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005602:	f7fe fd95 	bl	8004130 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <pvPortMalloc+0x16a>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60fb      	str	r3, [r7, #12]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <pvPortMalloc+0x168>
	return pvReturn;
 8005626:	69fb      	ldr	r3, [r7, #28]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3728      	adds	r7, #40	; 0x28
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20001b04 	.word	0x20001b04
 8005634:	20001b10 	.word	0x20001b10
 8005638:	20001b08 	.word	0x20001b08
 800563c:	20001afc 	.word	0x20001afc
 8005640:	20001b0c 	.word	0x20001b0c

08005644 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d048      	beq.n	80056e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005656:	2308      	movs	r3, #8
 8005658:	425b      	negs	r3, r3
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4413      	add	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <vPortFree+0xac>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <vPortFree+0x44>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	60fb      	str	r3, [r7, #12]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <vPortFree+0x62>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60bb      	str	r3, [r7, #8]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <vPortFree+0xac>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d019      	beq.n	80056e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d115      	bne.n	80056e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <vPortFree+0xac>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	43db      	mvns	r3, r3
 80056c6:	401a      	ands	r2, r3
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056cc:	f7fe fd22 	bl	8004114 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <vPortFree+0xb0>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4413      	add	r3, r2
 80056da:	4a06      	ldr	r2, [pc, #24]	; (80056f4 <vPortFree+0xb0>)
 80056dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056de:	6938      	ldr	r0, [r7, #16]
 80056e0:	f000 f86c 	bl	80057bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80056e4:	f7fe fd24 	bl	8004130 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056e8:	bf00      	nop
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20001b10 	.word	0x20001b10
 80056f4:	20001b08 	.word	0x20001b08

080056f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005702:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005704:	4b27      	ldr	r3, [pc, #156]	; (80057a4 <prvHeapInit+0xac>)
 8005706:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00c      	beq.n	800572c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3307      	adds	r3, #7
 8005716:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0307 	bic.w	r3, r3, #7
 800571e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	4a1f      	ldr	r2, [pc, #124]	; (80057a4 <prvHeapInit+0xac>)
 8005728:	4413      	add	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005730:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <prvHeapInit+0xb0>)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005736:	4b1c      	ldr	r3, [pc, #112]	; (80057a8 <prvHeapInit+0xb0>)
 8005738:	2200      	movs	r2, #0
 800573a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4413      	add	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005744:	2208      	movs	r2, #8
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1a9b      	subs	r3, r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0307 	bic.w	r3, r3, #7
 8005752:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4a15      	ldr	r2, [pc, #84]	; (80057ac <prvHeapInit+0xb4>)
 8005758:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800575a:	4b14      	ldr	r3, [pc, #80]	; (80057ac <prvHeapInit+0xb4>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005762:	4b12      	ldr	r3, [pc, #72]	; (80057ac <prvHeapInit+0xb4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	1ad2      	subs	r2, r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005778:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <prvHeapInit+0xb4>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <prvHeapInit+0xb8>)
 8005786:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	4a09      	ldr	r2, [pc, #36]	; (80057b4 <prvHeapInit+0xbc>)
 800578e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005790:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <prvHeapInit+0xc0>)
 8005792:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005796:	601a      	str	r2, [r3, #0]
}
 8005798:	bf00      	nop
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000efc 	.word	0x20000efc
 80057a8:	20001afc 	.word	0x20001afc
 80057ac:	20001b04 	.word	0x20001b04
 80057b0:	20001b0c 	.word	0x20001b0c
 80057b4:	20001b08 	.word	0x20001b08
 80057b8:	20001b10 	.word	0x20001b10

080057bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057c4:	4b27      	ldr	r3, [pc, #156]	; (8005864 <prvInsertBlockIntoFreeList+0xa8>)
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e002      	b.n	80057d0 <prvInsertBlockIntoFreeList+0x14>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d8f7      	bhi.n	80057ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	4413      	add	r3, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d108      	bne.n	80057fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	441a      	add	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	441a      	add	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d118      	bne.n	8005844 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	4b14      	ldr	r3, [pc, #80]	; (8005868 <prvInsertBlockIntoFreeList+0xac>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d00d      	beq.n	800583a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	441a      	add	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e008      	b.n	800584c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <prvInsertBlockIntoFreeList+0xac>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e003      	b.n	800584c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	429a      	cmp	r2, r3
 8005852:	d002      	beq.n	800585a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr
 8005864:	20001afc 	.word	0x20001afc
 8005868:	20001b04 	.word	0x20001b04

0800586c <std>:
 800586c:	2300      	movs	r3, #0
 800586e:	b510      	push	{r4, lr}
 8005870:	4604      	mov	r4, r0
 8005872:	e9c0 3300 	strd	r3, r3, [r0]
 8005876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800587a:	6083      	str	r3, [r0, #8]
 800587c:	8181      	strh	r1, [r0, #12]
 800587e:	6643      	str	r3, [r0, #100]	; 0x64
 8005880:	81c2      	strh	r2, [r0, #14]
 8005882:	6183      	str	r3, [r0, #24]
 8005884:	4619      	mov	r1, r3
 8005886:	2208      	movs	r2, #8
 8005888:	305c      	adds	r0, #92	; 0x5c
 800588a:	f000 f906 	bl	8005a9a <memset>
 800588e:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <std+0x58>)
 8005890:	6224      	str	r4, [r4, #32]
 8005892:	6263      	str	r3, [r4, #36]	; 0x24
 8005894:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <std+0x5c>)
 8005896:	62a3      	str	r3, [r4, #40]	; 0x28
 8005898:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <std+0x60>)
 800589a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <std+0x64>)
 800589e:	6323      	str	r3, [r4, #48]	; 0x30
 80058a0:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <std+0x68>)
 80058a2:	429c      	cmp	r4, r3
 80058a4:	d006      	beq.n	80058b4 <std+0x48>
 80058a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80058aa:	4294      	cmp	r4, r2
 80058ac:	d002      	beq.n	80058b4 <std+0x48>
 80058ae:	33d0      	adds	r3, #208	; 0xd0
 80058b0:	429c      	cmp	r4, r3
 80058b2:	d105      	bne.n	80058c0 <std+0x54>
 80058b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058bc:	f000 b9bc 	b.w	8005c38 <__retarget_lock_init_recursive>
 80058c0:	bd10      	pop	{r4, pc}
 80058c2:	bf00      	nop
 80058c4:	08005a15 	.word	0x08005a15
 80058c8:	08005a37 	.word	0x08005a37
 80058cc:	08005a6f 	.word	0x08005a6f
 80058d0:	08005a93 	.word	0x08005a93
 80058d4:	20001b14 	.word	0x20001b14

080058d8 <stdio_exit_handler>:
 80058d8:	4a02      	ldr	r2, [pc, #8]	; (80058e4 <stdio_exit_handler+0xc>)
 80058da:	4903      	ldr	r1, [pc, #12]	; (80058e8 <stdio_exit_handler+0x10>)
 80058dc:	4803      	ldr	r0, [pc, #12]	; (80058ec <stdio_exit_handler+0x14>)
 80058de:	f000 b869 	b.w	80059b4 <_fwalk_sglue>
 80058e2:	bf00      	nop
 80058e4:	20000010 	.word	0x20000010
 80058e8:	080064f5 	.word	0x080064f5
 80058ec:	2000001c 	.word	0x2000001c

080058f0 <cleanup_stdio>:
 80058f0:	6841      	ldr	r1, [r0, #4]
 80058f2:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <cleanup_stdio+0x34>)
 80058f4:	b510      	push	{r4, lr}
 80058f6:	4299      	cmp	r1, r3
 80058f8:	4604      	mov	r4, r0
 80058fa:	d001      	beq.n	8005900 <cleanup_stdio+0x10>
 80058fc:	f000 fdfa 	bl	80064f4 <_fflush_r>
 8005900:	68a1      	ldr	r1, [r4, #8]
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <cleanup_stdio+0x38>)
 8005904:	4299      	cmp	r1, r3
 8005906:	d002      	beq.n	800590e <cleanup_stdio+0x1e>
 8005908:	4620      	mov	r0, r4
 800590a:	f000 fdf3 	bl	80064f4 <_fflush_r>
 800590e:	68e1      	ldr	r1, [r4, #12]
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <cleanup_stdio+0x3c>)
 8005912:	4299      	cmp	r1, r3
 8005914:	d004      	beq.n	8005920 <cleanup_stdio+0x30>
 8005916:	4620      	mov	r0, r4
 8005918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591c:	f000 bdea 	b.w	80064f4 <_fflush_r>
 8005920:	bd10      	pop	{r4, pc}
 8005922:	bf00      	nop
 8005924:	20001b14 	.word	0x20001b14
 8005928:	20001b7c 	.word	0x20001b7c
 800592c:	20001be4 	.word	0x20001be4

08005930 <global_stdio_init.part.0>:
 8005930:	b510      	push	{r4, lr}
 8005932:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <global_stdio_init.part.0+0x30>)
 8005934:	4c0b      	ldr	r4, [pc, #44]	; (8005964 <global_stdio_init.part.0+0x34>)
 8005936:	4a0c      	ldr	r2, [pc, #48]	; (8005968 <global_stdio_init.part.0+0x38>)
 8005938:	4620      	mov	r0, r4
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	2104      	movs	r1, #4
 800593e:	2200      	movs	r2, #0
 8005940:	f7ff ff94 	bl	800586c <std>
 8005944:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005948:	2201      	movs	r2, #1
 800594a:	2109      	movs	r1, #9
 800594c:	f7ff ff8e 	bl	800586c <std>
 8005950:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005954:	2202      	movs	r2, #2
 8005956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800595a:	2112      	movs	r1, #18
 800595c:	f7ff bf86 	b.w	800586c <std>
 8005960:	20001c4c 	.word	0x20001c4c
 8005964:	20001b14 	.word	0x20001b14
 8005968:	080058d9 	.word	0x080058d9

0800596c <__sfp_lock_acquire>:
 800596c:	4801      	ldr	r0, [pc, #4]	; (8005974 <__sfp_lock_acquire+0x8>)
 800596e:	f000 b964 	b.w	8005c3a <__retarget_lock_acquire_recursive>
 8005972:	bf00      	nop
 8005974:	20001c55 	.word	0x20001c55

08005978 <__sfp_lock_release>:
 8005978:	4801      	ldr	r0, [pc, #4]	; (8005980 <__sfp_lock_release+0x8>)
 800597a:	f000 b95f 	b.w	8005c3c <__retarget_lock_release_recursive>
 800597e:	bf00      	nop
 8005980:	20001c55 	.word	0x20001c55

08005984 <__sinit>:
 8005984:	b510      	push	{r4, lr}
 8005986:	4604      	mov	r4, r0
 8005988:	f7ff fff0 	bl	800596c <__sfp_lock_acquire>
 800598c:	6a23      	ldr	r3, [r4, #32]
 800598e:	b11b      	cbz	r3, 8005998 <__sinit+0x14>
 8005990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005994:	f7ff bff0 	b.w	8005978 <__sfp_lock_release>
 8005998:	4b04      	ldr	r3, [pc, #16]	; (80059ac <__sinit+0x28>)
 800599a:	6223      	str	r3, [r4, #32]
 800599c:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <__sinit+0x2c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1f5      	bne.n	8005990 <__sinit+0xc>
 80059a4:	f7ff ffc4 	bl	8005930 <global_stdio_init.part.0>
 80059a8:	e7f2      	b.n	8005990 <__sinit+0xc>
 80059aa:	bf00      	nop
 80059ac:	080058f1 	.word	0x080058f1
 80059b0:	20001c4c 	.word	0x20001c4c

080059b4 <_fwalk_sglue>:
 80059b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059b8:	4607      	mov	r7, r0
 80059ba:	4688      	mov	r8, r1
 80059bc:	4614      	mov	r4, r2
 80059be:	2600      	movs	r6, #0
 80059c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059c4:	f1b9 0901 	subs.w	r9, r9, #1
 80059c8:	d505      	bpl.n	80059d6 <_fwalk_sglue+0x22>
 80059ca:	6824      	ldr	r4, [r4, #0]
 80059cc:	2c00      	cmp	r4, #0
 80059ce:	d1f7      	bne.n	80059c0 <_fwalk_sglue+0xc>
 80059d0:	4630      	mov	r0, r6
 80059d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059d6:	89ab      	ldrh	r3, [r5, #12]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d907      	bls.n	80059ec <_fwalk_sglue+0x38>
 80059dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059e0:	3301      	adds	r3, #1
 80059e2:	d003      	beq.n	80059ec <_fwalk_sglue+0x38>
 80059e4:	4629      	mov	r1, r5
 80059e6:	4638      	mov	r0, r7
 80059e8:	47c0      	blx	r8
 80059ea:	4306      	orrs	r6, r0
 80059ec:	3568      	adds	r5, #104	; 0x68
 80059ee:	e7e9      	b.n	80059c4 <_fwalk_sglue+0x10>

080059f0 <iprintf>:
 80059f0:	b40f      	push	{r0, r1, r2, r3}
 80059f2:	b507      	push	{r0, r1, r2, lr}
 80059f4:	4906      	ldr	r1, [pc, #24]	; (8005a10 <iprintf+0x20>)
 80059f6:	ab04      	add	r3, sp, #16
 80059f8:	6808      	ldr	r0, [r1, #0]
 80059fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80059fe:	6881      	ldr	r1, [r0, #8]
 8005a00:	9301      	str	r3, [sp, #4]
 8005a02:	f000 fa47 	bl	8005e94 <_vfiprintf_r>
 8005a06:	b003      	add	sp, #12
 8005a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a0c:	b004      	add	sp, #16
 8005a0e:	4770      	bx	lr
 8005a10:	20000068 	.word	0x20000068

08005a14 <__sread>:
 8005a14:	b510      	push	{r4, lr}
 8005a16:	460c      	mov	r4, r1
 8005a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1c:	f000 f8be 	bl	8005b9c <_read_r>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	bfab      	itete	ge
 8005a24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a26:	89a3      	ldrhlt	r3, [r4, #12]
 8005a28:	181b      	addge	r3, r3, r0
 8005a2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a2e:	bfac      	ite	ge
 8005a30:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a32:	81a3      	strhlt	r3, [r4, #12]
 8005a34:	bd10      	pop	{r4, pc}

08005a36 <__swrite>:
 8005a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3a:	461f      	mov	r7, r3
 8005a3c:	898b      	ldrh	r3, [r1, #12]
 8005a3e:	4605      	mov	r5, r0
 8005a40:	05db      	lsls	r3, r3, #23
 8005a42:	460c      	mov	r4, r1
 8005a44:	4616      	mov	r6, r2
 8005a46:	d505      	bpl.n	8005a54 <__swrite+0x1e>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a50:	f000 f892 	bl	8005b78 <_lseek_r>
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	4632      	mov	r2, r6
 8005a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a5c:	81a3      	strh	r3, [r4, #12]
 8005a5e:	4628      	mov	r0, r5
 8005a60:	463b      	mov	r3, r7
 8005a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6a:	f000 b8a9 	b.w	8005bc0 <_write_r>

08005a6e <__sseek>:
 8005a6e:	b510      	push	{r4, lr}
 8005a70:	460c      	mov	r4, r1
 8005a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a76:	f000 f87f 	bl	8005b78 <_lseek_r>
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	bf15      	itete	ne
 8005a80:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a8a:	81a3      	strheq	r3, [r4, #12]
 8005a8c:	bf18      	it	ne
 8005a8e:	81a3      	strhne	r3, [r4, #12]
 8005a90:	bd10      	pop	{r4, pc}

08005a92 <__sclose>:
 8005a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a96:	f000 b809 	b.w	8005aac <_close_r>

08005a9a <memset>:
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	4402      	add	r2, r0
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d100      	bne.n	8005aa4 <memset+0xa>
 8005aa2:	4770      	bx	lr
 8005aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa8:	e7f9      	b.n	8005a9e <memset+0x4>
	...

08005aac <_close_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	2300      	movs	r3, #0
 8005ab0:	4d05      	ldr	r5, [pc, #20]	; (8005ac8 <_close_r+0x1c>)
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	602b      	str	r3, [r5, #0]
 8005ab8:	f7fa fddf 	bl	800067a <_close>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	d102      	bne.n	8005ac6 <_close_r+0x1a>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	b103      	cbz	r3, 8005ac6 <_close_r+0x1a>
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	bd38      	pop	{r3, r4, r5, pc}
 8005ac8:	20001c50 	.word	0x20001c50

08005acc <_reclaim_reent>:
 8005acc:	4b29      	ldr	r3, [pc, #164]	; (8005b74 <_reclaim_reent+0xa8>)
 8005ace:	b570      	push	{r4, r5, r6, lr}
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4283      	cmp	r3, r0
 8005ad6:	d04b      	beq.n	8005b70 <_reclaim_reent+0xa4>
 8005ad8:	69c3      	ldr	r3, [r0, #28]
 8005ada:	b143      	cbz	r3, 8005aee <_reclaim_reent+0x22>
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d144      	bne.n	8005b6c <_reclaim_reent+0xa0>
 8005ae2:	69e3      	ldr	r3, [r4, #28]
 8005ae4:	6819      	ldr	r1, [r3, #0]
 8005ae6:	b111      	cbz	r1, 8005aee <_reclaim_reent+0x22>
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 f8b7 	bl	8005c5c <_free_r>
 8005aee:	6961      	ldr	r1, [r4, #20]
 8005af0:	b111      	cbz	r1, 8005af8 <_reclaim_reent+0x2c>
 8005af2:	4620      	mov	r0, r4
 8005af4:	f000 f8b2 	bl	8005c5c <_free_r>
 8005af8:	69e1      	ldr	r1, [r4, #28]
 8005afa:	b111      	cbz	r1, 8005b02 <_reclaim_reent+0x36>
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 f8ad 	bl	8005c5c <_free_r>
 8005b02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b04:	b111      	cbz	r1, 8005b0c <_reclaim_reent+0x40>
 8005b06:	4620      	mov	r0, r4
 8005b08:	f000 f8a8 	bl	8005c5c <_free_r>
 8005b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b0e:	b111      	cbz	r1, 8005b16 <_reclaim_reent+0x4a>
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 f8a3 	bl	8005c5c <_free_r>
 8005b16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b18:	b111      	cbz	r1, 8005b20 <_reclaim_reent+0x54>
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 f89e 	bl	8005c5c <_free_r>
 8005b20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005b22:	b111      	cbz	r1, 8005b2a <_reclaim_reent+0x5e>
 8005b24:	4620      	mov	r0, r4
 8005b26:	f000 f899 	bl	8005c5c <_free_r>
 8005b2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005b2c:	b111      	cbz	r1, 8005b34 <_reclaim_reent+0x68>
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f000 f894 	bl	8005c5c <_free_r>
 8005b34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005b36:	b111      	cbz	r1, 8005b3e <_reclaim_reent+0x72>
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f000 f88f 	bl	8005c5c <_free_r>
 8005b3e:	6a23      	ldr	r3, [r4, #32]
 8005b40:	b1b3      	cbz	r3, 8005b70 <_reclaim_reent+0xa4>
 8005b42:	4620      	mov	r0, r4
 8005b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b48:	4718      	bx	r3
 8005b4a:	5949      	ldr	r1, [r1, r5]
 8005b4c:	b941      	cbnz	r1, 8005b60 <_reclaim_reent+0x94>
 8005b4e:	3504      	adds	r5, #4
 8005b50:	69e3      	ldr	r3, [r4, #28]
 8005b52:	2d80      	cmp	r5, #128	; 0x80
 8005b54:	68d9      	ldr	r1, [r3, #12]
 8005b56:	d1f8      	bne.n	8005b4a <_reclaim_reent+0x7e>
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f000 f87f 	bl	8005c5c <_free_r>
 8005b5e:	e7c0      	b.n	8005ae2 <_reclaim_reent+0x16>
 8005b60:	680e      	ldr	r6, [r1, #0]
 8005b62:	4620      	mov	r0, r4
 8005b64:	f000 f87a 	bl	8005c5c <_free_r>
 8005b68:	4631      	mov	r1, r6
 8005b6a:	e7ef      	b.n	8005b4c <_reclaim_reent+0x80>
 8005b6c:	2500      	movs	r5, #0
 8005b6e:	e7ef      	b.n	8005b50 <_reclaim_reent+0x84>
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	bf00      	nop
 8005b74:	20000068 	.word	0x20000068

08005b78 <_lseek_r>:
 8005b78:	b538      	push	{r3, r4, r5, lr}
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	2200      	movs	r2, #0
 8005b82:	4d05      	ldr	r5, [pc, #20]	; (8005b98 <_lseek_r+0x20>)
 8005b84:	602a      	str	r2, [r5, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f7fa fd9b 	bl	80006c2 <_lseek>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_lseek_r+0x1e>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_lseek_r+0x1e>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	20001c50 	.word	0x20001c50

08005b9c <_read_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	4d05      	ldr	r5, [pc, #20]	; (8005bbc <_read_r+0x20>)
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f7fa fd2c 	bl	8000608 <_read>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_read_r+0x1e>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_read_r+0x1e>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	20001c50 	.word	0x20001c50

08005bc0 <_write_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	2200      	movs	r2, #0
 8005bca:	4d05      	ldr	r5, [pc, #20]	; (8005be0 <_write_r+0x20>)
 8005bcc:	602a      	str	r2, [r5, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f7fa fd37 	bl	8000642 <_write>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	d102      	bne.n	8005bde <_write_r+0x1e>
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	b103      	cbz	r3, 8005bde <_write_r+0x1e>
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
 8005be0:	20001c50 	.word	0x20001c50

08005be4 <__errno>:
 8005be4:	4b01      	ldr	r3, [pc, #4]	; (8005bec <__errno+0x8>)
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	20000068 	.word	0x20000068

08005bf0 <__libc_init_array>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	2600      	movs	r6, #0
 8005bf4:	4d0c      	ldr	r5, [pc, #48]	; (8005c28 <__libc_init_array+0x38>)
 8005bf6:	4c0d      	ldr	r4, [pc, #52]	; (8005c2c <__libc_init_array+0x3c>)
 8005bf8:	1b64      	subs	r4, r4, r5
 8005bfa:	10a4      	asrs	r4, r4, #2
 8005bfc:	42a6      	cmp	r6, r4
 8005bfe:	d109      	bne.n	8005c14 <__libc_init_array+0x24>
 8005c00:	f000 fdd8 	bl	80067b4 <_init>
 8005c04:	2600      	movs	r6, #0
 8005c06:	4d0a      	ldr	r5, [pc, #40]	; (8005c30 <__libc_init_array+0x40>)
 8005c08:	4c0a      	ldr	r4, [pc, #40]	; (8005c34 <__libc_init_array+0x44>)
 8005c0a:	1b64      	subs	r4, r4, r5
 8005c0c:	10a4      	asrs	r4, r4, #2
 8005c0e:	42a6      	cmp	r6, r4
 8005c10:	d105      	bne.n	8005c1e <__libc_init_array+0x2e>
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
 8005c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c18:	4798      	blx	r3
 8005c1a:	3601      	adds	r6, #1
 8005c1c:	e7ee      	b.n	8005bfc <__libc_init_array+0xc>
 8005c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c22:	4798      	blx	r3
 8005c24:	3601      	adds	r6, #1
 8005c26:	e7f2      	b.n	8005c0e <__libc_init_array+0x1e>
 8005c28:	08006908 	.word	0x08006908
 8005c2c:	08006908 	.word	0x08006908
 8005c30:	08006908 	.word	0x08006908
 8005c34:	0800690c 	.word	0x0800690c

08005c38 <__retarget_lock_init_recursive>:
 8005c38:	4770      	bx	lr

08005c3a <__retarget_lock_acquire_recursive>:
 8005c3a:	4770      	bx	lr

08005c3c <__retarget_lock_release_recursive>:
 8005c3c:	4770      	bx	lr

08005c3e <memcpy>:
 8005c3e:	440a      	add	r2, r1
 8005c40:	4291      	cmp	r1, r2
 8005c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c46:	d100      	bne.n	8005c4a <memcpy+0xc>
 8005c48:	4770      	bx	lr
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c50:	4291      	cmp	r1, r2
 8005c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c56:	d1f9      	bne.n	8005c4c <memcpy+0xe>
 8005c58:	bd10      	pop	{r4, pc}
	...

08005c5c <_free_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	4605      	mov	r5, r0
 8005c60:	2900      	cmp	r1, #0
 8005c62:	d040      	beq.n	8005ce6 <_free_r+0x8a>
 8005c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c68:	1f0c      	subs	r4, r1, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bfb8      	it	lt
 8005c6e:	18e4      	addlt	r4, r4, r3
 8005c70:	f000 f8dc 	bl	8005e2c <__malloc_lock>
 8005c74:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <_free_r+0x8c>)
 8005c76:	6813      	ldr	r3, [r2, #0]
 8005c78:	b933      	cbnz	r3, 8005c88 <_free_r+0x2c>
 8005c7a:	6063      	str	r3, [r4, #4]
 8005c7c:	6014      	str	r4, [r2, #0]
 8005c7e:	4628      	mov	r0, r5
 8005c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c84:	f000 b8d8 	b.w	8005e38 <__malloc_unlock>
 8005c88:	42a3      	cmp	r3, r4
 8005c8a:	d908      	bls.n	8005c9e <_free_r+0x42>
 8005c8c:	6820      	ldr	r0, [r4, #0]
 8005c8e:	1821      	adds	r1, r4, r0
 8005c90:	428b      	cmp	r3, r1
 8005c92:	bf01      	itttt	eq
 8005c94:	6819      	ldreq	r1, [r3, #0]
 8005c96:	685b      	ldreq	r3, [r3, #4]
 8005c98:	1809      	addeq	r1, r1, r0
 8005c9a:	6021      	streq	r1, [r4, #0]
 8005c9c:	e7ed      	b.n	8005c7a <_free_r+0x1e>
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	b10b      	cbz	r3, 8005ca8 <_free_r+0x4c>
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	d9fa      	bls.n	8005c9e <_free_r+0x42>
 8005ca8:	6811      	ldr	r1, [r2, #0]
 8005caa:	1850      	adds	r0, r2, r1
 8005cac:	42a0      	cmp	r0, r4
 8005cae:	d10b      	bne.n	8005cc8 <_free_r+0x6c>
 8005cb0:	6820      	ldr	r0, [r4, #0]
 8005cb2:	4401      	add	r1, r0
 8005cb4:	1850      	adds	r0, r2, r1
 8005cb6:	4283      	cmp	r3, r0
 8005cb8:	6011      	str	r1, [r2, #0]
 8005cba:	d1e0      	bne.n	8005c7e <_free_r+0x22>
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	4408      	add	r0, r1
 8005cc2:	6010      	str	r0, [r2, #0]
 8005cc4:	6053      	str	r3, [r2, #4]
 8005cc6:	e7da      	b.n	8005c7e <_free_r+0x22>
 8005cc8:	d902      	bls.n	8005cd0 <_free_r+0x74>
 8005cca:	230c      	movs	r3, #12
 8005ccc:	602b      	str	r3, [r5, #0]
 8005cce:	e7d6      	b.n	8005c7e <_free_r+0x22>
 8005cd0:	6820      	ldr	r0, [r4, #0]
 8005cd2:	1821      	adds	r1, r4, r0
 8005cd4:	428b      	cmp	r3, r1
 8005cd6:	bf01      	itttt	eq
 8005cd8:	6819      	ldreq	r1, [r3, #0]
 8005cda:	685b      	ldreq	r3, [r3, #4]
 8005cdc:	1809      	addeq	r1, r1, r0
 8005cde:	6021      	streq	r1, [r4, #0]
 8005ce0:	6063      	str	r3, [r4, #4]
 8005ce2:	6054      	str	r4, [r2, #4]
 8005ce4:	e7cb      	b.n	8005c7e <_free_r+0x22>
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	20001c58 	.word	0x20001c58

08005cec <sbrk_aligned>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	4e0e      	ldr	r6, [pc, #56]	; (8005d28 <sbrk_aligned+0x3c>)
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	6831      	ldr	r1, [r6, #0]
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	b911      	cbnz	r1, 8005cfe <sbrk_aligned+0x12>
 8005cf8:	f000 fcba 	bl	8006670 <_sbrk_r>
 8005cfc:	6030      	str	r0, [r6, #0]
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4628      	mov	r0, r5
 8005d02:	f000 fcb5 	bl	8006670 <_sbrk_r>
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	d00a      	beq.n	8005d20 <sbrk_aligned+0x34>
 8005d0a:	1cc4      	adds	r4, r0, #3
 8005d0c:	f024 0403 	bic.w	r4, r4, #3
 8005d10:	42a0      	cmp	r0, r4
 8005d12:	d007      	beq.n	8005d24 <sbrk_aligned+0x38>
 8005d14:	1a21      	subs	r1, r4, r0
 8005d16:	4628      	mov	r0, r5
 8005d18:	f000 fcaa 	bl	8006670 <_sbrk_r>
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d101      	bne.n	8005d24 <sbrk_aligned+0x38>
 8005d20:	f04f 34ff 	mov.w	r4, #4294967295
 8005d24:	4620      	mov	r0, r4
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
 8005d28:	20001c5c 	.word	0x20001c5c

08005d2c <_malloc_r>:
 8005d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d30:	1ccd      	adds	r5, r1, #3
 8005d32:	f025 0503 	bic.w	r5, r5, #3
 8005d36:	3508      	adds	r5, #8
 8005d38:	2d0c      	cmp	r5, #12
 8005d3a:	bf38      	it	cc
 8005d3c:	250c      	movcc	r5, #12
 8005d3e:	2d00      	cmp	r5, #0
 8005d40:	4607      	mov	r7, r0
 8005d42:	db01      	blt.n	8005d48 <_malloc_r+0x1c>
 8005d44:	42a9      	cmp	r1, r5
 8005d46:	d905      	bls.n	8005d54 <_malloc_r+0x28>
 8005d48:	230c      	movs	r3, #12
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	603b      	str	r3, [r7, #0]
 8005d4e:	4630      	mov	r0, r6
 8005d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e28 <_malloc_r+0xfc>
 8005d58:	f000 f868 	bl	8005e2c <__malloc_lock>
 8005d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d60:	461c      	mov	r4, r3
 8005d62:	bb5c      	cbnz	r4, 8005dbc <_malloc_r+0x90>
 8005d64:	4629      	mov	r1, r5
 8005d66:	4638      	mov	r0, r7
 8005d68:	f7ff ffc0 	bl	8005cec <sbrk_aligned>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	4604      	mov	r4, r0
 8005d70:	d155      	bne.n	8005e1e <_malloc_r+0xf2>
 8005d72:	f8d8 4000 	ldr.w	r4, [r8]
 8005d76:	4626      	mov	r6, r4
 8005d78:	2e00      	cmp	r6, #0
 8005d7a:	d145      	bne.n	8005e08 <_malloc_r+0xdc>
 8005d7c:	2c00      	cmp	r4, #0
 8005d7e:	d048      	beq.n	8005e12 <_malloc_r+0xe6>
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	4631      	mov	r1, r6
 8005d84:	4638      	mov	r0, r7
 8005d86:	eb04 0903 	add.w	r9, r4, r3
 8005d8a:	f000 fc71 	bl	8006670 <_sbrk_r>
 8005d8e:	4581      	cmp	r9, r0
 8005d90:	d13f      	bne.n	8005e12 <_malloc_r+0xe6>
 8005d92:	6821      	ldr	r1, [r4, #0]
 8005d94:	4638      	mov	r0, r7
 8005d96:	1a6d      	subs	r5, r5, r1
 8005d98:	4629      	mov	r1, r5
 8005d9a:	f7ff ffa7 	bl	8005cec <sbrk_aligned>
 8005d9e:	3001      	adds	r0, #1
 8005da0:	d037      	beq.n	8005e12 <_malloc_r+0xe6>
 8005da2:	6823      	ldr	r3, [r4, #0]
 8005da4:	442b      	add	r3, r5
 8005da6:	6023      	str	r3, [r4, #0]
 8005da8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d038      	beq.n	8005e22 <_malloc_r+0xf6>
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	42a2      	cmp	r2, r4
 8005db4:	d12b      	bne.n	8005e0e <_malloc_r+0xe2>
 8005db6:	2200      	movs	r2, #0
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	e00f      	b.n	8005ddc <_malloc_r+0xb0>
 8005dbc:	6822      	ldr	r2, [r4, #0]
 8005dbe:	1b52      	subs	r2, r2, r5
 8005dc0:	d41f      	bmi.n	8005e02 <_malloc_r+0xd6>
 8005dc2:	2a0b      	cmp	r2, #11
 8005dc4:	d917      	bls.n	8005df6 <_malloc_r+0xca>
 8005dc6:	1961      	adds	r1, r4, r5
 8005dc8:	42a3      	cmp	r3, r4
 8005dca:	6025      	str	r5, [r4, #0]
 8005dcc:	bf18      	it	ne
 8005dce:	6059      	strne	r1, [r3, #4]
 8005dd0:	6863      	ldr	r3, [r4, #4]
 8005dd2:	bf08      	it	eq
 8005dd4:	f8c8 1000 	streq.w	r1, [r8]
 8005dd8:	5162      	str	r2, [r4, r5]
 8005dda:	604b      	str	r3, [r1, #4]
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f104 060b 	add.w	r6, r4, #11
 8005de2:	f000 f829 	bl	8005e38 <__malloc_unlock>
 8005de6:	f026 0607 	bic.w	r6, r6, #7
 8005dea:	1d23      	adds	r3, r4, #4
 8005dec:	1af2      	subs	r2, r6, r3
 8005dee:	d0ae      	beq.n	8005d4e <_malloc_r+0x22>
 8005df0:	1b9b      	subs	r3, r3, r6
 8005df2:	50a3      	str	r3, [r4, r2]
 8005df4:	e7ab      	b.n	8005d4e <_malloc_r+0x22>
 8005df6:	42a3      	cmp	r3, r4
 8005df8:	6862      	ldr	r2, [r4, #4]
 8005dfa:	d1dd      	bne.n	8005db8 <_malloc_r+0x8c>
 8005dfc:	f8c8 2000 	str.w	r2, [r8]
 8005e00:	e7ec      	b.n	8005ddc <_malloc_r+0xb0>
 8005e02:	4623      	mov	r3, r4
 8005e04:	6864      	ldr	r4, [r4, #4]
 8005e06:	e7ac      	b.n	8005d62 <_malloc_r+0x36>
 8005e08:	4634      	mov	r4, r6
 8005e0a:	6876      	ldr	r6, [r6, #4]
 8005e0c:	e7b4      	b.n	8005d78 <_malloc_r+0x4c>
 8005e0e:	4613      	mov	r3, r2
 8005e10:	e7cc      	b.n	8005dac <_malloc_r+0x80>
 8005e12:	230c      	movs	r3, #12
 8005e14:	4638      	mov	r0, r7
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	f000 f80e 	bl	8005e38 <__malloc_unlock>
 8005e1c:	e797      	b.n	8005d4e <_malloc_r+0x22>
 8005e1e:	6025      	str	r5, [r4, #0]
 8005e20:	e7dc      	b.n	8005ddc <_malloc_r+0xb0>
 8005e22:	605b      	str	r3, [r3, #4]
 8005e24:	deff      	udf	#255	; 0xff
 8005e26:	bf00      	nop
 8005e28:	20001c58 	.word	0x20001c58

08005e2c <__malloc_lock>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	; (8005e34 <__malloc_lock+0x8>)
 8005e2e:	f7ff bf04 	b.w	8005c3a <__retarget_lock_acquire_recursive>
 8005e32:	bf00      	nop
 8005e34:	20001c54 	.word	0x20001c54

08005e38 <__malloc_unlock>:
 8005e38:	4801      	ldr	r0, [pc, #4]	; (8005e40 <__malloc_unlock+0x8>)
 8005e3a:	f7ff beff 	b.w	8005c3c <__retarget_lock_release_recursive>
 8005e3e:	bf00      	nop
 8005e40:	20001c54 	.word	0x20001c54

08005e44 <__sfputc_r>:
 8005e44:	6893      	ldr	r3, [r2, #8]
 8005e46:	b410      	push	{r4}
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	6093      	str	r3, [r2, #8]
 8005e4e:	da07      	bge.n	8005e60 <__sfputc_r+0x1c>
 8005e50:	6994      	ldr	r4, [r2, #24]
 8005e52:	42a3      	cmp	r3, r4
 8005e54:	db01      	blt.n	8005e5a <__sfputc_r+0x16>
 8005e56:	290a      	cmp	r1, #10
 8005e58:	d102      	bne.n	8005e60 <__sfputc_r+0x1c>
 8005e5a:	bc10      	pop	{r4}
 8005e5c:	f000 bb72 	b.w	8006544 <__swbuf_r>
 8005e60:	6813      	ldr	r3, [r2, #0]
 8005e62:	1c58      	adds	r0, r3, #1
 8005e64:	6010      	str	r0, [r2, #0]
 8005e66:	7019      	strb	r1, [r3, #0]
 8005e68:	4608      	mov	r0, r1
 8005e6a:	bc10      	pop	{r4}
 8005e6c:	4770      	bx	lr

08005e6e <__sfputs_r>:
 8005e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e70:	4606      	mov	r6, r0
 8005e72:	460f      	mov	r7, r1
 8005e74:	4614      	mov	r4, r2
 8005e76:	18d5      	adds	r5, r2, r3
 8005e78:	42ac      	cmp	r4, r5
 8005e7a:	d101      	bne.n	8005e80 <__sfputs_r+0x12>
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	e007      	b.n	8005e90 <__sfputs_r+0x22>
 8005e80:	463a      	mov	r2, r7
 8005e82:	4630      	mov	r0, r6
 8005e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e88:	f7ff ffdc 	bl	8005e44 <__sfputc_r>
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d1f3      	bne.n	8005e78 <__sfputs_r+0xa>
 8005e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e94 <_vfiprintf_r>:
 8005e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e98:	460d      	mov	r5, r1
 8005e9a:	4614      	mov	r4, r2
 8005e9c:	4698      	mov	r8, r3
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	b09d      	sub	sp, #116	; 0x74
 8005ea2:	b118      	cbz	r0, 8005eac <_vfiprintf_r+0x18>
 8005ea4:	6a03      	ldr	r3, [r0, #32]
 8005ea6:	b90b      	cbnz	r3, 8005eac <_vfiprintf_r+0x18>
 8005ea8:	f7ff fd6c 	bl	8005984 <__sinit>
 8005eac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eae:	07d9      	lsls	r1, r3, #31
 8005eb0:	d405      	bmi.n	8005ebe <_vfiprintf_r+0x2a>
 8005eb2:	89ab      	ldrh	r3, [r5, #12]
 8005eb4:	059a      	lsls	r2, r3, #22
 8005eb6:	d402      	bmi.n	8005ebe <_vfiprintf_r+0x2a>
 8005eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eba:	f7ff febe 	bl	8005c3a <__retarget_lock_acquire_recursive>
 8005ebe:	89ab      	ldrh	r3, [r5, #12]
 8005ec0:	071b      	lsls	r3, r3, #28
 8005ec2:	d501      	bpl.n	8005ec8 <_vfiprintf_r+0x34>
 8005ec4:	692b      	ldr	r3, [r5, #16]
 8005ec6:	b99b      	cbnz	r3, 8005ef0 <_vfiprintf_r+0x5c>
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f000 fb78 	bl	80065c0 <__swsetup_r>
 8005ed0:	b170      	cbz	r0, 8005ef0 <_vfiprintf_r+0x5c>
 8005ed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ed4:	07dc      	lsls	r4, r3, #31
 8005ed6:	d504      	bpl.n	8005ee2 <_vfiprintf_r+0x4e>
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8005edc:	b01d      	add	sp, #116	; 0x74
 8005ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee2:	89ab      	ldrh	r3, [r5, #12]
 8005ee4:	0598      	lsls	r0, r3, #22
 8005ee6:	d4f7      	bmi.n	8005ed8 <_vfiprintf_r+0x44>
 8005ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eea:	f7ff fea7 	bl	8005c3c <__retarget_lock_release_recursive>
 8005eee:	e7f3      	b.n	8005ed8 <_vfiprintf_r+0x44>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef4:	2320      	movs	r3, #32
 8005ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005efa:	2330      	movs	r3, #48	; 0x30
 8005efc:	f04f 0901 	mov.w	r9, #1
 8005f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f04:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80060b4 <_vfiprintf_r+0x220>
 8005f08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f0c:	4623      	mov	r3, r4
 8005f0e:	469a      	mov	sl, r3
 8005f10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f14:	b10a      	cbz	r2, 8005f1a <_vfiprintf_r+0x86>
 8005f16:	2a25      	cmp	r2, #37	; 0x25
 8005f18:	d1f9      	bne.n	8005f0e <_vfiprintf_r+0x7a>
 8005f1a:	ebba 0b04 	subs.w	fp, sl, r4
 8005f1e:	d00b      	beq.n	8005f38 <_vfiprintf_r+0xa4>
 8005f20:	465b      	mov	r3, fp
 8005f22:	4622      	mov	r2, r4
 8005f24:	4629      	mov	r1, r5
 8005f26:	4630      	mov	r0, r6
 8005f28:	f7ff ffa1 	bl	8005e6e <__sfputs_r>
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f000 80a9 	beq.w	8006084 <_vfiprintf_r+0x1f0>
 8005f32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f34:	445a      	add	r2, fp
 8005f36:	9209      	str	r2, [sp, #36]	; 0x24
 8005f38:	f89a 3000 	ldrb.w	r3, [sl]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 80a1 	beq.w	8006084 <_vfiprintf_r+0x1f0>
 8005f42:	2300      	movs	r3, #0
 8005f44:	f04f 32ff 	mov.w	r2, #4294967295
 8005f48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f4c:	f10a 0a01 	add.w	sl, sl, #1
 8005f50:	9304      	str	r3, [sp, #16]
 8005f52:	9307      	str	r3, [sp, #28]
 8005f54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f58:	931a      	str	r3, [sp, #104]	; 0x68
 8005f5a:	4654      	mov	r4, sl
 8005f5c:	2205      	movs	r2, #5
 8005f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f62:	4854      	ldr	r0, [pc, #336]	; (80060b4 <_vfiprintf_r+0x220>)
 8005f64:	f000 fb94 	bl	8006690 <memchr>
 8005f68:	9a04      	ldr	r2, [sp, #16]
 8005f6a:	b9d8      	cbnz	r0, 8005fa4 <_vfiprintf_r+0x110>
 8005f6c:	06d1      	lsls	r1, r2, #27
 8005f6e:	bf44      	itt	mi
 8005f70:	2320      	movmi	r3, #32
 8005f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f76:	0713      	lsls	r3, r2, #28
 8005f78:	bf44      	itt	mi
 8005f7a:	232b      	movmi	r3, #43	; 0x2b
 8005f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f80:	f89a 3000 	ldrb.w	r3, [sl]
 8005f84:	2b2a      	cmp	r3, #42	; 0x2a
 8005f86:	d015      	beq.n	8005fb4 <_vfiprintf_r+0x120>
 8005f88:	4654      	mov	r4, sl
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	f04f 0c0a 	mov.w	ip, #10
 8005f90:	9a07      	ldr	r2, [sp, #28]
 8005f92:	4621      	mov	r1, r4
 8005f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f98:	3b30      	subs	r3, #48	; 0x30
 8005f9a:	2b09      	cmp	r3, #9
 8005f9c:	d94d      	bls.n	800603a <_vfiprintf_r+0x1a6>
 8005f9e:	b1b0      	cbz	r0, 8005fce <_vfiprintf_r+0x13a>
 8005fa0:	9207      	str	r2, [sp, #28]
 8005fa2:	e014      	b.n	8005fce <_vfiprintf_r+0x13a>
 8005fa4:	eba0 0308 	sub.w	r3, r0, r8
 8005fa8:	fa09 f303 	lsl.w	r3, r9, r3
 8005fac:	4313      	orrs	r3, r2
 8005fae:	46a2      	mov	sl, r4
 8005fb0:	9304      	str	r3, [sp, #16]
 8005fb2:	e7d2      	b.n	8005f5a <_vfiprintf_r+0xc6>
 8005fb4:	9b03      	ldr	r3, [sp, #12]
 8005fb6:	1d19      	adds	r1, r3, #4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	9103      	str	r1, [sp, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	bfbb      	ittet	lt
 8005fc0:	425b      	neglt	r3, r3
 8005fc2:	f042 0202 	orrlt.w	r2, r2, #2
 8005fc6:	9307      	strge	r3, [sp, #28]
 8005fc8:	9307      	strlt	r3, [sp, #28]
 8005fca:	bfb8      	it	lt
 8005fcc:	9204      	strlt	r2, [sp, #16]
 8005fce:	7823      	ldrb	r3, [r4, #0]
 8005fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8005fd2:	d10c      	bne.n	8005fee <_vfiprintf_r+0x15a>
 8005fd4:	7863      	ldrb	r3, [r4, #1]
 8005fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd8:	d134      	bne.n	8006044 <_vfiprintf_r+0x1b0>
 8005fda:	9b03      	ldr	r3, [sp, #12]
 8005fdc:	3402      	adds	r4, #2
 8005fde:	1d1a      	adds	r2, r3, #4
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	9203      	str	r2, [sp, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	bfb8      	it	lt
 8005fe8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fec:	9305      	str	r3, [sp, #20]
 8005fee:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060b8 <_vfiprintf_r+0x224>
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	4650      	mov	r0, sl
 8005ff6:	7821      	ldrb	r1, [r4, #0]
 8005ff8:	f000 fb4a 	bl	8006690 <memchr>
 8005ffc:	b138      	cbz	r0, 800600e <_vfiprintf_r+0x17a>
 8005ffe:	2240      	movs	r2, #64	; 0x40
 8006000:	9b04      	ldr	r3, [sp, #16]
 8006002:	eba0 000a 	sub.w	r0, r0, sl
 8006006:	4082      	lsls	r2, r0
 8006008:	4313      	orrs	r3, r2
 800600a:	3401      	adds	r4, #1
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006012:	2206      	movs	r2, #6
 8006014:	4829      	ldr	r0, [pc, #164]	; (80060bc <_vfiprintf_r+0x228>)
 8006016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800601a:	f000 fb39 	bl	8006690 <memchr>
 800601e:	2800      	cmp	r0, #0
 8006020:	d03f      	beq.n	80060a2 <_vfiprintf_r+0x20e>
 8006022:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <_vfiprintf_r+0x22c>)
 8006024:	bb1b      	cbnz	r3, 800606e <_vfiprintf_r+0x1da>
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	3307      	adds	r3, #7
 800602a:	f023 0307 	bic.w	r3, r3, #7
 800602e:	3308      	adds	r3, #8
 8006030:	9303      	str	r3, [sp, #12]
 8006032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006034:	443b      	add	r3, r7
 8006036:	9309      	str	r3, [sp, #36]	; 0x24
 8006038:	e768      	b.n	8005f0c <_vfiprintf_r+0x78>
 800603a:	460c      	mov	r4, r1
 800603c:	2001      	movs	r0, #1
 800603e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006042:	e7a6      	b.n	8005f92 <_vfiprintf_r+0xfe>
 8006044:	2300      	movs	r3, #0
 8006046:	f04f 0c0a 	mov.w	ip, #10
 800604a:	4619      	mov	r1, r3
 800604c:	3401      	adds	r4, #1
 800604e:	9305      	str	r3, [sp, #20]
 8006050:	4620      	mov	r0, r4
 8006052:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006056:	3a30      	subs	r2, #48	; 0x30
 8006058:	2a09      	cmp	r2, #9
 800605a:	d903      	bls.n	8006064 <_vfiprintf_r+0x1d0>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0c6      	beq.n	8005fee <_vfiprintf_r+0x15a>
 8006060:	9105      	str	r1, [sp, #20]
 8006062:	e7c4      	b.n	8005fee <_vfiprintf_r+0x15a>
 8006064:	4604      	mov	r4, r0
 8006066:	2301      	movs	r3, #1
 8006068:	fb0c 2101 	mla	r1, ip, r1, r2
 800606c:	e7f0      	b.n	8006050 <_vfiprintf_r+0x1bc>
 800606e:	ab03      	add	r3, sp, #12
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	462a      	mov	r2, r5
 8006074:	4630      	mov	r0, r6
 8006076:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <_vfiprintf_r+0x230>)
 8006078:	a904      	add	r1, sp, #16
 800607a:	f3af 8000 	nop.w
 800607e:	4607      	mov	r7, r0
 8006080:	1c78      	adds	r0, r7, #1
 8006082:	d1d6      	bne.n	8006032 <_vfiprintf_r+0x19e>
 8006084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006086:	07d9      	lsls	r1, r3, #31
 8006088:	d405      	bmi.n	8006096 <_vfiprintf_r+0x202>
 800608a:	89ab      	ldrh	r3, [r5, #12]
 800608c:	059a      	lsls	r2, r3, #22
 800608e:	d402      	bmi.n	8006096 <_vfiprintf_r+0x202>
 8006090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006092:	f7ff fdd3 	bl	8005c3c <__retarget_lock_release_recursive>
 8006096:	89ab      	ldrh	r3, [r5, #12]
 8006098:	065b      	lsls	r3, r3, #25
 800609a:	f53f af1d 	bmi.w	8005ed8 <_vfiprintf_r+0x44>
 800609e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060a0:	e71c      	b.n	8005edc <_vfiprintf_r+0x48>
 80060a2:	ab03      	add	r3, sp, #12
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	462a      	mov	r2, r5
 80060a8:	4630      	mov	r0, r6
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <_vfiprintf_r+0x230>)
 80060ac:	a904      	add	r1, sp, #16
 80060ae:	f000 f87d 	bl	80061ac <_printf_i>
 80060b2:	e7e4      	b.n	800607e <_vfiprintf_r+0x1ea>
 80060b4:	080068d2 	.word	0x080068d2
 80060b8:	080068d8 	.word	0x080068d8
 80060bc:	080068dc 	.word	0x080068dc
 80060c0:	00000000 	.word	0x00000000
 80060c4:	08005e6f 	.word	0x08005e6f

080060c8 <_printf_common>:
 80060c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060cc:	4616      	mov	r6, r2
 80060ce:	4699      	mov	r9, r3
 80060d0:	688a      	ldr	r2, [r1, #8]
 80060d2:	690b      	ldr	r3, [r1, #16]
 80060d4:	4607      	mov	r7, r0
 80060d6:	4293      	cmp	r3, r2
 80060d8:	bfb8      	it	lt
 80060da:	4613      	movlt	r3, r2
 80060dc:	6033      	str	r3, [r6, #0]
 80060de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060e2:	460c      	mov	r4, r1
 80060e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060e8:	b10a      	cbz	r2, 80060ee <_printf_common+0x26>
 80060ea:	3301      	adds	r3, #1
 80060ec:	6033      	str	r3, [r6, #0]
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	0699      	lsls	r1, r3, #26
 80060f2:	bf42      	ittt	mi
 80060f4:	6833      	ldrmi	r3, [r6, #0]
 80060f6:	3302      	addmi	r3, #2
 80060f8:	6033      	strmi	r3, [r6, #0]
 80060fa:	6825      	ldr	r5, [r4, #0]
 80060fc:	f015 0506 	ands.w	r5, r5, #6
 8006100:	d106      	bne.n	8006110 <_printf_common+0x48>
 8006102:	f104 0a19 	add.w	sl, r4, #25
 8006106:	68e3      	ldr	r3, [r4, #12]
 8006108:	6832      	ldr	r2, [r6, #0]
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	42ab      	cmp	r3, r5
 800610e:	dc2b      	bgt.n	8006168 <_printf_common+0xa0>
 8006110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006114:	1e13      	subs	r3, r2, #0
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	bf18      	it	ne
 800611a:	2301      	movne	r3, #1
 800611c:	0692      	lsls	r2, r2, #26
 800611e:	d430      	bmi.n	8006182 <_printf_common+0xba>
 8006120:	4649      	mov	r1, r9
 8006122:	4638      	mov	r0, r7
 8006124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006128:	47c0      	blx	r8
 800612a:	3001      	adds	r0, #1
 800612c:	d023      	beq.n	8006176 <_printf_common+0xae>
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	6922      	ldr	r2, [r4, #16]
 8006132:	f003 0306 	and.w	r3, r3, #6
 8006136:	2b04      	cmp	r3, #4
 8006138:	bf14      	ite	ne
 800613a:	2500      	movne	r5, #0
 800613c:	6833      	ldreq	r3, [r6, #0]
 800613e:	f04f 0600 	mov.w	r6, #0
 8006142:	bf08      	it	eq
 8006144:	68e5      	ldreq	r5, [r4, #12]
 8006146:	f104 041a 	add.w	r4, r4, #26
 800614a:	bf08      	it	eq
 800614c:	1aed      	subeq	r5, r5, r3
 800614e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006152:	bf08      	it	eq
 8006154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006158:	4293      	cmp	r3, r2
 800615a:	bfc4      	itt	gt
 800615c:	1a9b      	subgt	r3, r3, r2
 800615e:	18ed      	addgt	r5, r5, r3
 8006160:	42b5      	cmp	r5, r6
 8006162:	d11a      	bne.n	800619a <_printf_common+0xd2>
 8006164:	2000      	movs	r0, #0
 8006166:	e008      	b.n	800617a <_printf_common+0xb2>
 8006168:	2301      	movs	r3, #1
 800616a:	4652      	mov	r2, sl
 800616c:	4649      	mov	r1, r9
 800616e:	4638      	mov	r0, r7
 8006170:	47c0      	blx	r8
 8006172:	3001      	adds	r0, #1
 8006174:	d103      	bne.n	800617e <_printf_common+0xb6>
 8006176:	f04f 30ff 	mov.w	r0, #4294967295
 800617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617e:	3501      	adds	r5, #1
 8006180:	e7c1      	b.n	8006106 <_printf_common+0x3e>
 8006182:	2030      	movs	r0, #48	; 0x30
 8006184:	18e1      	adds	r1, r4, r3
 8006186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006190:	4422      	add	r2, r4
 8006192:	3302      	adds	r3, #2
 8006194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006198:	e7c2      	b.n	8006120 <_printf_common+0x58>
 800619a:	2301      	movs	r3, #1
 800619c:	4622      	mov	r2, r4
 800619e:	4649      	mov	r1, r9
 80061a0:	4638      	mov	r0, r7
 80061a2:	47c0      	blx	r8
 80061a4:	3001      	adds	r0, #1
 80061a6:	d0e6      	beq.n	8006176 <_printf_common+0xae>
 80061a8:	3601      	adds	r6, #1
 80061aa:	e7d9      	b.n	8006160 <_printf_common+0x98>

080061ac <_printf_i>:
 80061ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b0:	7e0f      	ldrb	r7, [r1, #24]
 80061b2:	4691      	mov	r9, r2
 80061b4:	2f78      	cmp	r7, #120	; 0x78
 80061b6:	4680      	mov	r8, r0
 80061b8:	460c      	mov	r4, r1
 80061ba:	469a      	mov	sl, r3
 80061bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061c2:	d807      	bhi.n	80061d4 <_printf_i+0x28>
 80061c4:	2f62      	cmp	r7, #98	; 0x62
 80061c6:	d80a      	bhi.n	80061de <_printf_i+0x32>
 80061c8:	2f00      	cmp	r7, #0
 80061ca:	f000 80d5 	beq.w	8006378 <_printf_i+0x1cc>
 80061ce:	2f58      	cmp	r7, #88	; 0x58
 80061d0:	f000 80c1 	beq.w	8006356 <_printf_i+0x1aa>
 80061d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061dc:	e03a      	b.n	8006254 <_printf_i+0xa8>
 80061de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061e2:	2b15      	cmp	r3, #21
 80061e4:	d8f6      	bhi.n	80061d4 <_printf_i+0x28>
 80061e6:	a101      	add	r1, pc, #4	; (adr r1, 80061ec <_printf_i+0x40>)
 80061e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061ec:	08006245 	.word	0x08006245
 80061f0:	08006259 	.word	0x08006259
 80061f4:	080061d5 	.word	0x080061d5
 80061f8:	080061d5 	.word	0x080061d5
 80061fc:	080061d5 	.word	0x080061d5
 8006200:	080061d5 	.word	0x080061d5
 8006204:	08006259 	.word	0x08006259
 8006208:	080061d5 	.word	0x080061d5
 800620c:	080061d5 	.word	0x080061d5
 8006210:	080061d5 	.word	0x080061d5
 8006214:	080061d5 	.word	0x080061d5
 8006218:	0800635f 	.word	0x0800635f
 800621c:	08006285 	.word	0x08006285
 8006220:	08006319 	.word	0x08006319
 8006224:	080061d5 	.word	0x080061d5
 8006228:	080061d5 	.word	0x080061d5
 800622c:	08006381 	.word	0x08006381
 8006230:	080061d5 	.word	0x080061d5
 8006234:	08006285 	.word	0x08006285
 8006238:	080061d5 	.word	0x080061d5
 800623c:	080061d5 	.word	0x080061d5
 8006240:	08006321 	.word	0x08006321
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	1d1a      	adds	r2, r3, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	602a      	str	r2, [r5, #0]
 800624c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006254:	2301      	movs	r3, #1
 8006256:	e0a0      	b.n	800639a <_printf_i+0x1ee>
 8006258:	6820      	ldr	r0, [r4, #0]
 800625a:	682b      	ldr	r3, [r5, #0]
 800625c:	0607      	lsls	r7, r0, #24
 800625e:	f103 0104 	add.w	r1, r3, #4
 8006262:	6029      	str	r1, [r5, #0]
 8006264:	d501      	bpl.n	800626a <_printf_i+0xbe>
 8006266:	681e      	ldr	r6, [r3, #0]
 8006268:	e003      	b.n	8006272 <_printf_i+0xc6>
 800626a:	0646      	lsls	r6, r0, #25
 800626c:	d5fb      	bpl.n	8006266 <_printf_i+0xba>
 800626e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006272:	2e00      	cmp	r6, #0
 8006274:	da03      	bge.n	800627e <_printf_i+0xd2>
 8006276:	232d      	movs	r3, #45	; 0x2d
 8006278:	4276      	negs	r6, r6
 800627a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800627e:	230a      	movs	r3, #10
 8006280:	4859      	ldr	r0, [pc, #356]	; (80063e8 <_printf_i+0x23c>)
 8006282:	e012      	b.n	80062aa <_printf_i+0xfe>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	6820      	ldr	r0, [r4, #0]
 8006288:	1d19      	adds	r1, r3, #4
 800628a:	6029      	str	r1, [r5, #0]
 800628c:	0605      	lsls	r5, r0, #24
 800628e:	d501      	bpl.n	8006294 <_printf_i+0xe8>
 8006290:	681e      	ldr	r6, [r3, #0]
 8006292:	e002      	b.n	800629a <_printf_i+0xee>
 8006294:	0641      	lsls	r1, r0, #25
 8006296:	d5fb      	bpl.n	8006290 <_printf_i+0xe4>
 8006298:	881e      	ldrh	r6, [r3, #0]
 800629a:	2f6f      	cmp	r7, #111	; 0x6f
 800629c:	bf0c      	ite	eq
 800629e:	2308      	moveq	r3, #8
 80062a0:	230a      	movne	r3, #10
 80062a2:	4851      	ldr	r0, [pc, #324]	; (80063e8 <_printf_i+0x23c>)
 80062a4:	2100      	movs	r1, #0
 80062a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062aa:	6865      	ldr	r5, [r4, #4]
 80062ac:	2d00      	cmp	r5, #0
 80062ae:	bfa8      	it	ge
 80062b0:	6821      	ldrge	r1, [r4, #0]
 80062b2:	60a5      	str	r5, [r4, #8]
 80062b4:	bfa4      	itt	ge
 80062b6:	f021 0104 	bicge.w	r1, r1, #4
 80062ba:	6021      	strge	r1, [r4, #0]
 80062bc:	b90e      	cbnz	r6, 80062c2 <_printf_i+0x116>
 80062be:	2d00      	cmp	r5, #0
 80062c0:	d04b      	beq.n	800635a <_printf_i+0x1ae>
 80062c2:	4615      	mov	r5, r2
 80062c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80062c8:	fb03 6711 	mls	r7, r3, r1, r6
 80062cc:	5dc7      	ldrb	r7, [r0, r7]
 80062ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062d2:	4637      	mov	r7, r6
 80062d4:	42bb      	cmp	r3, r7
 80062d6:	460e      	mov	r6, r1
 80062d8:	d9f4      	bls.n	80062c4 <_printf_i+0x118>
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d10b      	bne.n	80062f6 <_printf_i+0x14a>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	07de      	lsls	r6, r3, #31
 80062e2:	d508      	bpl.n	80062f6 <_printf_i+0x14a>
 80062e4:	6923      	ldr	r3, [r4, #16]
 80062e6:	6861      	ldr	r1, [r4, #4]
 80062e8:	4299      	cmp	r1, r3
 80062ea:	bfde      	ittt	le
 80062ec:	2330      	movle	r3, #48	; 0x30
 80062ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062f6:	1b52      	subs	r2, r2, r5
 80062f8:	6122      	str	r2, [r4, #16]
 80062fa:	464b      	mov	r3, r9
 80062fc:	4621      	mov	r1, r4
 80062fe:	4640      	mov	r0, r8
 8006300:	f8cd a000 	str.w	sl, [sp]
 8006304:	aa03      	add	r2, sp, #12
 8006306:	f7ff fedf 	bl	80060c8 <_printf_common>
 800630a:	3001      	adds	r0, #1
 800630c:	d14a      	bne.n	80063a4 <_printf_i+0x1f8>
 800630e:	f04f 30ff 	mov.w	r0, #4294967295
 8006312:	b004      	add	sp, #16
 8006314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	f043 0320 	orr.w	r3, r3, #32
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	2778      	movs	r7, #120	; 0x78
 8006322:	4832      	ldr	r0, [pc, #200]	; (80063ec <_printf_i+0x240>)
 8006324:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	6829      	ldr	r1, [r5, #0]
 800632c:	061f      	lsls	r7, r3, #24
 800632e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006332:	d402      	bmi.n	800633a <_printf_i+0x18e>
 8006334:	065f      	lsls	r7, r3, #25
 8006336:	bf48      	it	mi
 8006338:	b2b6      	uxthmi	r6, r6
 800633a:	07df      	lsls	r7, r3, #31
 800633c:	bf48      	it	mi
 800633e:	f043 0320 	orrmi.w	r3, r3, #32
 8006342:	6029      	str	r1, [r5, #0]
 8006344:	bf48      	it	mi
 8006346:	6023      	strmi	r3, [r4, #0]
 8006348:	b91e      	cbnz	r6, 8006352 <_printf_i+0x1a6>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	f023 0320 	bic.w	r3, r3, #32
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	2310      	movs	r3, #16
 8006354:	e7a6      	b.n	80062a4 <_printf_i+0xf8>
 8006356:	4824      	ldr	r0, [pc, #144]	; (80063e8 <_printf_i+0x23c>)
 8006358:	e7e4      	b.n	8006324 <_printf_i+0x178>
 800635a:	4615      	mov	r5, r2
 800635c:	e7bd      	b.n	80062da <_printf_i+0x12e>
 800635e:	682b      	ldr	r3, [r5, #0]
 8006360:	6826      	ldr	r6, [r4, #0]
 8006362:	1d18      	adds	r0, r3, #4
 8006364:	6961      	ldr	r1, [r4, #20]
 8006366:	6028      	str	r0, [r5, #0]
 8006368:	0635      	lsls	r5, r6, #24
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	d501      	bpl.n	8006372 <_printf_i+0x1c6>
 800636e:	6019      	str	r1, [r3, #0]
 8006370:	e002      	b.n	8006378 <_printf_i+0x1cc>
 8006372:	0670      	lsls	r0, r6, #25
 8006374:	d5fb      	bpl.n	800636e <_printf_i+0x1c2>
 8006376:	8019      	strh	r1, [r3, #0]
 8006378:	2300      	movs	r3, #0
 800637a:	4615      	mov	r5, r2
 800637c:	6123      	str	r3, [r4, #16]
 800637e:	e7bc      	b.n	80062fa <_printf_i+0x14e>
 8006380:	682b      	ldr	r3, [r5, #0]
 8006382:	2100      	movs	r1, #0
 8006384:	1d1a      	adds	r2, r3, #4
 8006386:	602a      	str	r2, [r5, #0]
 8006388:	681d      	ldr	r5, [r3, #0]
 800638a:	6862      	ldr	r2, [r4, #4]
 800638c:	4628      	mov	r0, r5
 800638e:	f000 f97f 	bl	8006690 <memchr>
 8006392:	b108      	cbz	r0, 8006398 <_printf_i+0x1ec>
 8006394:	1b40      	subs	r0, r0, r5
 8006396:	6060      	str	r0, [r4, #4]
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	6123      	str	r3, [r4, #16]
 800639c:	2300      	movs	r3, #0
 800639e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a2:	e7aa      	b.n	80062fa <_printf_i+0x14e>
 80063a4:	462a      	mov	r2, r5
 80063a6:	4649      	mov	r1, r9
 80063a8:	4640      	mov	r0, r8
 80063aa:	6923      	ldr	r3, [r4, #16]
 80063ac:	47d0      	blx	sl
 80063ae:	3001      	adds	r0, #1
 80063b0:	d0ad      	beq.n	800630e <_printf_i+0x162>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	079b      	lsls	r3, r3, #30
 80063b6:	d413      	bmi.n	80063e0 <_printf_i+0x234>
 80063b8:	68e0      	ldr	r0, [r4, #12]
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	4298      	cmp	r0, r3
 80063be:	bfb8      	it	lt
 80063c0:	4618      	movlt	r0, r3
 80063c2:	e7a6      	b.n	8006312 <_printf_i+0x166>
 80063c4:	2301      	movs	r3, #1
 80063c6:	4632      	mov	r2, r6
 80063c8:	4649      	mov	r1, r9
 80063ca:	4640      	mov	r0, r8
 80063cc:	47d0      	blx	sl
 80063ce:	3001      	adds	r0, #1
 80063d0:	d09d      	beq.n	800630e <_printf_i+0x162>
 80063d2:	3501      	adds	r5, #1
 80063d4:	68e3      	ldr	r3, [r4, #12]
 80063d6:	9903      	ldr	r1, [sp, #12]
 80063d8:	1a5b      	subs	r3, r3, r1
 80063da:	42ab      	cmp	r3, r5
 80063dc:	dcf2      	bgt.n	80063c4 <_printf_i+0x218>
 80063de:	e7eb      	b.n	80063b8 <_printf_i+0x20c>
 80063e0:	2500      	movs	r5, #0
 80063e2:	f104 0619 	add.w	r6, r4, #25
 80063e6:	e7f5      	b.n	80063d4 <_printf_i+0x228>
 80063e8:	080068e3 	.word	0x080068e3
 80063ec:	080068f4 	.word	0x080068f4

080063f0 <__sflush_r>:
 80063f0:	898a      	ldrh	r2, [r1, #12]
 80063f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f4:	4605      	mov	r5, r0
 80063f6:	0710      	lsls	r0, r2, #28
 80063f8:	460c      	mov	r4, r1
 80063fa:	d457      	bmi.n	80064ac <__sflush_r+0xbc>
 80063fc:	684b      	ldr	r3, [r1, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	dc04      	bgt.n	800640c <__sflush_r+0x1c>
 8006402:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006404:	2b00      	cmp	r3, #0
 8006406:	dc01      	bgt.n	800640c <__sflush_r+0x1c>
 8006408:	2000      	movs	r0, #0
 800640a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800640c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800640e:	2e00      	cmp	r6, #0
 8006410:	d0fa      	beq.n	8006408 <__sflush_r+0x18>
 8006412:	2300      	movs	r3, #0
 8006414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006418:	682f      	ldr	r7, [r5, #0]
 800641a:	6a21      	ldr	r1, [r4, #32]
 800641c:	602b      	str	r3, [r5, #0]
 800641e:	d032      	beq.n	8006486 <__sflush_r+0x96>
 8006420:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	075a      	lsls	r2, r3, #29
 8006426:	d505      	bpl.n	8006434 <__sflush_r+0x44>
 8006428:	6863      	ldr	r3, [r4, #4]
 800642a:	1ac0      	subs	r0, r0, r3
 800642c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800642e:	b10b      	cbz	r3, 8006434 <__sflush_r+0x44>
 8006430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006432:	1ac0      	subs	r0, r0, r3
 8006434:	2300      	movs	r3, #0
 8006436:	4602      	mov	r2, r0
 8006438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800643a:	4628      	mov	r0, r5
 800643c:	6a21      	ldr	r1, [r4, #32]
 800643e:	47b0      	blx	r6
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	d106      	bne.n	8006454 <__sflush_r+0x64>
 8006446:	6829      	ldr	r1, [r5, #0]
 8006448:	291d      	cmp	r1, #29
 800644a:	d82b      	bhi.n	80064a4 <__sflush_r+0xb4>
 800644c:	4a28      	ldr	r2, [pc, #160]	; (80064f0 <__sflush_r+0x100>)
 800644e:	410a      	asrs	r2, r1
 8006450:	07d6      	lsls	r6, r2, #31
 8006452:	d427      	bmi.n	80064a4 <__sflush_r+0xb4>
 8006454:	2200      	movs	r2, #0
 8006456:	6062      	str	r2, [r4, #4]
 8006458:	6922      	ldr	r2, [r4, #16]
 800645a:	04d9      	lsls	r1, r3, #19
 800645c:	6022      	str	r2, [r4, #0]
 800645e:	d504      	bpl.n	800646a <__sflush_r+0x7a>
 8006460:	1c42      	adds	r2, r0, #1
 8006462:	d101      	bne.n	8006468 <__sflush_r+0x78>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b903      	cbnz	r3, 800646a <__sflush_r+0x7a>
 8006468:	6560      	str	r0, [r4, #84]	; 0x54
 800646a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800646c:	602f      	str	r7, [r5, #0]
 800646e:	2900      	cmp	r1, #0
 8006470:	d0ca      	beq.n	8006408 <__sflush_r+0x18>
 8006472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006476:	4299      	cmp	r1, r3
 8006478:	d002      	beq.n	8006480 <__sflush_r+0x90>
 800647a:	4628      	mov	r0, r5
 800647c:	f7ff fbee 	bl	8005c5c <_free_r>
 8006480:	2000      	movs	r0, #0
 8006482:	6360      	str	r0, [r4, #52]	; 0x34
 8006484:	e7c1      	b.n	800640a <__sflush_r+0x1a>
 8006486:	2301      	movs	r3, #1
 8006488:	4628      	mov	r0, r5
 800648a:	47b0      	blx	r6
 800648c:	1c41      	adds	r1, r0, #1
 800648e:	d1c8      	bne.n	8006422 <__sflush_r+0x32>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0c5      	beq.n	8006422 <__sflush_r+0x32>
 8006496:	2b1d      	cmp	r3, #29
 8006498:	d001      	beq.n	800649e <__sflush_r+0xae>
 800649a:	2b16      	cmp	r3, #22
 800649c:	d101      	bne.n	80064a2 <__sflush_r+0xb2>
 800649e:	602f      	str	r7, [r5, #0]
 80064a0:	e7b2      	b.n	8006408 <__sflush_r+0x18>
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a8:	81a3      	strh	r3, [r4, #12]
 80064aa:	e7ae      	b.n	800640a <__sflush_r+0x1a>
 80064ac:	690f      	ldr	r7, [r1, #16]
 80064ae:	2f00      	cmp	r7, #0
 80064b0:	d0aa      	beq.n	8006408 <__sflush_r+0x18>
 80064b2:	0793      	lsls	r3, r2, #30
 80064b4:	bf18      	it	ne
 80064b6:	2300      	movne	r3, #0
 80064b8:	680e      	ldr	r6, [r1, #0]
 80064ba:	bf08      	it	eq
 80064bc:	694b      	ldreq	r3, [r1, #20]
 80064be:	1bf6      	subs	r6, r6, r7
 80064c0:	600f      	str	r7, [r1, #0]
 80064c2:	608b      	str	r3, [r1, #8]
 80064c4:	2e00      	cmp	r6, #0
 80064c6:	dd9f      	ble.n	8006408 <__sflush_r+0x18>
 80064c8:	4633      	mov	r3, r6
 80064ca:	463a      	mov	r2, r7
 80064cc:	4628      	mov	r0, r5
 80064ce:	6a21      	ldr	r1, [r4, #32]
 80064d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80064d4:	47e0      	blx	ip
 80064d6:	2800      	cmp	r0, #0
 80064d8:	dc06      	bgt.n	80064e8 <__sflush_r+0xf8>
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f04f 30ff 	mov.w	r0, #4294967295
 80064e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e4:	81a3      	strh	r3, [r4, #12]
 80064e6:	e790      	b.n	800640a <__sflush_r+0x1a>
 80064e8:	4407      	add	r7, r0
 80064ea:	1a36      	subs	r6, r6, r0
 80064ec:	e7ea      	b.n	80064c4 <__sflush_r+0xd4>
 80064ee:	bf00      	nop
 80064f0:	dfbffffe 	.word	0xdfbffffe

080064f4 <_fflush_r>:
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	690b      	ldr	r3, [r1, #16]
 80064f8:	4605      	mov	r5, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	b913      	cbnz	r3, 8006504 <_fflush_r+0x10>
 80064fe:	2500      	movs	r5, #0
 8006500:	4628      	mov	r0, r5
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	b118      	cbz	r0, 800650e <_fflush_r+0x1a>
 8006506:	6a03      	ldr	r3, [r0, #32]
 8006508:	b90b      	cbnz	r3, 800650e <_fflush_r+0x1a>
 800650a:	f7ff fa3b 	bl	8005984 <__sinit>
 800650e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f3      	beq.n	80064fe <_fflush_r+0xa>
 8006516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006518:	07d0      	lsls	r0, r2, #31
 800651a:	d404      	bmi.n	8006526 <_fflush_r+0x32>
 800651c:	0599      	lsls	r1, r3, #22
 800651e:	d402      	bmi.n	8006526 <_fflush_r+0x32>
 8006520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006522:	f7ff fb8a 	bl	8005c3a <__retarget_lock_acquire_recursive>
 8006526:	4628      	mov	r0, r5
 8006528:	4621      	mov	r1, r4
 800652a:	f7ff ff61 	bl	80063f0 <__sflush_r>
 800652e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006530:	4605      	mov	r5, r0
 8006532:	07da      	lsls	r2, r3, #31
 8006534:	d4e4      	bmi.n	8006500 <_fflush_r+0xc>
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	059b      	lsls	r3, r3, #22
 800653a:	d4e1      	bmi.n	8006500 <_fflush_r+0xc>
 800653c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800653e:	f7ff fb7d 	bl	8005c3c <__retarget_lock_release_recursive>
 8006542:	e7dd      	b.n	8006500 <_fflush_r+0xc>

08006544 <__swbuf_r>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	460e      	mov	r6, r1
 8006548:	4614      	mov	r4, r2
 800654a:	4605      	mov	r5, r0
 800654c:	b118      	cbz	r0, 8006556 <__swbuf_r+0x12>
 800654e:	6a03      	ldr	r3, [r0, #32]
 8006550:	b90b      	cbnz	r3, 8006556 <__swbuf_r+0x12>
 8006552:	f7ff fa17 	bl	8005984 <__sinit>
 8006556:	69a3      	ldr	r3, [r4, #24]
 8006558:	60a3      	str	r3, [r4, #8]
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	071a      	lsls	r2, r3, #28
 800655e:	d525      	bpl.n	80065ac <__swbuf_r+0x68>
 8006560:	6923      	ldr	r3, [r4, #16]
 8006562:	b31b      	cbz	r3, 80065ac <__swbuf_r+0x68>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	6922      	ldr	r2, [r4, #16]
 8006568:	b2f6      	uxtb	r6, r6
 800656a:	1a98      	subs	r0, r3, r2
 800656c:	6963      	ldr	r3, [r4, #20]
 800656e:	4637      	mov	r7, r6
 8006570:	4283      	cmp	r3, r0
 8006572:	dc04      	bgt.n	800657e <__swbuf_r+0x3a>
 8006574:	4621      	mov	r1, r4
 8006576:	4628      	mov	r0, r5
 8006578:	f7ff ffbc 	bl	80064f4 <_fflush_r>
 800657c:	b9e0      	cbnz	r0, 80065b8 <__swbuf_r+0x74>
 800657e:	68a3      	ldr	r3, [r4, #8]
 8006580:	3b01      	subs	r3, #1
 8006582:	60a3      	str	r3, [r4, #8]
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	6022      	str	r2, [r4, #0]
 800658a:	701e      	strb	r6, [r3, #0]
 800658c:	6962      	ldr	r2, [r4, #20]
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	429a      	cmp	r2, r3
 8006592:	d004      	beq.n	800659e <__swbuf_r+0x5a>
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	07db      	lsls	r3, r3, #31
 8006598:	d506      	bpl.n	80065a8 <__swbuf_r+0x64>
 800659a:	2e0a      	cmp	r6, #10
 800659c:	d104      	bne.n	80065a8 <__swbuf_r+0x64>
 800659e:	4621      	mov	r1, r4
 80065a0:	4628      	mov	r0, r5
 80065a2:	f7ff ffa7 	bl	80064f4 <_fflush_r>
 80065a6:	b938      	cbnz	r0, 80065b8 <__swbuf_r+0x74>
 80065a8:	4638      	mov	r0, r7
 80065aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ac:	4621      	mov	r1, r4
 80065ae:	4628      	mov	r0, r5
 80065b0:	f000 f806 	bl	80065c0 <__swsetup_r>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d0d5      	beq.n	8006564 <__swbuf_r+0x20>
 80065b8:	f04f 37ff 	mov.w	r7, #4294967295
 80065bc:	e7f4      	b.n	80065a8 <__swbuf_r+0x64>
	...

080065c0 <__swsetup_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4b2a      	ldr	r3, [pc, #168]	; (800666c <__swsetup_r+0xac>)
 80065c4:	4605      	mov	r5, r0
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	460c      	mov	r4, r1
 80065ca:	b118      	cbz	r0, 80065d4 <__swsetup_r+0x14>
 80065cc:	6a03      	ldr	r3, [r0, #32]
 80065ce:	b90b      	cbnz	r3, 80065d4 <__swsetup_r+0x14>
 80065d0:	f7ff f9d8 	bl	8005984 <__sinit>
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065da:	0718      	lsls	r0, r3, #28
 80065dc:	d422      	bmi.n	8006624 <__swsetup_r+0x64>
 80065de:	06d9      	lsls	r1, r3, #27
 80065e0:	d407      	bmi.n	80065f2 <__swsetup_r+0x32>
 80065e2:	2309      	movs	r3, #9
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065ea:	f04f 30ff 	mov.w	r0, #4294967295
 80065ee:	81a3      	strh	r3, [r4, #12]
 80065f0:	e034      	b.n	800665c <__swsetup_r+0x9c>
 80065f2:	0758      	lsls	r0, r3, #29
 80065f4:	d512      	bpl.n	800661c <__swsetup_r+0x5c>
 80065f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065f8:	b141      	cbz	r1, 800660c <__swsetup_r+0x4c>
 80065fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065fe:	4299      	cmp	r1, r3
 8006600:	d002      	beq.n	8006608 <__swsetup_r+0x48>
 8006602:	4628      	mov	r0, r5
 8006604:	f7ff fb2a 	bl	8005c5c <_free_r>
 8006608:	2300      	movs	r3, #0
 800660a:	6363      	str	r3, [r4, #52]	; 0x34
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006612:	81a3      	strh	r3, [r4, #12]
 8006614:	2300      	movs	r3, #0
 8006616:	6063      	str	r3, [r4, #4]
 8006618:	6923      	ldr	r3, [r4, #16]
 800661a:	6023      	str	r3, [r4, #0]
 800661c:	89a3      	ldrh	r3, [r4, #12]
 800661e:	f043 0308 	orr.w	r3, r3, #8
 8006622:	81a3      	strh	r3, [r4, #12]
 8006624:	6923      	ldr	r3, [r4, #16]
 8006626:	b94b      	cbnz	r3, 800663c <__swsetup_r+0x7c>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800662e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006632:	d003      	beq.n	800663c <__swsetup_r+0x7c>
 8006634:	4621      	mov	r1, r4
 8006636:	4628      	mov	r0, r5
 8006638:	f000 f85d 	bl	80066f6 <__smakebuf_r>
 800663c:	89a0      	ldrh	r0, [r4, #12]
 800663e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006642:	f010 0301 	ands.w	r3, r0, #1
 8006646:	d00a      	beq.n	800665e <__swsetup_r+0x9e>
 8006648:	2300      	movs	r3, #0
 800664a:	60a3      	str	r3, [r4, #8]
 800664c:	6963      	ldr	r3, [r4, #20]
 800664e:	425b      	negs	r3, r3
 8006650:	61a3      	str	r3, [r4, #24]
 8006652:	6923      	ldr	r3, [r4, #16]
 8006654:	b943      	cbnz	r3, 8006668 <__swsetup_r+0xa8>
 8006656:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800665a:	d1c4      	bne.n	80065e6 <__swsetup_r+0x26>
 800665c:	bd38      	pop	{r3, r4, r5, pc}
 800665e:	0781      	lsls	r1, r0, #30
 8006660:	bf58      	it	pl
 8006662:	6963      	ldrpl	r3, [r4, #20]
 8006664:	60a3      	str	r3, [r4, #8]
 8006666:	e7f4      	b.n	8006652 <__swsetup_r+0x92>
 8006668:	2000      	movs	r0, #0
 800666a:	e7f7      	b.n	800665c <__swsetup_r+0x9c>
 800666c:	20000068 	.word	0x20000068

08006670 <_sbrk_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	2300      	movs	r3, #0
 8006674:	4d05      	ldr	r5, [pc, #20]	; (800668c <_sbrk_r+0x1c>)
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	f7fa f82e 	bl	80006dc <_sbrk>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_sbrk_r+0x1a>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	b103      	cbz	r3, 800668a <_sbrk_r+0x1a>
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	20001c50 	.word	0x20001c50

08006690 <memchr>:
 8006690:	4603      	mov	r3, r0
 8006692:	b510      	push	{r4, lr}
 8006694:	b2c9      	uxtb	r1, r1
 8006696:	4402      	add	r2, r0
 8006698:	4293      	cmp	r3, r2
 800669a:	4618      	mov	r0, r3
 800669c:	d101      	bne.n	80066a2 <memchr+0x12>
 800669e:	2000      	movs	r0, #0
 80066a0:	e003      	b.n	80066aa <memchr+0x1a>
 80066a2:	7804      	ldrb	r4, [r0, #0]
 80066a4:	3301      	adds	r3, #1
 80066a6:	428c      	cmp	r4, r1
 80066a8:	d1f6      	bne.n	8006698 <memchr+0x8>
 80066aa:	bd10      	pop	{r4, pc}

080066ac <__swhatbuf_r>:
 80066ac:	b570      	push	{r4, r5, r6, lr}
 80066ae:	460c      	mov	r4, r1
 80066b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b4:	4615      	mov	r5, r2
 80066b6:	2900      	cmp	r1, #0
 80066b8:	461e      	mov	r6, r3
 80066ba:	b096      	sub	sp, #88	; 0x58
 80066bc:	da0c      	bge.n	80066d8 <__swhatbuf_r+0x2c>
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	2100      	movs	r1, #0
 80066c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066c6:	bf0c      	ite	eq
 80066c8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80066cc:	2340      	movne	r3, #64	; 0x40
 80066ce:	2000      	movs	r0, #0
 80066d0:	6031      	str	r1, [r6, #0]
 80066d2:	602b      	str	r3, [r5, #0]
 80066d4:	b016      	add	sp, #88	; 0x58
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
 80066d8:	466a      	mov	r2, sp
 80066da:	f000 f849 	bl	8006770 <_fstat_r>
 80066de:	2800      	cmp	r0, #0
 80066e0:	dbed      	blt.n	80066be <__swhatbuf_r+0x12>
 80066e2:	9901      	ldr	r1, [sp, #4]
 80066e4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80066e8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80066ec:	4259      	negs	r1, r3
 80066ee:	4159      	adcs	r1, r3
 80066f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066f4:	e7eb      	b.n	80066ce <__swhatbuf_r+0x22>

080066f6 <__smakebuf_r>:
 80066f6:	898b      	ldrh	r3, [r1, #12]
 80066f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066fa:	079d      	lsls	r5, r3, #30
 80066fc:	4606      	mov	r6, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	d507      	bpl.n	8006712 <__smakebuf_r+0x1c>
 8006702:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006706:	6023      	str	r3, [r4, #0]
 8006708:	6123      	str	r3, [r4, #16]
 800670a:	2301      	movs	r3, #1
 800670c:	6163      	str	r3, [r4, #20]
 800670e:	b002      	add	sp, #8
 8006710:	bd70      	pop	{r4, r5, r6, pc}
 8006712:	466a      	mov	r2, sp
 8006714:	ab01      	add	r3, sp, #4
 8006716:	f7ff ffc9 	bl	80066ac <__swhatbuf_r>
 800671a:	9900      	ldr	r1, [sp, #0]
 800671c:	4605      	mov	r5, r0
 800671e:	4630      	mov	r0, r6
 8006720:	f7ff fb04 	bl	8005d2c <_malloc_r>
 8006724:	b948      	cbnz	r0, 800673a <__smakebuf_r+0x44>
 8006726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800672a:	059a      	lsls	r2, r3, #22
 800672c:	d4ef      	bmi.n	800670e <__smakebuf_r+0x18>
 800672e:	f023 0303 	bic.w	r3, r3, #3
 8006732:	f043 0302 	orr.w	r3, r3, #2
 8006736:	81a3      	strh	r3, [r4, #12]
 8006738:	e7e3      	b.n	8006702 <__smakebuf_r+0xc>
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	6020      	str	r0, [r4, #0]
 800673e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006742:	81a3      	strh	r3, [r4, #12]
 8006744:	9b00      	ldr	r3, [sp, #0]
 8006746:	6120      	str	r0, [r4, #16]
 8006748:	6163      	str	r3, [r4, #20]
 800674a:	9b01      	ldr	r3, [sp, #4]
 800674c:	b15b      	cbz	r3, 8006766 <__smakebuf_r+0x70>
 800674e:	4630      	mov	r0, r6
 8006750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006754:	f000 f81e 	bl	8006794 <_isatty_r>
 8006758:	b128      	cbz	r0, 8006766 <__smakebuf_r+0x70>
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	f023 0303 	bic.w	r3, r3, #3
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	431d      	orrs	r5, r3
 800676a:	81a5      	strh	r5, [r4, #12]
 800676c:	e7cf      	b.n	800670e <__smakebuf_r+0x18>
	...

08006770 <_fstat_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	2300      	movs	r3, #0
 8006774:	4d06      	ldr	r5, [pc, #24]	; (8006790 <_fstat_r+0x20>)
 8006776:	4604      	mov	r4, r0
 8006778:	4608      	mov	r0, r1
 800677a:	4611      	mov	r1, r2
 800677c:	602b      	str	r3, [r5, #0]
 800677e:	f7f9 ff87 	bl	8000690 <_fstat>
 8006782:	1c43      	adds	r3, r0, #1
 8006784:	d102      	bne.n	800678c <_fstat_r+0x1c>
 8006786:	682b      	ldr	r3, [r5, #0]
 8006788:	b103      	cbz	r3, 800678c <_fstat_r+0x1c>
 800678a:	6023      	str	r3, [r4, #0]
 800678c:	bd38      	pop	{r3, r4, r5, pc}
 800678e:	bf00      	nop
 8006790:	20001c50 	.word	0x20001c50

08006794 <_isatty_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	2300      	movs	r3, #0
 8006798:	4d05      	ldr	r5, [pc, #20]	; (80067b0 <_isatty_r+0x1c>)
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	602b      	str	r3, [r5, #0]
 80067a0:	f7f9 ff85 	bl	80006ae <_isatty>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d102      	bne.n	80067ae <_isatty_r+0x1a>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	b103      	cbz	r3, 80067ae <_isatty_r+0x1a>
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
 80067b0:	20001c50 	.word	0x20001c50

080067b4 <_init>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	bf00      	nop
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr

080067c0 <_fini>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr
